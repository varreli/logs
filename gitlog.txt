**** BEGIN LOGGING AT Sun Aug 13 15:08:52 2017

*	ltielen has quit (Quit: WeeChat 1.9)
*	t4nk342 (584bb9a6@gateway/web/freenode/ip.88.75.185.166) has joined
*	begriffs has quit (Quit: Leaving...)
<erisco>	Donovan, lets start from the top... does this make sense? http://lpaste.net/357658
<Donovan>	yep
*	t4nk342 has quit (Client Quit)
*	VitorCBSB has quit (Quit: Page closed)
<mbw>	So, basically, I (as of now) have to type parameters. One stands for whether an url is absolute ("https://www.example.com/foo/bar"), relative to a host ("/foo/bar") or some general path ("/bar"). The other parameter stands for the actual problem. I parse starting from the top-level, then extract a link and follow it, until I get what I actually want. So for parsing pictures, I have something like "data 
<mbw>	PointsTo = TheHost | TopLevel | PreviewPage | AThumbnailPic | TheActualPic".
<Donovan>	oh wait
<mbw>	s/to/two
<Donovan>	erisco: so the problem is my definition of Matrix?
*	kadoban is now known as mud
<erisco>	Donovan, no
<erisco>	Donovan, just a second why I write the types out
<jle`>	what's the actual problem?
<mbw>	jle`: So I have parsing functions of type getThumbNails :: Doc (and XML document tree) -> [Either URLError (URL 'HostRelative 'AThumbnailPic)], for instance.
<erisco>	Donovan, http://lpaste.net/357658 does the annotation make sense?
<jle`>	and what are the append functinos that you want to unite?
*	robertc (~robertchr@159.203.33.60) has joined
*	slacko_ has quit (Ping timeout: 276 seconds)
<mbw>	The problem is that if I expand on this, it will get complicated quickly. On the other hand, just passing some additional data type around and do vanilla pattern matching, I have to basically write an analogue to error "urk" in a lot of places, since the functions would all become partial again.
*	_asc has quit (Ping timeout: 260 seconds)
*	seanzheng (~Mutter@123.117.170.112) has joined
<jle`>	this last part i can't understand without any examples
<jle`>	of how things get complicated
<jle`>	or of how things become partial
*	seanzheng has quit (Remote host closed the connection)
<mbw>	The append example was one thing. The other would be parsing functions "parseURLAbsolute :: String -> Maybe (URL 'Absolute p), parseURLRelative -> Maybe (URL 'HostRelative/PathRelative p) or some such.
*	seanzheng (~Mutter@45.77.99.26) has joined
<jle`>	the append example was not a complete example, though?  i wasn't sure what you meant in the '...'s
<mbw>	And like I said, I am not sure if GADTs are the way to go, it was just an idea.
<erisco>	Donovan, that is why GHC is complaining 'a' is not 'Vector a', because that is precisely what has to be true to make your definition work
<erisco>	[a] ~ Vector a  only if  a ~ Vector a
<jle`>	i'm not even sure what your problem/issues are, sorry
*	db8093246 has quit (Remote host closed the connection)
<erisco>	sorry,  [a] ~ [Vector a] only if  a ~ Vector a
<Donovan>	it makes sense erisco, I just dont understand how I can tell it to expect Vector a, instead of a
<jle`>	parseURLAbsolute :: String -> Maybe (URL 'Absolute p) seems very reasonable?
*	robertc has quit (Ping timeout: 240 seconds)
<jle`>	or do you wan tone function that can parse *all* url types?
*	seanzheng has quit (Client Quit)
<erisco>	Donovan, that just does not make sense :P
<jle`>	in that case you can do something using singletons there
<Donovan>	-_-
<Donovan>	none of this makes sense!
<jle`>	parseURL :: Sing type -> String -> Maybe (URL type p)
<jle`>	so if the user passed in a 'Sing 'Absolute', it'd return a Maybe (URL 'Absolute p)
<mbw>	The append problem at the moment are just two functions, "appendToHost :: URL 'HostRelative p -> URL 'Absolute p -> URL 'Absolute p" and "appendToPath :: URL 'PathRelative p -> URL 'Absolute p -> URL 'Absolute p", but other similar ones would probably be possible.
<jle`>	and if the user passed in a 'Sing 'HostRelative', it'd return a Maybe (URL 'HoseRelative p)
<erisco>	Donovan, that is like saying if you were writing the implementation for id :: a -> a that you want it to expect 'Vector a' instead of 'a'
<erisco>	Donovan, well, that just isn't what the type of id is
<wilornel>	Hey #haskell! I have `let uriPath = uriPath uri; putStrn uri_path`, and it does not work because IO does not match with Maybe, which I understand. However, I was wondering, how could I circumvent this issue?
<jle`>	and yeah that full append thing can be combined using singletons too
<jle`>	append :: Sing type -> URL type p -> URL 'Absolute p -> URL 'Absolute p
<wilornel>	 `uri <- parseURI fullpath; let uriPath = uriPath uri; putStrn uri_path`, 
<Donovan>	erisco: thats why I think my definition of matrix might be a problem
<erisco>	Donovan, it isn't
*	safe (~safe@unaffiliated/safe) has joined
<erisco>	your implementation of foldr for Matrix is a problem though
<mbw>	jle` But in the parseURL example, the decision on 'type' would be dependent on the actual contents of the String. (I'm thinking foralls...)
<Donovan>	then i dont get it, a is supposed to be anything, right?
<erisco>	correct
<jle`>	these both emulate having a Appendable typeclass and a Parseable typeclass for things of kind URLTYpe
<jle`>	mbw: oh, you don't want the user to decide
<jle`>	you want the function to decide
<erisco>	so you can't just decide to make it Vector a, it has to be any type
<jared-w>	Donovan: the fact that 'a' could be anything also means you can assume nothing about 'a'
<mbw>	jle`: The user is me, and I don't trust myself :)
<jle`>	yeah, there's two types of quantification that people oftne mix up
<jle`>	for universal qualification, the caller gets to pick what the type variables are instantiated as
<jle`>	for existential quantifcation, the function decides what the type variables become instantiated as
<erisco>	Donovan, if the type of id is a -> a then that means it works for all types
<jle`>	and the caller has to handle whatever choice
<mbw>	In the parseURL example, if the String was "/hello", a Sing 'Absolute would be a logic error.
<erisco>	Donovan, if in the definition of id you assumed 'a' was 'Vector a' then your definition would only work for Vector a
<wilornel>	Is there a concept that could solve this?
<jle`>	well the String might not be parseable anyway
<erisco>	Donovan, and if that were the case, giving id the type of a -> a would no longer make sense
<wilornel>	It would be nice if I got a pointer to a name or a book's chapter
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
<Donovan>	right
*	matael1 (~matael@89.249.74.218) has joined
*	nhandler1 has quit (Remote host closed the connection)
<jle`>	mbw: but yeah, you can have the function decide what type to give by returnig it existentially quanified
<Donovan>	but i -know- my Matrix is a [Vector a]
<jle`>	one way to do this is to have a dependent pair like SomeUrl
<erisco>	no, you don't, that is wrong
<Donovan>	and once i unwrap it, i dont understand why i cant just foldr through it like a normal list
<jle`>	data SomeURL p = forall t. SomeUrl (Sing t) (URL t p)
<erisco>	the 'a' is the 'a' inside of [Vector a]
<Donovan>	yes
<erisco>	the 'a' is in the list, in the vector
<jle`>	then you'd have parse :: String -> Maybe (SomeURL p)
<Donovan>	and this is the issue im struggling with
<Donovan>	which is why i think my types are wrong
<mbw>	wilornel: If you're inside IO, the simplest solution would be to pattern match against the result of parseURI, i.e. case parseURI str of Nothing -> error "urk"; Just uri -> ...
<erisco>	Donovan, sorry I misread slightly what you were asserting... 'a' the variable and 'a' the word got mixed up
*	slack1256 has quit (Remote host closed the connection)
<jle`>	alternatively you can also squish your URL type and your singleton together so you don't need to pass an explicit singleton, but they're basically two ways of doing the same thing
<erisco>	Donovan, you just have to get into the 'a' in your list of vectors. You can do that :)
<erisco>	Donovan, start this way... say you just had  Vector a  rather than  [Vector a]   then how would you define foldr?
<jle`>	mbw: with String -> Maybe (SomeURL p), if the parsing function decides it's an absolute url, it can return SomeURL SAbsolute theUrl
<wilornel>	thanks mbw. I remember reading about case matching in Haskell programming from First Principles but I thought he explained that it was not so nice to work with
<mbw>	jle`: I get the usage of existentials in this, I think. However, the Singleton type is still not clear to me. Since you said it is defined via GADTs, what would be an example definition?
<jle`>	case matching is literally the best part about haskell, heh
<wilornel>	He had nested a lot of cases one into another
<wilornel>	He was able to get rid of them specifically because all his functions were all using the Maybe monad?
<jared-w>	Donovan: you had an older version of the Foldable for Matrix that worked but was wrong. Can you update your paste with that older version as well?
<jle`>	data SURLType :: URLType -> Type; SAbsolute :: SURLType 'Absolute; SHostRelative :: SURLType 'HostRelative; SPathRelative :: SURlType 'PathRelative
<erisco>	Donovan, or alternatively think about how you can take [Vector a] to [a]
<mbw>	wilornel: When starting a new function from scratch, I often start off using case matching, and only afterwards simplify if it makes sense, for instance by using a particular monad instance.
<wilornel>	thank you!
*	robotrolll (~robotroll@unaffiliated/robotroll) has joined
<jared-w>	wilornel: the example in that one was intended to show off the 'composition of effects' that monads allow and how it combines really powerfully with do notation
<erisco>	Donovan, for the first approach it is actually easier to define foldMap instead of foldr
*	hiratara has quit (Quit: ZNC - http://znc.in)
<jle`>	a lot of this exact thing is actually covered in my singletons tutorial
<jle`>	that i haven't released yet
<wilornel>	and the 'composition of effects' works well when you use one monad within a do notation, right?
*	xaviergmail has quit (Quit: WeeChat 1.4)
*	robotroll has quit (Ping timeout: 255 seconds)
*	robotrolll is now known as robotroll
*	hiratara (~hiratara@240f:7:4708:1:8467:4270:9167:f6ac) has joined
<mbw>	lol
*	shangxiao (~shangxiao@124-149-153-77.dyn.iinet.net.au) has joined
*	newhoggy has quit (Remote host closed the connection)
<jared-w>	wilornel: the amazing thing about it is that it works with all monads pretty nicely; that's one of the most powerful aspects of monads
<jle`>	mbw: it's "combplete" but i still need to rewrite a lot of it to get it to flow better, but maybe it will help
<jle`>	mbw: https://gist.githubusercontent.com/Cedev/3ef669f809b3c2e771e57efb8771899e/raw/611f333364158b95e000a917c8f7ea7dd4142987/structrally-free-alternative.hs
<jle`>	oh sorry, wrong link
<jle`>	mbw: https://blog.jle.im/entry/introduction-to-singletons-1
*	texasmynsted has quit (Ping timeout: 240 seconds)
<jle`>	do not distribute please :)
*	newhoggy (~newhoggy@1.129.96.245) has joined
<mbw>	It's a promise ;)
<jared-w>	"Some things are so private they can only be shared with your therapist or with 10,000 other people on #haskell"
<wilornel>	jle` but it would have to be one specific modal within a do block, right?
<jle`>	"do not distribute" i say, to the most active channel on freenode
<mbw>	jle`: This use very useful, thanks for (really) sharing (soon?)!
<wilornel>	you could not have composition of effects work nicely with two different monads in a do block
<jle`>	no problem! let me know if you have any feedback too :)
*	t7 has quit (Remote host closed the connection)
*	texasmynsted (~texasmyns@c-76-122-222-203.hsd1.tn.comcast.net) has joined
<erisco>	:t \f acc xs -> foldr (.) id (fmap (flip (foldr f)) xs) acc
<lambdabot>	(Foldable t, Foldable t1, Functor t1) => (a -> b -> b) -> b -> t1 (t a) -> b
<erisco>	I feel like there should be a better way to compose foldrs than that ... sounds like a lens thing
*	thc202 has quit (Ping timeout: 246 seconds)
<jared-w>	wilornel: you're right that you can only use one monad at a time in a do block. However, plenty of monads can be 'converted' into other monads quite nicely. Doing so is done with monad transformers
<pacak>	:t foldl
<lambdabot>	Foldable t => (b -> a -> b) -> b -> t a -> b
<mbw>	jle`: Does your definition of SURLType ... correspond to a particular part of the tutorial? (You said it did, but which one, in case I miss it and you're not around anymore)?
<pacak>	:t foldl . foldl
<lambdabot>	(Foldable t, Foldable t1) => (b -> a -> b) -> b -> t1 (t a) -> b
<jle`>	mbw: yeah SURLType is the singleton pattern for URLType
*	peterbecich (~peterbeci@75-142-96-216.static.mtpk.ca.charter.com) has joined
<jle`>	like data SBool :: Bool -> Type where STrue :: SBool 'True, SFalse :: SBool 'False
*	newhoggy has quit (Ping timeout: 240 seconds)
<jle`>	s/singleton pattern/singleton
<erisco>	:t foldr . flip . foldr . flip . flip
<lambdabot>	(Foldable t, Foldable t1) => (a -> b -> b) -> b -> t1 (t a) -> b
<mniip>	jle`, you should expand a bit on the "exactly one inhabitant"
<erisco>	pacak, does that really work out to the same thing? amazing
<mniip>	that 'SingDS s' is inhabited by exactly one inhabitant *once we pick the s*
<jle`>	thanks , good note :)
<mbw>	Is there also an example for the correspondence between the use for existentials and singletons? You implied that they both could be used to express the same thing?
<jle`>	but yeahmost of this will be rewritten with a different introduction/conclusion
<jle`>	and flow
<mniip>	also typo doorStats
<erisco>	pacak, so you can compose  foldr . flip  but you need an extra flip in front
<jle`>	mbw: hm i mean that we usually implement singletons using GADTs in haskell
<jared-w>	Seems ugly, honestly. I don't really like tons of flips in my equations :p
<jle`>	well, in modern times, we use the template haskell from the singletons library
<jle`>	which generates the GADT
*	coot___________ has quit (Quit: coot___________)
<pacak>	:t foldr >>> foldr . flip
<lambdabot>	(Foldable t1, Foldable t) => (a -> b -> b) -> b -> t1 (t a) -> b
<jle`>	and existentials and singletons are two different tools for differnt purposes
<Donovan>	jared-w: I've updated the paste with the older definition that typechecked, but didnt do what i wanted
<pacak>	Or is it <<<....
<jared-w>	>>> is flipped (.), <<< is just (.) iirc
<jared-w>	erisco: can you take a peak at Donovan's paste again?
*	chase has quit (Ping timeout: 246 seconds)
*	wespiser (~wespiser@2601:197:a80:19e4:54d5:db54:80aa:9551) has joined
<mbw>	jle`: Ok, I scrolled back and I think I just misread "alternatively you can also squish your URL type and your singleton together so you don't need to pass an explicit singleton, 
<jared-w>	also, Donovan, did you catch what erisco was mentioning about the foldMap earlier?
<mbw>	but they're basically two ways of doing the same thing"
<Donovan>	yeah i did thanks jared-w, I'll look into it a guess, seeing as im struggling this much with foldr
*	trigone (5a374e9f@gateway/web/freenode/ip.90.55.78.159) has joined
<erisco>	Donovan, I think you'd have a much easier time defining foldMap instead of foldr
**** BEGIN LOGGING AT Mon Aug 14 18:53:34 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:46:51 2017)
*	Channel #haskell url: http://www.haskell.org/
<Welkin>	hm
<c_wraith>	Welkin: and you wanted to use it in one branch of a case, but not the other
*	DexterLB has quit (Quit: So long and thanks for all the fish)
*	tsaka__ has quit (Ping timeout: 255 seconds)
<Welkin>	I don't get it
*	Puggy (~FASDFSF@unaffiliated/fasdfsf) has joined
<c_wraith>	Welkin: So you need something like the above vacuous function to get the types to work.  vacuous = fmap absurd
<Welkin>	how would you get an `a` from Void?
<c_wraith>	You can't.  The thing is, you can't get a Void, either.
*	Fekinox (~Fekinox@cpe-74-72-183-234.nyc.res.rr.com) has joined
<c_wraith>	So it's just as useful to say you have a function of type Void -> a  as it is to say you have a value of type Void
*	Puggy has quit (Max SendQ exceeded)
*	halil has quit ()
<f-uckboi>	puggy was here ?
*	Puggy (~FASDFSF@unaffiliated/fasdfsf) has joined
*	Wast has quit (Quit: Connection closed for inactivity)
*	dan_f has quit (Quit: dan_f)
*	jasonszhao (~Jason@cpe-107-185-162-79.socal.res.rr.com) has joined
*	u0_a153 (~u0_a153@103.58.11.86) has joined
<u0_a153>	yo
<f-uckboi>	ay man what up
<erisco>	I dunno, I don't know how to derive it but I can't fault the idea of your equivalence mnoonan_
<u0_a153>	i need help
<crucify_me>	hi quick question. here, we can test for equality between the two type constructors: ThisOne and ThatOne. ie. ThisOne 5 == ThatOne 5 -> False. Does this go to the ignore case to return False ? https://ptpb.pw/IPJG  
*	dan_f (~dan@24.148.32.207) has joined
<u0_a153>	i need help
*	peglong (~dskfjki@36.78.141.75) has joined
<mnoonan_>	crucify_me: yes
<u0_a153>	i need helo
<u0_a153>	help
*	iqubic (~iqubic@2601:602:8a00:1bd7::9d29) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<c_wraith>	:t let { forever' :: Applicative f => f a -> f Void ; forever' f = let { x = f *> x} in x } in forever' -- Welkin, you can't have a value of type Void, so the Void in the signature indicates a value that can never be produced.  In this case, that means forever' never returns
<lambdabot>	Applicative f => f a -> f Void
<peglong>	!help
<u0_a153>	ill pay
<crucify_me>	mnoonan_, thanks, where in the code do we get behavior that allows us to test ThisOne and ThatOne for equality? is it in the first line?
*	banc has quit (Quit: ZNC - http://znc.in)
*	hexadecimal-1540 (~hexadecim@2601:282:a03:f1f0:5d25:c1be:4fa0:5511) has joined
<crucify_me>	I would have thought they were separate
<mnoonan_>	crucify_me: no, the first like is when both sides are ThisOnes, the second is when both are ThatOnes, and the last catches the rest of the cases
*	hucksy_ (~hucksy@p4FD1F8DE.dip0.t-ipconnect.de) has joined
<mnoonan_>	*line
*	stoopkid_ has quit (Quit: Connection closed for inactivity)
<crucify_me>	so really, they are not "allowed" to be tested, that statement gets passed to the last case. mnoonan_ 
<f-uckboi>	im back
*	u0_a153 has quit (Quit: leaving)
<mnoonan_>	crucify_me: right, (==) on the inner a/b will never get called in that case
<crucify_me>	technically, it doesn't even test them for equality
*	halogenandtoast (~matthew-m@122x220x193x82.ap122.ftth.ucom.ne.jp) has joined
*	f-uckboi (~u0_a153@103.58.11.76) has left
<crucify_me>	the inner a/b ?
*	algebra (~amarpotgh@p57967EEF.dip0.t-ipconnect.de) has joined
<crucify_me>	I thought my moniker was out there...
*	harfangk (~quassel@222.110.160.66) has joined
<crucify_me>	oh boi
<mnoonan_>	you can write “ThisOne (error “Barf”) == ThatOne (error “argh”)” and your program won’t throw an error, because the stuff inside the ThisOne and ThatOne don’t need to be inspected
*	path[l] has quit (Quit: path[l])
*	hucksy has quit (Ping timeout: 240 seconds)
<nshepperd>	getting an 'a' for Void is easy. let's enumerate the cases:
<nshepperd>	*from Void
<mnoonan_>	nshepperd: :)
<Welkin>	nshepperd: how come you always remind me of mass effect?
<nshepperd>	because i'm jane shepard, saviour of the galaxy
*	twandy has quit (Ping timeout: 240 seconds)
*	Wizek has quit (Quit: Connection closed for inactivity)
<crucify_me>	right, its not inspected at all . thanks mnoonan_ .. but the "or" operator here '|' is not what prohibits the prog. from inspecting one against the other
*	algebra has quit (Ping timeout: 240 seconds)
<nshepperd>	a slightly more advanced way of enumerating the cases would be: ⊥ -> ⊥
*	isomarcte has quit (Remote host closed the connection)
<erisco>	you only get to do that if you're the semantics
<crucify_me>	nshepperd, bottoms ? not there yet, you referring to my inquiries?
<nshepperd>	crucify_me: no, i'm talking about the meaning of the 'vacuous' and 'absurd' functions
*	taktoa has quit (Remote host closed the connection)
<crucify_me>	I know a vacuous girl
*	cdg (~cdg@2600:1700:3120:40e0:a9fa:14ad:17c3:a863) has joined
<nshepperd>	erisco: i can map bottoms to things if I want! you can't tell me what to do!
<pacak>	:t absurd
<lambdabot>	Void -> a
<pacak>	-- give me nothing and I'll return anything
<pacak>	:t vacuous
*	CoderPuppy has quit (Ping timeout: 246 seconds)
<lambdabot>	Functor f => f Void -> f a
<pacak>	-- give me object containing nothing - I'll fill it with anything
<dsal>	Hmm...  I've got two of these things:  t :: Monad f => f LocalTime    -- how do I subtract them?  :(
*	chlong_ has quit (Ping timeout: 260 seconds)
<erisco>	> vacuous myWallet
<lambdabot>	 error: Variable not in scope: myWallet :: f Void
*	CoderPuppy (~cpup@32.218.114.15) has joined
<erisco>	hang on while I mail it...
<nshepperd>	'give me an object containing the impossible' would maybe be more to my taste
*	broccolistem (~broccolis@gateway/vpn/privateinternetaccess/broccolistem) has joined
*	banc (~master@217.151.98.168) has joined
<pacak>	nshepperd: Or that.
<pacak>	Words are hard.
*	darjeeling_ has quit (Ping timeout: 240 seconds)
*	nect has quit (Remote host closed the connection)
<pacak>	Ex falso quodlibet .
<pacak>	For me is something ghc tells when it can figure out my code.
<pacak>	impossible is
*	capn_freako (~dbanas@2602:306:b8a2:a220:197c:dfca:72ce:dac3) has joined
<nshepperd>	or perhaps what you are doing is replacing nothing with the absence of something specific :)
<nshepperd>	absurd :: Void -> Int -- if you don't have anything, you don't have an Int
<pacak>	Prove me wrong. It will give you int if you pass it Void. You just can't pass it Void since it's not a thing. Assuming bottom-less category.
<crucify_me>	may I ask again to be certain: the "|" symbol .. call it "OR" in this use? .. disallow the ThisOne and ThatOne. nip it in the bud so to speak..by passing ThisOne 5 == ThatOne 5 , directly to the ignore case, or does it happen elsewhere? do you see my point? https://ptpb.pw/IPJG
*	newhoggy_ has quit (Remote host closed the connection)
*	newhoggy (~newhoggy@2405:9000:1400:120:eca4:54c7:a7d5:cd67) has joined
*	newhoggy has quit (Remote host closed the connection)
<crucify_me>	disallow .... *from being compared*
*	newhoggy (~newhoggy@2405:9000:1400:10:1908:ab4f:f0fd:7734) has joined
*	pacak fails to parse the question
<crucify_me>	sorry. pacak
<crucify_me>	I wish I could phrase it better
<jared-w>	crucify_me: you wrote that instance correctly
<pacak>	You create a datatype that contains something of type a
<nshepperd>	crucify_me: the meaning of | in a data declaration is simply to enumerate the possible cases
<pacak>	container can be either of those two things.
<pacak>	Code and instance seems correct.
<pacak>	ghc can derive the same instance though.
*	sellout- has quit (Quit: Leaving.)
*	capn_freako has quit (Client Quit)
<jared-w>	crucify_me: also, the pattern matching of the function is what brings it to the ignore case
<crucify_me>	but those are two separate cases, yet ThisOne and ThatOne are "allowed" to be compared, because there is no error
<nshepperd>	crucify_me: a value of type 'Which a' is either ThisOne x for some x :: a OR ThatOne y for some y :: a
*	albeit (44e7d974@gateway/web/cgi-irc/kiwiirc.com/ip.68.231.217.116) has joined
<jared-w>	If the eq instance is "passed"   ThisOne 5 == ThatOne 5, what will happen is that first: You have the line (==) (ThisOne a) (ThisOne b); you have a ThatOne in the second parameter so it doesn't match and it tries the second line
*	pfurla has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
<jared-w>	The second line has a ThatOne as the first parameter and so it doesn't match the comparison you "passed in", so it goes to the third line. The third line says "return False for anything you give me" so it returns false
<crucify_me>	jared-w, excellent got it. thanks ALL !
*	jfischoff (~jonathanf@pool-74-101-197-223.nycmny.fios.verizon.net) has joined
<dsal>	I don't understand this thing I'm getting for time.   t :: Monad f => f LocalTime
<dsal>	repl prints it, but "show t" blows up
*	shangxiao (~shangxiao@106-68-89-169.dyn.iinet.net.au) has joined
<pacak>	dsal: repl is more magical.
<jared-w>	repl is very magic
<pacak>	dsal: blows up in what way?
<dsal>	I guess I don't understand why it returns a function.
<dsal>	I kind of understand it now.   show doesn't know how to deal with the function thing.
<pacak>	f LocalTime looks like a value in a monad to me.
<pacak>	You can't get current LocalTime from a pure function.
<pacak>	At least not unless you pass it in.
<dsal>	It's not current time.
<dsal>	parseTime is deprecated and suggests calling parseTimeM True
<dsal>	Which returns a monad instead of Maybe
*	harfangk has quit (Ping timeout: 240 seconds)
<mnoonan_>	dsal: ghci is specializing “f” to “IO”, and it knows how to show anything of type “IO t”, as long as it also knows how to show “t” 
<mnoonan_>	it’s kind of cheating, because it knows how to show “IO t” only by running the action, and then showing the result
<pacak>	dsal: Maybe is Monad.
*	CoderPuppy has quit (Ping timeout: 248 seconds)
*	frankpf (~frankpf@unaffiliated/frankpf) has joined
<pacak>	:t parseTimeM
*	pera has quit (Quit: leaving)
<lambdabot>	error: Variable not in scope: parseTimeM
<pacak>	Meh.
<mnoonan_>	(I think)
<dsal>	It's just weird to me that parsing returns a function I need to call.
<pacak>	it returns a wrapped value
*	cpennington has quit (Ping timeout: 255 seconds)
<dsal>	But why is it wrapped?
*	chao-tic (~chao@218.101.54.122) has joined
<dsal>	It's also slightly confusing to me how to call a nullary function vs. accidentally passing its value.
<dsal>	(er, it *as* a value)
*	CoderPuppy (~cpup@32.218.114.31) has joined
*	jmcarthur has quit (Ping timeout: 246 seconds)
<pacak>	Result might not be there for example.
<mnoonan_>	dsal: for warty reasons, the Monad interface includes the ability to fail
<koz_>	mnoonan_: Did they not break it out into MonadFail yet?
<geekosaur>	for most functions there is no difference. if it's a monad, you use >>= (or <- in do)
<geekosaur>	*a monadic value
<mnoonan_>	dsal:  parseTimeM can fail, but since they leave the Monad instance polymorphic, the *caller* gets to pick what failing should mean
<geekosaur>	I think people have snarked about parseTimeM before... it's a bit of a throwback
<mnoonan_>	so if you use parseTimeM in a way where it results in a “Maybe time”, you’ll get Nothing in the failure case, or Just theTime in the successful case
<pacak>	:t fail
<lambdabot>	Monad m => String -> m a
<pacak>	fail is bad.
*	algebra (~amarpotgh@p57967EEF.dip0.t-ipconnect.de) has joined
<geekosaur>	back in the day. Data.Map.lookup used the same trick. (think it changed in 6.6)
<dsal>	fail fores the monad?
<dsal>	er, forces
<geekosaur>	using fail requires a Monad context, yes
<geekosaur>	note that Maybe is a Monad, so supplies the correct context already
<geekosaur>	and you get back Nothing on error or Just theParseResult
<geekosaur>	but you could force a monad that lets it tell you *what* failed
<pacak>	 fail defaults to this
<pacak>	fail        :: String -> m a     
<pacak>	fail s      = errorWithoutStackTrace s
*	mson has quit (Quit: Connection closed for inactivity)
*	mizu_no_oto has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
Python interface unloaded
**** ENDING LOGGING AT Mon Aug 14 19:38:17 2017

**** BEGIN LOGGING AT Tue Aug 15 11:01:37 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<Aruro>	it generates list
<Aruro>	from seed
<ertes-w>	unfoldr is the epitome of stateful sequences =)
*	Achylles (~Achylles@2804:431:d724:ec3e:2f4a:8bb1:95d8:6afc) has joined
*	caumeslasal has quit (Ping timeout: 240 seconds)
*	takle has quit (Remote host closed the connection)
*	db8093246 (~db8093246@c-62-220-168-181.cust.bredband2.com) has joined
*	robertc has quit (Ping timeout: 260 seconds)
*	takle (~takle@62.190.88.242) has joined
*	rribeiro has quit (Remote host closed the connection)
*	C0_c0ax_ (~C0_c0ax_@ool-18bcd93c.dyn.optonline.net) has joined
*	alios has quit (Remote host closed the connection)
*	rribeiro (~rribeiro@2804:d45:2b06:2900:19bd:f7c:e9de:bd42) has joined
*	caumeslasal (~Thunderbi@mar92-10-82-239-65-141.fbx.proxad.net) has joined
*	hulufei has quit (Ping timeout: 260 seconds)
*	mud has quit (Ping timeout: 255 seconds)
*	chaosmasttter (~chaosmast@p200300EB7BD65B51021FE2FFFE8BD789.dip0.t-ipconnect.de) has joined
*	mud (~mud@unaffiliated/kadoban) has joined
*	rlj has quit (Ping timeout: 260 seconds)
*	Achylles has quit (Ping timeout: 246 seconds)
*	freusque (~fre@69-231-190-109.dsl.ovh.fr) has joined
*	zoey (~zoey@2601:448:8001:494a:c11c:ce85:8732:e5d9) has joined
*	takle has quit (Ping timeout: 255 seconds)
<nshepperd_>	dsal: you *can* define a list type where the recursion goes the "other way". They're called snoc lists https://mail.haskell.org/pipermail/haskell-cafe/2007-July/029485.html
*	rribeiro has quit (Ping timeout: 246 seconds)
<nshepperd_>	snoc = backwards cons
*	newhoggy (~newhoggy@ppp118-211-222-35.bras1.syd2.internode.on.net) has joined
<nshepperd_>	Anyway, it's just the same as a normal list, but you imagine the list growing to the left instead of the right :p
*	caumeslasal has quit (Ping timeout: 246 seconds)
*	tobhe has quit (Ping timeout: 240 seconds)
*	uglyfigurine (~uglyfigur@131.228.197.34) has joined
<nshepperd_>	Nil :> 1 :> 2 :> 3
*	samrat has quit (Ping timeout: 240 seconds)
*	toblorone has quit (Read error: Connection reset by peer)
*	coot____________ has quit (Read error: No route to host)
*	toblorone (~toblorone@162.246.216.28) has joined
*	coot____________ (~coot@188.146.168.107.nat.umts.dynamic.t-mobile.pl) has joined
*	aphorisme has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	wrengr_away is now known as wrengr
*	newhoggy has quit (Ping timeout: 248 seconds)
*	KongWubba (~yaaic@a89-182-145-225.net-htp.de) has joined
*	emilypi has quit (Remote host closed the connection)
*	frankpf (~frankpf@unaffiliated/frankpf) has joined
*	takle (~takle@62.190.88.242) has joined
*	jfredett has quit (Read error: Connection reset by peer)
*	maddybutt has quit (Ping timeout: 260 seconds)
*	kav has quit (Read error: Connection reset by peer)
*	newhoggy (~newhoggy@ppp118-211-222-35.bras1.syd2.internode.on.net) has joined
*	jfredett_ (~quassel@2601:189:c380:c25:7884:212c:17b7:5c2c) has joined
*	kav (~kari@dsl-hkibng42-5673d7-15.dhcp.inet.fi) has joined
*	maddybutt (~maddy@72.18.233.74) has joined
*	prietoj (~user@host86-181-90-77.range86-181.btcentralplus.com) has joined
*	kvda has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	Achylles (~Achylles@200-100-219-238.dial-up.telesp.net.br) has joined
*	takle has quit (Ping timeout: 240 seconds)
*	lambdaGrp has quit (Quit: leaving)
*	prietoj2 (56b55a4d@gateway/web/freenode/ip.86.181.90.77) has joined
*	CoderPuppy has quit (Ping timeout: 240 seconds)
*	eazar001 (~ebrahim@2602:304:cf7b:efb0:92c9:e760:3b19:1e32) has joined
*	ubsan_ has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	newhoggy has quit (Ping timeout: 240 seconds)
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
<prietoj>	Hello! I was wondering what's the idiomatic way of using lenses conditionally (i.e. modifying a value in a given path only if the value in another path satisfies certain condition)
*	FreeBirdLjj has quit (Remote host closed the connection)
*	davama (~davama@208.74.142.117) has joined
*	algebra has quit (Remote host closed the connection)
*	davama (~davama@208.74.142.117) has left
*	CoderPuppy (~cpup@32.218.116.181) has joined
*	newhoggy (~newhoggy@ppp118-211-222-35.bras1.syd2.internode.on.net) has joined
*	_ja_ (cdadd90a@gateway/web/freenode/ip.205.173.217.10) has joined
*	mou (~donwillia@188.228.46.39) has joined
*	eacameron has quit (Ping timeout: 248 seconds)
<Aruro>	btw probably there are also bidirectional lists where (:) adds elements from both sides :)
<Akii>	anyone has an idea how to add a request header to servant client?
*	emilypi (~emilypi@pool-100-33-104-88.nycmny.fios.verizon.net) has joined
*	werner291 (~werner@ip-80-236-242-67.dsl.scarlet.be) has joined
*	newhoggy has quit (Ping timeout: 255 seconds)
*	Scip (~scip@76.121.6.102) has joined
<cocreature>	Akii: afaik you should just use https://hackage.haskell.org/package/servant-0.11/docs/Servant-API-Header.html#t:Header in your api endpoint and then you have to pass an additional argument representing the header
<phadej>	Akii: http://haskell-servant.readthedocs.io/en/stable/tutorial/ApiType.html#request-headers
<phadej>	cocreature: +1
*	Frans-Willem has quit (Remote host closed the connection)
<Akii>	thanks!
*	newhoggy (~newhoggy@ppp118-211-222-35.bras1.syd2.internode.on.net) has joined
*	Myrl-saki has quit (Ping timeout: 240 seconds)
*	albertus1 has quit (Ping timeout: 260 seconds)
*	wonko7 (~wonko7@2a01:e34:ec14:5250:3d22:e39a:969c:45bb) has joined
*	newhoggy has quit (Ping timeout: 240 seconds)
*	Arcaelyx (~Arcaelyx@pool-98-116-59-163.nycmny.fios.verizon.net) has joined
*	newhoggy (~newhoggy@ppp118-211-222-35.bras1.syd2.internode.on.net) has joined
*	keemyb has quit (Ping timeout: 240 seconds)
*	quobo (uid178934@gateway/web/irccloud.com/x-uxteddbtwsmdueiy) has joined
<ertes-w>	prietoj: lenses can be multi-"path", but the paths are isolated from each other…  however, you can use something like 'filtered'
<ertes-w>	> (traverse . filtered even *~ 10) [1..]
<lambdabot>	 [1,20,3,40,5,60,7,80,9,100,11,120,13,140,15,160,17,180,19,200,21,220,23,240,...
*	Unhammer has quit (Remote host closed the connection)
<ertes-w>	prietoj: well, i messed up terminology…  traversals focus on arbitrarily many points…  lenses are traversals that focus exactly one point
*	osa1_ (~omer@91.93.255.57) has joined
*	gawen has quit (Remote host closed the connection)
*	sellout- has quit (Quit: Leaving.)
*	Ulabanderos (~matias@mobile-access-bcee70-35.dhcp.inet.fi) has joined
<ertes-w>	prietoj: now within the predicate of 'filtered' you could use another lens/traversal
*	gawen (~gawen@movzbl.root.sx) has joined
*	albertus1 (~seb@x4e35914b.dyn.telefonica.de) has joined
*	QF-MichaelK has quit (Quit: Leaving.)
<prietoj>	Ah, makes sense. I'll give it a try, thanks!
*	newhoggy has quit (Ping timeout: 240 seconds)
*	valica (~valica@2a02:2f0c:b000:1e5:780f:6867:740b:a2ba) has joined
<ertes-w>	> (traverse . filtered (even . view _1) . _2 . traverse %~ toUpper) (zip [1..] ["abc", "def", "ghi", "jkl", "mno"])
<lambdabot>	 [(1,"abc"),(2,"DEF"),(3,"ghi"),(4,"JKL"),(5,"mno")]
<ertes-w>	prietoj: example ^
*	Scip has quit (Ping timeout: 240 seconds)
<prietoj>	Great!
*	osa1_ has quit (Client Quit)
*	osa1 has quit (Remote host closed the connection)
*	rlj (5eea37cd@gateway/web/freenode/ip.94.234.55.205) has joined
*	newhoggy (~newhoggy@ppp118-211-222-35.bras1.syd2.internode.on.net) has joined
*	aarvar (~foewfoiew@50.34.105.170) has joined
*	osa1 (~omer@haskell/developer/osa1) has joined
*	iAmerikan (~dwshrewt@unaffiliated/iamerikan) has joined
*	dcoutts_ has quit (Ping timeout: 246 seconds)
<Akii>	cocreature, phadej: that was exactly it xD Was away too long from Haskell again
<ahihi>	is there some tool for monitoring thread creation/destruction in a haskell program?
<Akii>	love how servant forces you to encode request headers into your apis
*	Frans-Willem (~quassel@5468F048.cm-12-1d.dynamic.ziggo.nl) has joined
<geekosaur>	ahihi, ThreadScope? btu building it can be painful on some platforms I gather
*	newhoggy has quit (Ping timeout: 240 seconds)
*	Xion_ has quit (Ping timeout: 240 seconds)
<ahihi>	geekosaur: I will have a look, thanks :)
*	newhoggy (~newhoggy@ppp118-211-222-35.bras1.syd2.internode.on.net) has joined
*	rossberg_ has quit (Ping timeout: 255 seconds)
*	mud has quit (Ping timeout: 255 seconds)
*	osa1 has quit (Ping timeout: 240 seconds)
*	osa1 (~omer@haskell/developer/osa1) has joined
*	freusque has quit (Ping timeout: 240 seconds)
*	hulufei (~hulufei@14.28.139.99) has joined
*	newhoggy has quit (Ping timeout: 240 seconds)
*	bennofs1 (~benno@v0044.dip.tu-dresden.de) has joined
<kgadek>	hi all. I'm using lens' makeFields, but that forces me into single module (otherwise I get name lash of classes). Any clever way around it?
*	DTZUZO (~DTZUZO@S0106bcd16584b0aa.vs.shawcable.net) has joined
*	mud (~mud@unaffiliated/kadoban) has joined
*	eazar001 has quit (Quit: WeeChat 1.9)
*	mstruebing (~mstruebin@p200300E3DBD6B6831581C6DDD3B6720F.dip0.t-ipconnect.de) has joined
*	hulufei has quit (Ping timeout: 240 seconds)
**** ENDING LOGGING AT Tue Aug 15 11:57:28 2017

**** BEGIN LOGGING AT Tue Aug 15 18:48:47 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<ab9rf>	uiuc is about two hours south of me, but i don't have a car 
*	relrod (~relrod@origin.elrod.me) has joined
*	relrod has quit (Changing host)
*	relrod (~relrod@redhat/relrod) has joined
*	esph (~weechat@unaffiliated/esph) has joined
*	Disconnected ()
**** ENDING LOGGING AT Tue Aug 15 18:51:39 2017

**** BEGIN LOGGING AT Tue Aug 15 18:52:10 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	algebra (~amarpotgh@p57967E6B.dip0.t-ipconnect.de) has joined
*	Youmu (uid129469@gateway/web/irccloud.com/x-bpzzdiiyaoavgtfy) has joined
*	jmcarthur (~jmcarthur@2601:86:100:1620:11f3:5a14:fc98:ceb1) has joined
*	prophile has quit (Ping timeout: 246 seconds)
*	Costar (~Costar@2804:14d:7e85:305:6535:6e8f:7fba:1405) has joined
*	renzhi (~renzhi@114.84.168.12) has joined
*	prophile (~alynn@oftn/oswg-member/prophile) has joined
*	algebra has quit (Ping timeout: 240 seconds)
*	albertid_ (~albertid_@p5DC4D34F.dip0.t-ipconnect.de) has joined
*	banc has quit (Quit: ZNC - http://znc.in)
*	hucksy (~hucksy@p4FD1FFDD.dip0.t-ipconnect.de) has joined
*	Myrl-saki has quit (Ping timeout: 248 seconds)
*	dddddd has quit (Remote host closed the connection)
<erisco>	well I have the library ready but now I figure I need to generalise to Category
*	louispan has quit (Quit: louispan)
*	albertid__ has quit (Ping timeout: 240 seconds)
*	prophile has quit (Ping timeout: 248 seconds)
<erisco>	though I am not sure that is possible, hm
*	hanslo-Wesson (~hanslo-W@pool-100-38-74-239.nycmny.fios.verizon.net) has joined
<penteract>	What library are you working on?
*	hucksy_ has quit (Ping timeout: 240 seconds)
<erisco>	:t (.).(.)
<lambdabot>	(b -> c) -> (a1 -> a -> b) -> a1 -> a -> c
<erisco>	the question is if you can generalise that to category, but I don't think so
*	prophile (~alynn@oftn/oswg-member/prophile) has joined
*	frankpf (~frankpf@unaffiliated/frankpf) has joined
*	nykros (c9b100f1@gateway/web/freenode/ip.201.177.0.241) has joined
<nykros>	hi
<cheater>	hi, does anyone know why i would be having this issue with the DCP solver? https://github.com/chrisnc/hvx/issues/10
*	tommd (~tommd@75-164-224-54.ptld.qwest.net) has joined
<nykros>	no idea, sorry
*	cpup has quit (Ping timeout: 240 seconds)
<nykros>	do u know how to enumerate an infinite matrix? My solution gave me only half a matrix
*	banc (~master@217.151.98.168) has joined
*	ackpacket (~ackpacket@unaffiliated/ackpacket) has joined
<nykros>	[(x, y) | x<- [0..], y<- [0..x]]
<erisco>	:t fmap . (.)
<lambdabot>	Functor f => (b -> c) -> f (a -> b) -> f (a -> c)
*	hanslo-Wesson has quit (Ping timeout: 248 seconds)
<erisco>	well, for generalised (.) that will work for  cat a b  if  cat a  is a Functor
*	CoderPuppy (~cpup@32.218.118.87) has joined
<erisco>	I am not sure how niche that becomes, though
<penteract>	:t fmap `fmap` fmap
<lambdabot>	(Functor f, Functor f1) => (a -> b) -> f1 (f a) -> f1 (f b)
*	tlaxkit has quit (Quit: Saliendo...)
<erisco>	:t fmap . (Control.Category..)
<lambdabot>	forall k (a :: k) (f :: * -> *) (b :: k) (cat :: k -> k -> *) (c :: k). (Category cat, Functor f) => cat b c -> f (cat a b) -> f (cat a c)
*	MarcelineVQ has quit (Quit: q)
*	dual (~bonafide@cpe-74-75-153-119.maine.res.rr.com) has joined
*	samrat (~samrat@202.51.76.80) has joined
<Welkin>	:t (Control.Category..) (Control.Category..) (Control.Category..)
<lambdabot>	forall k (a :: k) a1 (b :: k) (cat :: k -> k -> *) (c :: k). Category cat => cat b c -> (a1 -> cat a b) -> a1 -> cat a c
*	bencryption (~bencrypti@unaffiliated/bencryption) has joined
*	bandit145 (~bandit145@24-151-12-38.dhcp.nwtn.ct.charter.com) has joined
*	chao-tic (~chao@218.101.54.122) has joined
<erisco>	obviously it works for (->) ... seems to work for Kleisli as well, so maybe it is worth it
Python interface unloaded
**** ENDING LOGGING AT Tue Aug 15 19:22:48 2017

**** BEGIN LOGGING AT Wed Aug 16 18:07:14 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<koz_>	edwardk: Thank you - shall watch/read/understand.
<edwardk>	the short version is that kfix uses exactly the same structure of argument as the classic loeb's theorem proof.
*	tsaka_ has quit (Ping timeout: 240 seconds)
*	CoderPuppy (~cpup@32.218.118.147) has joined
<edwardk>	dan piponi's loeb function on the other hand just kinda squints at the type and replaces the 'is provable' modality with a functor and tries to write it using fmap and fixed points
*	_asc has quit (Ping timeout: 240 seconds)
*	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has joined
*	Apocalisp has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<edwardk>	so kfix is closer to loeb than either of the two 'comonadic fixed points' that always exist for all comonads and can actually be much faster due to it having nice structure
*	esssing has quit (Ping timeout: 255 seconds)
*	pera has quit (Ping timeout: 248 seconds)
<epoitras>	Can someone explain to me why this simple monad transformer example seems to violate haskell's type system?
<epoitras>	http://lpaste.net/357755
<edwardk>	If you look at the definition kfix is sort of like the bastard child of wfix and cfix, it shoves the 'w' in all the places that either of the other two do, but its able to exploit 'ComonadApply' to compute efficiently
*	robertc (~robertchr@162.243.22.32) has joined
<epoitras>	'ask' seems to return a Reader instead of State
*	esssing (~quassel@2001:41d0:52:d00::1e6) has joined
<koz_>	epoitras: Yeah, because ask is the Reader monad's shindig.
<koz_>	For pulling out the state, there's a different function.
<koz_>	(get I think)
<koz_>	:t get
<edwardk>	epoitras: 'ask' is for accessing the reader. 'get' is for accessing the state
<lambdabot>	MonadState s m => m s
<epoitras>	oh god...
<epoitras>	Thanks friends
<koz_>	epoitras: No worries - happens to all of us.
*	xcmw (~textual@2605:a000:132b:20d8:40e4:ac62:d7d2:e76e) has joined
*	takle has quit (Ping timeout: 264 seconds)
*	uglyfigurine (~uglyfigur@73.110.34.152) has joined
*	danthemyth has quit (Remote host closed the connection)
*	kvda has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	robertc has quit (Ping timeout: 246 seconds)
*	mnoonan__ (~mnoonan@cpe-69-201-46-148.twcny.res.rr.com) has joined
<koz_>	edwardk: I'm watching the talk, just got to Loeb's Theorem in Haskell, and my reaction to it was: https://vignette2.wikia.nocookie.net/glee/images/e/eb/What-kind-of-sorcery-is-this.jpg/revision/latest?cb=20130422032527
*	kvda (~kvda@unaffiliated/kvda) has joined
*	uglyfigurine has quit (Ping timeout: 240 seconds)
*	cobreadmonster has quit (Quit: Connection closed for inactivity)
*	search (~redmileki@S0106ac202ec5e763.ed.shawcable.net) has joined
*	chao-tic has quit (Ping timeout: 248 seconds)
*	jsph (~jjjjjj@2001:19f0:6000:4001::6e) has joined
<edwardk>	koz_: http://blog.sigfpe.com/2006/11/from-l-theorem-to-spreadsheet.html <- is the original intro to loeb's theorem that piponi write a decade ago
*	cranej (~cranej@42.120.74.204) has joined
*	eacameron has quit (Remote host closed the connection)
<koz_>	edwardk: I'll add it to my reading queue. Thanks!
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
<pacak>	koz_: How long is your reading queue and what's in there?
<edwardk>	also note that kfix requires just a bit too much of 'w' it requires ComonadApply but never exploits extract. it really should be for some "SemicomonadApply' class that we don't have, or 'ExtendApply' whatever you want to call it
*	uglyfigurine (~uglyfigur@73.110.34.152) has joined
<koz_>	pacak: For this topic, or in general?
<edwardk>	that would permit it to handle piponi's [] based examples
<pacak>	In general
<pacak>	just curious
<koz_>	edwardk: What would ExtendApply's operations be?
<edwardk>	as [] can be extended and has a zipping operation, but can't be extracted
*	mnoonan__ has quit (Quit: mnoonan__)
<edwardk>	koz_: ComonadApply minus extract
*	justan0theruser (~justanoth@unaffiliated/justanotheruser) has joined
<koz_>	edwardk: So that would be something like (Functor w) => ExtractApply w where ... ?
<edwardk>	fmap, (<*>), and duplicate
*	search has quit (Ping timeout: 240 seconds)
<koz_>	edwardk: <*> being applicative splat?
<edwardk>	class Extend f => ExtendApply f where (<@>) :: f (a -> b) -> f a -> f b
*	beekill (~beekill@27.78.201.180) has joined
<edwardk>	yeah
<edwardk>	(<@>) has (<*>) like associativity
*	justanotheruser has quit (Ping timeout: 264 seconds)
*	dec0n (~dec0n@draugas.gis-centras.lt) has joined
*	louispan (~textual@203.38.203.134) has joined
*	louispan has quit (Client Quit)
<edwardk>	a strong lax symmetric semi-monoidal semi-comonad -- say that three times real quick
<koz_>	edwardk: Describing something as 'strong lax' always threw me.
<edwardk>	likewise
<koz_>	I know that they refer to very different things, but it still sounds weird.
<edwardk>	i've just taken to dropping both words and letting the people who actually know category theory shake out what i mean =)
<koz_>	edwardk: Which basically means 'people who aren't me'. :P
<koz_>	(since I don't actually know category theory)
*	amut has quit (Quit: AtomicIRC: The nuclear option.)
<koz_>	edwardk: So would it make sense to have 'Applicative w => ExtractApply w' then?
*	uglyfigurine has quit (Ping timeout: 260 seconds)
*	louispan (~textual@203.38.203.134) has joined
*	louispan has quit (Client Quit)
*	Gurkenglas_ has quit (Ping timeout: 264 seconds)
<edwardk>	koz_: no requirement of pure
<koz_>	edwardk: Ah, I see.
*	wespiser (~wespiser@2601:197:a80:19e4:b939:cb50:e66b:7f1b) has joined
<koz_>	(hence the 'semi-monoidal' part?)
<edwardk>	its the same operations as Extend and Apply but with an extra requirement of symmetry
*	boxscape has quit (Ping timeout: 260 seconds)
*	xplat has quit (Ping timeout: 240 seconds)
*	replay has quit (Quit: Textual IRC Client: www.textualapp.com)
*	dennisvennink has quit (Max SendQ exceeded)
*	cdg (~cdg@2600:1700:3120:40e0:5869:c1fa:500d:bb82) has joined
*	bandit145 (~bandit145@24-151-12-38.dhcp.nwtn.ct.charter.com) has joined
*	dennisvennink (~dv@095-096-179-040.static.chello.nl) has joined
*	halogenandtoast (~matthew-m@73.94.13.160.dy.iij4u.or.jp) has joined
*	juhp (~juhp@redhat/juhp) has joined
*	emilypi has quit (Remote host closed the connection)
<edwardk>	koz_: for reference, the 'comonadapply' class that is referenced there is based on the ComonadZip class from Uustalu and Vene's "Essence of Dataflow Programming" https://pdfs.semanticscholar.org/ad77/ebcb739925559b48adc441d86ea45e7b9900.pdf -- that paper is quite good up until it starts mucking about with Bikleisli
*	Johannes13 (~Johannes1@unaffiliated/johannes13) has joined
*	rblaze (~Adium@209.6.152.108) has joined
<koz_>	edwardk: Ah, I see. Yeah, I didn't get the whole Bikleisli thing either.
<koz_>	(otherwise, that's a really cool paper)
*	filterfish (~rgh@2001:44b8:3162:5200:5ee0:c5ff:fea4:e764) has joined
<edwardk>	its a bad idea that got a lot of traction at the time
*	uglyfigurine (~uglyfigur@73.110.34.152) has joined
*	silverjam (~Mutter@c-24-4-236-171.hsd1.ca.comcast.net) has joined
<koz_>	Also, as a side note - could you please remind me of the different tradeoffs for the various free(er) monads? You mentioned reflection without remorse, machines, and one other one.
<koz_>	And I think the machines one has a large overhead in general, but I can't recall the other two.
*	hulufei (~hulufei@38.121.61.254) has joined
*	cdg has quit (Ping timeout: 246 seconds)
*	rblaze1 (~Adium@2620:10d:c091:180::1:32ca) has joined
*	DasBrain has quit (Ping timeout: 240 seconds)
<edwardk>	there are 4 approaches to free to get from functor up to monad. there is the naive adt encoding that has problems with left associated binds, Codensity (Free f) that has the problem of being too big, but having an embedding and a retraction of that embedding from Free f. There is the "Church free" monad "F" i have in the free package that has the correct size (same size as "Free f") unlike Codensity (Free f), while maintaining the
<edwardk>	benefits for left associated binds, but both of these latter two solutions have problems when it comes to inspecting and continuing on to do more binding. Reflection without remorse handles both left associated binds and continued binding in exchange for terrible constants.
*	rblaze has quit (Ping timeout: 240 seconds)
<koz_>	edwardk: And Oleg's latest paper on extensible effects uses which of these?
<edwardk>	you can choose to optionally compose this with Coyoneda to get from a type constructor of kind * -> * to monad instead. and then people start throwing around names like operational or 'freer'
<koz_>	(reflection without remorse?)
<edwardk>	thats it
*	uglyfigurine has quit (Ping timeout: 240 seconds)
*	emilypi (~emilypi@pool-100-33-104-88.nycmny.fios.verizon.net) has joined
*	silverjam has quit (Remote host closed the connection)
<edwardk>	freer = reflection without remorse based free on top of coyoneda of f
<koz_>	edwardk: Ah, OK. So basically, it's OK asymptotically, but in practice those constants bite?
<koz_>	(and I assume it's the FTCQueue they're using that gives those constants?)
*	Axman6 has quit (Ping timeout: 240 seconds)
<edwardk>	now, for effect systems there comes a hurdle that every effect system gets caught up on the horns of a dilemma. (trilemma? quadlemma?) they have to give up something and they all basically fall into one of 4 bins in my experience.
<edwardk>	well once you bake in the assumption that you're using the free monad to talk about an effect system you get some other problems
*	hanslo-Withams (~hanslo-W@pool-100-38-74-239.nycmny.fios.verizon.net) has joined
*	Axman6 (~Axman6@pdpc/supporter/student/Axman6) has joined
<edwardk>	oleg's first stab at doing effect system stuff was based on more or less a codensity of free of a data types a la carte set of base effect functors.
*	Welkin (~Welkin@107-147-90-29.res.bhn.net) has joined
<edwardk>	later he replaced the codensity of free part with reflection without remorse and hit everything with coyoneda. (not that he tends to talk about codensity/coyoneda)
*	pparkkin (~pparkkin@203.143.158.140) has joined
<koz_>	Yeah - he never mentions either of those anywhere I've seen.
<edwardk>	but the thing with codensity (free f) is that its bigger than free f. so its capable of handling "effects" such as Cont.
<edwardk>	unfortunately once you're big enough to handle Cont you are big enough that you can't compose your "handlers" and preserve laws.
<Welkin>	oh hi edwardk 
*	pera (~pera@unaffiliated/pera) has joined
<Welkin>	I was just learning about Free and Cont
<edwardk>	combining the handlers for Cont and the laws for monad writer doesn't work in one direction. "handling" Cont silently breaks your use of Writer!
*	uglyfigurine (~uglyfigur@73.110.34.152) has joined
<Welkin>	and wanted something about Cofree and Comonad (and Yoneda/Coyoneda). Any suggested papers/essays/talks?
<edwardk>	this is a sign that there is something rotten in the state of denmark
*	rickerbh (~rickerbh@1.129.96.174) has joined
*	YellowOnion (~dddddd@118-93-169-185.dsl.dyn.ihug.co.nz) has joined
<Welkin>	I started reading gabriel's blog post on comonads which looks good
<edwardk>	if you start with the Codensity (Free f) approach you have a problem. Codensity (Reader e) a is isomorphic to State e a! It is too big an effect. if you replace the codensity bits with a right kan extension of some response type along some request type you can 'shrink' the effect system down enough that it can handle reader, but now binding it becomes a chore
*	epoitras has quit (Quit: Leaving)
*	tommd has quit (Ping timeout: 246 seconds)
<edwardk>	welkin: the old sorta nonsensical comonads are objects post?
*	orcus has quit (Ping timeout: 246 seconds)
<orion>	edwardk: What's the takeaway?
<Welkin>	edwardk: yes
<koz_>	The takeaway is that while extensible effects look nice, they're hiding some sins that they aren't escapign from/.
*	orcus (~orcus@unaffiliated/orcus) has joined
<koz_>	I believe Edward did a talk about lenses + monad transformers which elaborated on the very same topic Edward is expounding on now.
<koz_>	(that was some time last year I think?)
<orion>	https://www.youtube.com/watch?v=Bxcz23GOJqc -- this?
*	uglyfigurine has quit (Ping timeout: 264 seconds)
<koz_>	orion: Yeah, that one.
*	joomy has quit (Quit: joomy)
<orion>	Thanks for the tip. I'm watching now.
<koz_>	orion: I might be wholly off-base here.
<koz_>	That's just me trying to relate various bits of Edward wisdom to each other while heavily caffeinated.
<edwardk>	orion: you have pick your poison if you want an effect system: either you can't have Cont, or your "handlers" don't compose, almost everybody who does share a request/response type is too big to handle 'reader' properly, every 'free' based solution is based on a request/response model that fundamentally can't handle lazy state or lazy writer, or you're basically using the mtl and have to write the n^2 instances. oh, and then you get
<edwardk>	languages that build their entire effect system on the naive encoding (*cough* idris) because it can be given types in their type system so that left associated binds mean that performing long chains of IO can incur a quadratic cost.
*	Disconnected ()
**** ENDING LOGGING AT Wed Aug 16 18:53:37 2017

**** BEGIN LOGGING AT Wed Aug 16 19:06:38 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<koz_>	(modulo the Bikleisli thing, as per edwardk's comment)
<Welkin>	thanks, I think I found it
<edwardk>	another fun starting point is just asking yourself. how do i define the instances for (,) e    or for data Store s a = Store (s -> a) s
<Cale>	Did everyone see my printf thing? :)
<edwardk>	writing the instances is fun
<Welkin>	Cale: nope
*	rickerbh has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<koz_>	edwardk: I need a motivation for Store - I'm still a bit unclear what to use it for or with.
<Cale>	https://hackage.haskell.org/package/category-printf
<edwardk>	instance Monoid e => Comonad ((->) e) -- is also fun
<edwardk>	koz_: kenny's talk is all about spreadsheets and stuff, right?
<koz_>	edwardk: It mentions them, yes; right now I'm on the 'function swapper thing' and he's laying out why Traversable and infinite streams don't mix.
<edwardk>	Store (Int, Int) a -- is a 2d sheet of 'a's with a cursor on it
<koz_>	OOOOOOOOOOH.
*	rickerbh (~rickerbh@1.129.96.174) has joined
<koz_>	The penny just dropped hard.
*	_asc has quit (Ping timeout: 264 seconds)
*	rickerbh has quit (Client Quit)
<edwardk>	Store Integer a  -- is a 1 dimensional array stretching out to infinity in either direction with a cursor that lets you know where you are on it.
<koz_>	edwardk: So a Turing tape?
<edwardk>	Now you can define a function like blur :: Store Integer a -> a; blur (Store f s) = (f (s - 1) + f (s + 1)) / 2
<edwardk>	then extend blur will 'blur' the contents of the whole 'sheet' by averaging your neighbors and give you a new 'sheet' by applying that function virtually to all of the positions.
<Cale>	I was watching a talk by Dan Patterson at the NY Haskell Meetup at one point, and he was talking about a sort of continuation-passing-style sort of way to handle printf (and it was really unfortunate that his slides were broken, and I think most of the room was tuned out)
*	banc (~master@217.151.98.168) has joined
*	mnoonan_ (~mnoonan@cpe-69-201-46-148.twcny.res.rr.com) has joined
*	MichaelBurge has quit (Remote host closed the connection)
<edwardk>	data Stream a = a :- Stream a; data Tape a = Tape (Stream a) a (Stream a) acts similarly. you can make a comonad for Tape, it is tricky
<koz_>	edwardk: Kenny showed that, and it seemed quite straightforward.
*	jfischoff (~jonathanf@pool-74-101-197-223.nycmny.fios.verizon.net) has joined
*	thc202 has quit (Ping timeout: 240 seconds)
<Welkin>	oh haha, I watched Kenny's talk a few days ago
<edwardk>	data Pointer i a = Pointer (Array i a) i -- acts the same sort of way as data Zipper a = Zipper [a] a [a] when i is Int or something
*	MichaelBurge (~quassel@2603:3004:620:5c00:f460:3c5d:163:a424) has joined
<edwardk>	all of these are 'store-like'
<Welkin>	I didn't understand it all
<Cale>	But I noticed that he was defining this composition operator of type (String -> b -> c) -> (String -> a -> b) -> (String -> a -> c) for composing these "CPS format specifier things", and I thought "I bet that's just the composition for an already-existing category", and thought about it a bit.
<koz_>	edwardk: I assume 'Store' is more general?
*	uglyfigurine (~uglyfigur@73.110.34.152) has joined
<koz_>	Welkin: I'm pleased to say the talk is making sense, aside from Edward's categorical interjections. :P
<edwardk>	data Fold a b where Fold :: (r -> b) -> (r -> a -> r) -> r -> Fold a b -- is also a comonad
<edwardk>	extract (Fold k _ z) = k z; duplicate (Fold k f z) = Fold (Fold k f) f z; 
*	xcmw has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<edwardk>	store is also related to lenses. lenses are 'store comonad coalgebras'
<koz_>	edwardk: I *kinda* see that intuitively.
<edwardk>	f :: s -> Store a s -- such that f is a store comonad coalgebra is a lens.
<Cale>	So turns out it's the composition for the co-Kleisli category for the comonad of functions out of a fixed monoid (in our case, String)
<edwardk>	why? lets look at store a bit
<edwardk>	(s -> a, s)
<edwardk>	so lets go back tot he common sense definition of a lens  data Lens s a = Lens { get :: s -> a, set :: s -> a -> s } 
<edwardk>	then factor those two functions (s -> a,  s -> a -> s) because they have a common prefix
<edwardk>	s -> (a, a -> s)
<edwardk>	and alpha rename to get the store above.
<koz_>	Damn, that's slick.
<edwardk>	in the van laarhoven representation, we usually pick two comonads, Identity and Const to read off the parts
<edwardk>	type Lens s t a b = forall f. Functor f => (a -> f b) -> s -> f t 
<edwardk>	pick f = Const a, then  Const :: a -> Const a b can be passed as an argument
*	uglyfigurine has quit (Ping timeout: 240 seconds)
<edwardk>	to get s -> Const a t
<edwardk>	then remove the Const wrapper and you get 'get :: s -> a'
<edwardk>	pick f = Identity and you can 'map' over a lens.
*	hexadecimal-1540 (~hexadecim@2601:282:a03:f1f0:5d25:c1be:4fa0:5511) has joined
<edwardk>	(a -> Identity b) -> s -> Identity t -- squint and you can remove the Identity newtypes and see it as (a -> b) -> s -> t
<edwardk>	then just pass it a constant function to get the   s -> b -> t   function that is 'set' in its full generality
*	gpbaran (~gpbaran@c-24-12-186-105.hsd1.il.comcast.net) has joined
<crucify_me>	hi re: the typeclass def 'class (Real a , Enum a) => Integral a where     a textbook says this " In a very real sense the tuple syntax here denotes the conjunction of typeclass constraints on your type variables. the idea of constraints has been covered for a while, but I feel I'm missing something from the way that is written.
<edwardk>	alternately you can do both of these in one pass by fixing f = Store a
<koz_>	edwardk: Consider myself sufficiently motivated with regard to Store. Thank you! :)
<crucify_me>	sorry if I may repost that ...
<edwardk>	koz_: as a fun exercise you can convert the definition of van laarhoven lenses into a viable definition for a 'store' comonad as well
<edwardk>	flip the definition of your lens
<Cale>	crucify_me: The wording of that sense is a bit strange, but it's not wrong. There's not much to miss.
<Cale>	oops
*	marvin2 has quit (Quit: quit)
<Cale>	sentence*
<edwardk>	forall f. Functor f => (a -> f a) -> s -> f s -- i'll fix a = b, s = t while i'm at it
<Welkin>	crucify_me: it looks like it may be referring to the fact that the constraints are a product (AND) instead of a sum (OR)
<edwardk>	to get s -> (a -> f a) -> f s
<edwardk>	then pull the forall f. Functor f =>    across tot he right hand side
*	tlaxkit has quit (Quit: Saliendo...)
*	nomicflux (~nomicflux@cpe-174-103-183-220.wi.res.rr.com) has joined
<edwardk>	s -> forall f. Functor f => (a -> f a) -> f s
<edwardk>	ball up the right hand side with a newtype
*	Costar (~Costar@179.215.124.226) has joined
<Cale>	crucify_me: If you're implementation-minded, you can regard the type class constraints as referring to records of methods of the type class operations which are going to arrive as a secret additional parameter to your function.
<Cale>	crucify_me: and then the tupling is really just tupling those records together (perhaps)
<edwardk>	newtype Context a s = Context { runContext :: forall f. Functor f => (a -> f a) -> f s }        and a Lens' s a is a 'Context comonad coalgebra' -- and you can show it is a comonad, etc. and can do the same things as store!
<dsal>	What does '\FS' mean?  (character literal)
<koz_>	edwardk: I can see why you're so excited by comonads.
<edwardk>	its worth converting back and forth from Context <-> Store to get used to the two encodings
<Cale>	> fromEnum '\FS'
<lambdabot>	 28
<koz_>	Hearing (reading?) you talk about them now, I'm excited about them too.
<edwardk>	replace Functor with Applicative in the above definition and you get the notion of 'Bazaar' from lens.
<crucify_me>	Cale Welkin thanks, please let me digest that...
*	algebra (~amarpotgh@p57967E10.dip0.t-ipconnect.de) has joined
<glguy>	dsal: FS means "file separator"
<edwardk>	which is used to characterize a traversal without introducing extra _|_'s unlike the "FunList" encoding will
<glguy>	http://www.theasciicode.com.ar/ascii-control-characters/file-separator-ascii-code-28.html
<dsal>	Oh, yeah.  I just looked it up in man ascii
*	mizu_no_oto has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<edwardk>	(infinite) moore machines are comonads, data Moore a b = Moore b (a -> Moore a b) -- but that is actually the same as the Fold definition I gave! (just less efficient)
<edwardk>	koz_: https://www.schoolofhaskell.com/user/edwardk/cellular-automata <- did you see this series?
*	jfischoff has quit (Quit: jfischoff)
<edwardk>	i seem to keep referencing it on here lately
*	xcmw (~textual@2605:a000:132b:20d8:40e4:ac62:d7d2:e76e) has joined
<koz_>	edwardk: No, I haven't. Time to append to my reading list again!
*	mizu_no_oto (~textual@c-24-60-15-130.hsd1.ma.comcast.net) has joined
<Welkin>	didn't jle` write a series on Auto?
<Welkin>	is that the same thing? (I think this was based on Arrow)
<edwardk>	https://www.schoolofhaskell.com/user/edwardk/parallel-crc builds on the second part. https://www.schoolofhaskell.com/user/edwardk/conquering-folds builds further on the approach talked about there to tackle the third homomorphism theorem
*	uglyfigurine (~uglyfigur@73.110.34.152) has joined
<crucify_me>	going to arrive as a secret additional parameter to your function ? so you mean that, in this case a product is calculated from the two tuple values, which adds functionality ?
<Cale>	crucify_me: Or it could just be multiple arguments
<Welkin>	crucify_me: from your example, it means that `a` must be an instance of both Real AND Enum, not just one or the other
*	algebra has quit (Ping timeout: 260 seconds)
*	erisco (~erisco@198-84-159-71.cpe.teksavvy.com) has joined
<Cale>	and the way the compiler's going to deal with that is by passing along a couple of records: one containing the operations for the Real type class (for a), and the other containing the operations for Enum (for a)
<Welkin>	erisco: did anyone use your package yet?
*	tommd (~tommd@75-164-224-54.ptld.qwest.net) has joined
<Cale>	Welkin: which package?
<Welkin>	Cale: lol :D
<erisco>	14 downloads, so maybe
<Welkin>	http://hackage.haskell.org/package/control-dotdotdot
<Cale>	oh no...
<Cale>	hahaha
*	Wizek_ has quit (Ping timeout: 240 seconds)
<Cale>	This should be Acme.DotDotDot
*	dec0n has quit (Ping timeout: 246 seconds)
<erisco>	yeah but I can actually see myself using it in the right situation :P
*	uglyfigurine has quit (Ping timeout: 246 seconds)
*	path[l] has quit (Ping timeout: 248 seconds)
<crucify_me>	Cale so do both Real and Enum have numeric / algebraic values there, that are multiplied and / or used on arguments 
<crucify_me>	?
<Cale>	crucify_me: Multiplied?
*	dec0n (~dec0n@draugas.gis-centras.lt) has joined
<Cale>	crucify_me: The sense of the word "product" is that of "Cartesian product" 
<Cale>	i.e. if A and B are sets, then A × B is the set of all pairs (a,b) with a in A and b in B.
*	chocopuff (~chocopuff@unaffiliated/chocopuff) has joined
*	mmhat has quit (Quit: WeeChat 1.9)
<Cale>	Note that if A and B happen to be finite sets, then if A has n elements and B has m elements, A × B will have n*m elements, hence the name "product"
<jchia>	Question about containers package. Since 1. there is Enum instance for Int, 2. there is toEnum & fromEnum to freely convert between Int & Enum, 3. Enum is more general than Int, why don't they define EnumMap instead of IntMap to serve more use cases? Functions that depend on the numeric properties (like the Ordered instance) like lookupLT & lookupGT can have an Ordered constraint.
<koz_>	jchia: Implementation-specific stuff for Ints.
<koz_>	Basically, IntMap is done in a way that only makes sense on Ints.
<Cale>	koz_: jchia is asking why not use the Enum operations to automatically convert back and forth from Int
<jchia>	koz_: For example? It seems that under the hood, an Enum can be treated as an Int.
*	chao-tic (~chao@218.101.54.122) has joined
<koz_>	jchia: I guess you're right.
<koz_>	Spoke too soon, it would appear. :P
*	kvda has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<Cale>	This would work, but unfortunately, failure to specialise might result in everything being a whole lot slower even in cases where the type of index actually is Int
*	jmcarthur (~jmcarthur@2601:86:100:1620:11f3:5a14:fc98:ceb1) has joined
<Cale>	But EnumMap could easily be provided anyway
*	jfischoff (~jonathanf@pool-74-101-197-223.nycmny.fios.verizon.net) has joined
<koz_>	Cale: Someone should.
<Cale>	I bet it's on Hackage already
<Cale>	http://hackage.haskell.org/package/EnumMap yep
<jchia>	I suppose if the Enum's toEnum & fromEnum are expensive, then an EnumMap implementation that effectively wraps around the IntMap implementation using toEnum & fromEnum would have poor performance, but it doesn't hurt the Int case.
<crucify_me>	Cale thank you, so we are dealing with a finite set since enumerable is finite..
<Cale>	jchia: You could have polymorphic code which defers the decision about which instance gets used, and that might result in failure to inline and then unbox the eventual Int arguments...
*	silverjam (~Mutter@c-24-4-236-171.hsd1.ca.comcast.net) has joined
<jchia>	Cale: Yeah, but I wonder why it's not in container, which is more commonly used.
*	YellowOnion has quit (Read error: Connection reset by peer)
*	jfischoff has quit (Client Quit)
<jchia>	Cale: Do you mean that that EnumMap may suffer from failure-to-optimize problems that IntMap wouldn't?
<Cale>	jchia: Actually, we've been struggling with that kind of thing a whole lot in one of our projects where I work, and we've got some benchmarks where if Monad instances fail to be specialised, code runs 60x slower.
*	pparkkin has quit (Read error: Connection reset by peer)
*	kvda (~kvda@unaffiliated/kvda) has joined
<crucify_me>	sorry no reals are infinite
*	kvda has quit (Client Quit)
<Cale>	crucify_me: Well, you're talking about the type of all implementations of the Real typeclass operations
<Cale>	(Real is poorly named, it's really for types which can be converted to Rational numbers)
<Cale>	(i.e. most approximate numeric types which aren't complex)
*	silverjam has quit (Client Quit)
<Cale>	(but ironically, not actual computable real types)
*	jfischoff (~jonathanf@pool-74-101-197-223.nycmny.fios.verizon.net) has joined
*	shafox (~textual@106.51.130.198) has joined
<Cale>	:t toRational
<lambdabot>	Real a => a -> Rational
*	Zenghui (~Zenghui@104.207.155.180) has joined
*	kvda (~kvda@unaffiliated/kvda) has joined
*	toblorone (~toblorone@mail.puretechit.com) has joined
<Cale>	class (Num a, Ord a) => Real a where toRational :: a -> Rational
<Cale>	So you can imagine that the compiler is going to implement this type class with a record type like:
<xa0>	@pl \x -> a (b $ c x)
<lambdabot>	a . b . c
*	harfangk (~quassel@222.110.160.66) has joined
*	kvda has quit (Client Quit)
<Cale>	data RealD a = RealD { toRational :: a -> Rational, numDict :: NumD a, ordDict :: OrdD a }
<crucify_me>	Cale can't really follow but really appreciate your efforts..
<Cale>	and then whenever your definition has a constraint like  Real a => ...
*	jmcarthur has quit (Ping timeout: 246 seconds)
<Cale>	that gets compiled into a function parameter like
<Cale>	RealD a -> ...
<Cale>	and wherever you might use toRational, it extracts the corresponding field of the record that was passed in to obtain the operation
*	sellout- has quit (Quit: Leaving.)
<Cale>	(and if you use Ord or Num operations, it can unpack those as well)
*	pavonia (~user@unaffiliated/siracusa) has joined
*	pfurla has quit (Quit: Textual IRC Client: www.textualapp.com)
*	xcmw has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<crucify_me>	so in layman's terms, when you have a product type (indicated by the tuple construction) you generate values through multiplication that are used by haskell to calculate / evaluate more efficiently, for example?
*	pfurla (~textual@ool-182ed51a.dyn.optonline.net) has joined
<crucify_me>	Cale
<xa0>	@pl \x -> map (a . map $ flip c x) d
<lambdabot>	flip map d . a . map . flip c
<Cale>	It's not numerical multiplication
<Cale>	It's only an abstract sort of "multiplication" of types
<crucify_me>	Cale, dang ,can't wait to understand it. thanks!!
<Cale>	Where the product of two types A and B is the type of pairs (a,b) where a has type A, and b has type B
<Cale>	That's all it means
<erisco>	count the inhabitants
*	s3mi0 has quit ()
*	louispan (~textual@203.38.203.134) has joined
*	jathan (~jathan@189.216.181.191) has joined
*	lambduh has quit (Ping timeout: 260 seconds)
*	justanotheruser (~justanoth@unaffiliated/justanotheruser) has joined
<crucify_me>	so its a third type that is generated, that has a sort of signature that is used by the interpreter/ compiler 
*	jathan has quit (Remote host closed the connection)
*	mizu_no_oto has quit (Quit: Computer has gone to sleep.)
*	crobbins has quit (Remote host closed the connection)
<Cale>	Yeah, maybe we're talking about too many things at once here. I was talking about the implementation of type classes, but you can also just talk about product or tuple types of ordinary types separately.
*	ldd001 has quit ()
*	jathan (~jathan@189.216.181.191) has joined
<Cale>	So if we have data Colour = White | Black and data Piece = Pawn | Knight | Bishop | Rook | Queen | King
<Cale>	Then the type which in Haskell we'd write as (Colour, Piece)
*	shafox has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<Cale>	Or more generally, might be written Colour × Piece
*	uglyfigurine (~uglyfigur@73.110.34.152) has joined
*	ackpacket (~ackpacket@unaffiliated/ackpacket) has joined
<Cale>	will consist of the pairs (c,p) where c :: Colour and p :: Piece
*	justanotheruser has quit (Client Quit)
<Cale>	e.g. (Black, Knight)
*	jathan has quit (Client Quit)
<Cale>	Colour has two (defined) elements, and Piece has 6
*	justanotheruser (~justanoth@unaffiliated/justanotheruser) has joined
<crucify_me>	Cale thanks so much . getting kicked out of cafe. more drama later. pax
<Cale>	Notice that (Colour, Piece) has 12
<Cale>	= 2 * 6
*	renzhi has quit (Quit: WeeChat 1.9)
<Cale>	see you!
*	joe9_ has quit (Remote host closed the connection)
<crucify_me>	got that 6 pieces. thanks again
*	jathan (~jathan@189.216.181.191) has joined
*	justan0theruser has quit (Ping timeout: 264 seconds)
*	joe9 (~user@ip72-200-72-19.tc.ph.cox.net) has joined
Python interface unloaded
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Wed Aug 16 19:56:47 2017

**** BEGIN LOGGING AT Thu Aug 17 19:24:47 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:46:51 2017)
*	Channel #haskell url: http://www.haskell.org/
*	SkyPatrol_ has quit (Ping timeout: 240 seconds)
*	emilypi (~emilypi@pool-100-33-104-88.nycmny.fios.verizon.net) has joined
*	alasi (uid197723@gateway/web/irccloud.com/x-avkjozqdmsgzibys) has joined
<crucify_me>	https://ptpb.pw/Hh3K  hi this won't work. I'm getting error : No explicit implementation for either ‘Prelude.compare’ or ‘<=’   .. anything wrong? it's precisely the book's example
*	MoarSpaceFi (~Forgot_my@65.126.126.193) has joined
<pacak>	crucify_me: move compare to the right
*	Jonno_FTW (~come@zion.sx) has joined
<glguy>	crucify_me: same problem as your previous (==) implementation
<pacak>	crucify_me: That is if we are talking about syntax. Other than that - this instance is wrong in some other ways. You won't be able to use type as a key in a Map.
*	rblaze (~blaze@209.6.152.108) has joined
<crucify_me>	glguy, pacak sorry not following. its a book example to the T
<pacak>	crucify_me: https://pics.me.me/impossibru-16341104.png
<glguy>	crucify_me: It doesn't matter what's in the book, pacak told you how to fix it
<penteract>	they mean indent it
<crucify_me>	penteract dang thanks ALL -- stupid of me. pacak other problems. ?
<pacak>	crucify_me: Haskell is somewhat indentation sensitive.
*	rblaze has quit (Client Quit)
<pacak>	crucify_me: It claims that Tue `compare` Wed = EQ
*	rblaze (~blaze@209.6.152.108) has joined
*	juhp (~juhp@redhat/juhp) has joined
<pacak>	And a bunch of other combinations.
<pacak>	Eq and Ord instances disagree on that in fact.
*	dec0n (~dec0n@draugas.gis-centras.lt) has joined
*	fiyahbun (~kalypzo@c-73-85-160-4.hsd1.fl.comcast.net) has joined
<crucify_me>	sorry gl*guy referred to earlier confusion I had with indents. I couldn't glean that from our conversation, yeah pacak I foresaw that, the example is trying to show that Friday is the "best" day. but that last compare is confusing
<pacak>	Friday is the best day? What kind of herecy is it????
<pacak>	I'd go with Saturday
<crucify_me>	heresy ! I like tuesday since no tourists are around
<pacak>	If you want to put it first in sorting order - reorder constructors
*	fiyahbun (~kalypzo@c-73-85-160-4.hsd1.fl.comcast.net) has left ("WeeChat 1.9")
<pacak>	Those basic instances are used in many places and it's nice to have them correct.
<crucify_me>	pacak but isn't that last entry illogical for the purpose of the prog?
*	rickerbh (~rickerbh@1.129.97.193) has joined
<pacak>	Last entry is wrong
<penteract>	The code will run, but you better not try to sort a list of them.
*	remexre_ (~remexre@c-107-4-203-126.hsd1.mn.comcast.net) has joined
*	theelous3 has quit (Ping timeout: 240 seconds)
<crucify_me>	oh, but it goes on to say that all other comparisons are equal, since Friday alone is the 'best' day
<crucify_me>	so its just clever to put that there
*	remexre has quit (Ping timeout: 260 seconds)
<penteract>	but the automatically derived instance for Eq contradicts that
<pacak>	Put them in Map as keys and will be surprised.
*	mayhew has quit (Remote host closed the connection)
<pacak>	Words are hard.
<penteract>	so if code uses (==), it will think they're different
*	Rodya_ (~Rodya_@2601:46:4001:e0b4:415:82be:b2de:25c7) has joined
<crucify_me>	penteract, re: that, why won't this work if Ord is added to the data declaration in the parens .. such as ...
<crucify_me>	ie in the previous example..
<crucify_me>	we have deriving (Eq, Ord, Show)
<pacak>	crucify_me: How about data DayOfWeek = Friday | InferiourDays InferiourDay ; data InferiourDay = Mon | Tue ...
*	remexre_ is now known as remexre
<penteract>	Tf you derive Ord like that, you can't redefine it later.
<crucify_me>	this is encapsulated in a where statement, so at least it makes some sense to this beginner
<crucify_me>	so thanks kindly everyone
*	juhp has quit (Quit: juhp)
*	fcpga_te (~fcpga_te@203-174-128-178.syd.static-ipl.aapt.com.au) has joined
*	rickerbh has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	beekill has quit (Remote host closed the connection)
*	halogenandtoast has quit (Ping timeout: 240 seconds)
*	pavonia (~user@unaffiliated/siracusa) has joined
*	minn (~dportin@pool-71-163-97-83.washdc.fios.verizon.net) has joined
*	juhp (~juhp@redhat/juhp) has joined
<remexre>	Is there a way to get stack to create an executable in the working directory?
*	nomicflux (~nomicflux@cpe-174-103-183-220.wi.res.rr.com) has joined
*	rickerbh (~rickerbh@1.129.97.193) has joined
<penteract>	I've created symlinks.
<remexre>	In what manner?
**** ENDING LOGGING AT Thu Aug 17 19:52:43 2017

**** BEGIN LOGGING AT Sun Aug 20 11:13:45 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<srhb>	mustafa_: I think you should probably consider doing a better benchmark. Are you sending the same headers etc.
<srhb>	mustafa_: Testing out on a 100MB binary (already compressed) file from elsewhere, I can detect no noticeable difference between wreq and curl.
*	epsilonhalbe (~epsilonha@84-113-106-42.cable.dynamic.surfer.at) has left
<srhb>	mustafa_: My guess is you're measuring different things.
*	kadoban (~mud@unaffiliated/kadoban) has joined
*	eacameron has quit (Ping timeout: 240 seconds)
<mustafa_>	srhb, this difference only relevant with the given url, for example both of them gives close result what I try with https://google.com, https://twitter.com 
<mustafa_>	shrb, please look at the comments
*	zero_byte (~zer0@cst-prg-236-254.cust.vodafone.cz) has joined
*	teggi has quit (Quit: Leaving...)
*	atec (~Mutter@pool-71-162-215-141.phlapa.fios.verizon.net) has joined
<srhb>	mustafa_: Yes, I've seen the comments.
*	merijn (~merijn@a212-238-239-156.adsl.xs4all.nl) has joined
*	atec has quit (Client Quit)
*	nomicflux (~nomicflux@cpe-174-103-183-220.wi.res.rr.com) has joined
<mustafa_>	srhb, erisco, I'm going to try another library
<mustafa_>	srhb, erisco, I tried with http-conduit package, nothing changed.
*	toblorone (~toblorone@142-254-30-254.dsl.dynamic.fusionbroadband.com) has joined
*	toblorone has quit (Remote host closed the connection)
*	toblorone (~toblorone@142-254-30-254.dsl.dynamic.fusionbroadband.com) has joined
<srhb>	mustafa_: You could try dumping the TCP data and try to figure out if the http communication is actually identical in both cases.
<erisco>	well cool, then either they are mutually using the same dependency that is messed up or it is something other than libraries (likely)
*	Jeanne-Kamikaze (~Jeanne-Ka@2601:647:4300:f30f:8ceb:21ee:64e3:e4d6) has joined
*	xcmw (~textual@2605:a000:132b:20d8:b0ce:4ca2:ab2e:1bee) has joined
<Zemyla>	So how do I introduce changes to base?
<erisco>	connections
<mustafa_>	srhb, I'll try tcp dump
<srhb>	mustafa_: Good idea. Unfortunately I can't check since I appear to be blocked from the site.
<platz>	Is it possible to give a data declaration with no type parameters a kind other than *? e.g. something like "data K; data M :: K"
<[exa]>	erisco, mustafa_, you were talking about some paper that flattens the transformer-induced stacks of effect systems, could you please share a link? I can't find it in scrollback :(
<platz>	ghc says "Kind signature on data type declaration has non-* return kind"
*	toblorone has quit (Ping timeout: 240 seconds)
<erisco>	[exa], do you use DDG?
<lyxia>	Zemyla: ask on the libraries ML
<[exa]>	nope, I just like the general idea of that.
*	toblorone (~toblorone@142-254-30-254.dsl.dynamic.fusionbroadband.com) has joined
<[exa]>	(what's DDG acronym anyway?)
<erisco>	platz, if you want to have a custom kind then use DataKinds
*	albertus1 has quit (Ping timeout: 240 seconds)
<erisco>	[exa], DuckDuckGo, the search engine that doesn't track you (they promise)
*	shafox has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<[exa]>	yeah, how do you know? :D
<SansFr[m]>	also ddg is not really good
<platz>	erisco: the error seems to occurs even with DatKinds?
<erisco>	DDG does fine for me, and if I don't get what I want then Google is just a bang pattern ;)
<hpc>	i tend to use bang patterns first
<SansFr[m]>	I found myself using !g all the time
<hpc>	ddg is great as a search engine consolidator
<SansFr[m]>	and then switched to searx
<erisco>	platz, because that notation is not what DataKinds supports. With DataKinds you write an ordinary data type and then it will promote it to the type level.
<SansFr[m]>	searx.me
<hexagoxel>	cocreature: only the "boring" version makes sense for `rewrite`, i am mildly certain now: (Exp2 a a -> Maybe (Exp2 a a)) -> Exp2 a a -> Exp2 a a
<hpc>	before i resort to !g, i will use !a or !hoogle or whatever
<erisco>	[exa], anyways here it is http://cseweb.ucsd.edu/~rtate/effectstr.pdf
<[exa]>	thanks :]
<erisco>	the paper is not explicitly on flattening monad transformer stacks but I think the application to that is clear
<hexagoxel>	if the transformation function is supposed to be applicable multiple times, so other approaches don't work out too well.
*	werner291 (~werner@ip-213-49-58-10.dsl.scarlet.be) has joined
*	mustafa_ has quit (Quit: Page closed)
<platz>	erisco: I understand with DataKinds "data K" promotes K to the type level.  then i want to say that "data M" has kind "K"
<platz>	instead of kind "*"
<erisco>	platz, the type constructor becomes a kind constructor and the data constructors become type constructors. That is how the promotion works.
<monochrom>	platz, promotes K to the kind level.
*	argent0 has quit (Ping timeout: 248 seconds)
<monochrom>	Next, you should start with "data K = M". Then you have type M of kind K.
<[exa]>	erisco: it's very related to my problem here, contains a lot of naming I'd otherwise need to reinvent badly.
*	Wizek has quit (Quit: Connection closed for inactivity)
*	simukis has quit (Read error: Connection reset by peer)
<erisco>	[exa], what problem is that? I was reading it because I wanted some idea where language research is at
<remexre>	I'm trying to "lift" an (ExceptT Error IO Foo) to a (ExceptT Error (StateT Bar IO) Baz); I've tried lift, fmap lift, and fmap return, and still nothing; is there a standard idiom I'm missing here?
*	mustafa_ (b0580d9e@gateway/web/freenode/ip.176.88.13.158) has joined
<monochrom>	It is also the only way to declare types to be of your kind.
*	simukis (~simukis_@78-60-58-6.static.zebra.lt) has joined
*	Deide (~Deide@94.12.221.62) has joined
<erisco>	and it caught my eye because a lot of papers are talking about effect systems, and this paper purports to give a semantics, great
<[exa]>	erisco: trying to destroy the implicit GC for good :D
<erisco>	regions?
*	jellowj_ has quit (Ping timeout: 240 seconds)
<[exa]>	linearity, defunctionalization, some c++style wrapping of the painful parts
<mustafa_>	shrb, erisco, I tried tcpdump, and it only prints when I started to run executable, after a while tcpdump prints nothing, but program continues to work.
<erisco>	mustafa_, I can't help you debug SSL and HTTPS... I know a little about it but not enough
<mustafa_>	shrb, erisco, can it be related with encoding of the html page? it is utf-8 page and it has turkish characters....
<[exa]>	mustafa_: you might want to try ettercap, it can un-encrypt https if you provide keys
<[exa]>	(no idea whether it's still maintained though)
<erisco>	un-encrypt... if only there was a single word for that
<[exa]>	it's actually not decryption, just a weird hack
<mustafa_>	exa, I think it is not related with https, as I can see from the tcpdump it receives the data perfectly, but i think it is related with the content of the page
<[exa]>	it was an idea :]
<mustafa_>	do haskell have any problem with latin-extended characters?
*	ziocroc (~ziocroc@151.74.40.10) has joined
<erisco>	mustafa_, I can only see the encoding being relevant if it is being passed through a decoder, but if you're just saving it to file I don't see why that would be happening
<mustafa_>	erisco, hımmm yes you are right
<hpc>	mustafa_: as in latin-1 encoding, or unicode characters?
<erisco>	it comes in as ByteString and is written to file as a ByteString
<hpc>	oh, nvm
*	lkolstad has quit (Ping timeout: 240 seconds)
<monochrom>	Haskell does not have a problem. But your OS may.
*	albertus1 (~seb@x55b4d7dd.dyn.telefonica.de) has joined
<monochrom>	For example Windows console has an anti-Unicode default setting.
<naddeoa>	If I have a type class of Foo and  two instances of it, Bar and Baz, can I pass Bar and Baz in where a Foo is expected?
<naddeoa>	particularly in lists
*	gawen_ has quit (Remote host closed the connection)
<mustafa_>	erisco, I also tried with another turkish website, and I don't see this problem, it fetched the page under 200ms (real).
<[exa]>	naddeoa: "pass Bar in" is like "argument is of type in class Bar" or "function has Bar in type signature" ?
<mustafa_>	This very interesting, by the way thanks for the comments :)
*	Garreett (5ce8f14a@gateway/web/freenode/ip.92.232.241.74) has joined
*	merijn has quit (Ping timeout: 240 seconds)
<[exa]>	naddeoa: first one should work, second one will probably complain about "context too weak"
*	simukis_ (~simukis_@78-60-58-6.static.zebra.lt) has joined
<naddeoa>	Why doesn't this work "myShowable :: Show a => a
<naddeoa>	myShowable = "string""
<remexre>	naddeoa: that declares that myShowable is a member of *every* type that is Show
<remexre>	rather than *any* type that is Show
<[exa]>	the type signature is too general, it's actually monomorphic.
<monochrom>	Because I'm going to use myShowable as (myShowable :: Int) and you can't stop me.
*	simukis has quit (Ping timeout: 248 seconds)
<naddeoa>	because Int is showable
<monochrom>	The type variable means the user (me) choose. You, the author, does not choose.
<naddeoa>	what is the any syntax?
<monochrom>	There is no "any syntax".
<hpc>	just press the any key
<monochrom>	"any" is ambiguous.
*	arthurwong has quit (Remote host closed the connection)
<naddeoa>	What is the equivalent of an OOP language's interface types where subypes can be in collection of the interface type?
<monochrom>	"any" is ambiguous because it still doesn't say which side (the user? the author?) makes the choice, which is the whole point.
*	Icewing (~Icewing@unaffiliated/icewing) has joined
<[exa]>	naddeoa: can you provide c++/java equivalent of that idea?
<naddeoa>	Sure
<monochrom>	There is none.
<naddeoa>	So, I can't have a List of things that I can call showable on in Haskell for example?
<monochrom>	Right.
<naddeoa>	if all I care about is showing them?
*	tomphp (~tomphp@cpc73822-dals21-2-0-cust404.20-2.cable.virginm.net) has joined
<monochrom>	@quote monochrom river
<lambdabot>	monochrom says: You are to send a boolean, a character, and an integer across the river. The list for transporting across the river can hold 3 items, in fact any number of items you like, but they
<lambdabot>	must all be of the same type. On the bright side, after crossing the river, the boolean, the character, and the integer need only be put on show. How many trips do you need? Solution: one trip, [
<lambdabot>	show the_boolean, show the_character, show the_integer]
<naddeoa>	so then there is no type inheritance 
<monochrom>	Right. None.
<naddeoa>	interesting
<monochrom>	Haskell is not a subtyping language.
<naddeoa>	I guess somehow that's ok
*	grbtzl_ has quit (Ping timeout: 260 seconds)
*	zero_byte has quit (Ping timeout: 240 seconds)
<ignamv>	the objects are immutable so why delay showing them?
<monochrom>	Subtyping is clearly not the only solution to any of the world's software engineering problems.
*	kadoban has quit (Ping timeout: 246 seconds)
*	tholen (~mo@2001:5b0:50d9:88e8:7bbc:932e:3486:3cdf) has left
*	mustafa_ has quit (Quit: Page closed)
<naddeoa>	So, in cases where I want people to be able to make stuff and I provide functionality on that stuff, what would we do in haskell?
<naddeoa>	Tell them to remember to implement a class on that type?
<monochrom>	No. A record of values and functions.
<naddeoa>	Can you elaborate?
<Tuplanolla>	:t filter -- Like this, naddeoa.
<lambdabot>	(a -> Bool) -> [a] -> [a]
<erisco>	monochrom do you have a riddle saved for every dilemma?
<monochrom>	Not yet.
<naddeoa>	lol
<[exa]>	:]
<naddeoa>	Tuplanolla: you're saying just use the generic parameters?
*	hexadecimal-1541 (~hexadecim@2601:282:a03:f1f0:3830:48a0:cee6:54fa) has joined
<[exa]>	naddeoa: if I get you correctly, you want to write generic code that will work on other people's data structures?
*	hexadecimal-1540 (~hexadecim@2601:282:a03:f1f0:3830:48a0:cee6:54fa) has joined
<naddeoa>	right
<naddeoa>	well, not specifically, but it would mean that as well
<naddeoa>	basically, an OOP interface
*	shangxiao has quit (Ping timeout: 240 seconds)
<[exa]>	naddeoa: then either don't give type signatures (and your will be generic enough for free), or call the required property a class name and require that classes' members
<[exa]>	naddeoa: similar approach is e.g. "Foldable"
<[exa]>	(at least it has more useful examples than Show)
*	gawen (~gawen@movzbl.root.sx) has joined
<monochrom>	Maybe a class is good. It depends on what you mean by "make stuff" and "functionality on stuff". At this point it's all fluff, not stuff.
<monochrom>	The problem with how most people approach software engineering.
<Tuplanolla>	You might need a class, but often a function as an argument is enough, naddeoa.
*	lkolstad (~ljk@c-24-16-12-195.hsd1.wa.comcast.net) has joined
<[exa]>	naddeoa: btw I guess that by "OOP interface" you mean something like purely virtual class from C++?
*	tobloron_ (~toblorone@142-254-30-254.dsl.dynamic.fusionbroadband.com) has joined
<naddeoa>	Closer to Java
<[exa]>	so the concept "Objects of type X have this interface implemented"
<nshepperd>	oop is only necessary in languages that don't have first class functions
*	pavonia has quit (Quit: Bye!)
*	kirillow_ has quit (Ping timeout: 248 seconds)
<naddeoa>	It just says "this type has these things" and I can do this "List<Interface> bigList = sutypeAList ++ subtypeBList"
<naddeoa>	I'm thinking this is a side effect of my choice to use a type class instead of a big data
<Tuplanolla>	Contrast `HasInt s => s -> Result` with `(s -> Int) -> s -> Result`, naddeoa.
*	khatri (~khatri@106.51.39.217) has joined
*	hackagebot executor 0.0.2 – Shell helpers – https://hackage.haskell.org/package/executor
*	hackagebot currencies 0.1.1.0 – Currencies representation, pretty printing and conversion – https://hackage.haskell.org/package/currencies
*	tomphp has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<naddeoa>	lol I think that's above me Tuplanolla
*	toblorone has quit (Ping timeout: 240 seconds)
<[exa]>	naddeoa: well multi-type lists are doable with existential types AFAIK, but it's usually an overkill (observe that this is the reason for RTTI in otherwise pretty much purified C++)
*	tobloron_ has quit (Ping timeout: 240 seconds)
*	toblorone (~toblorone@142-254-30-254.dsl.dynamic.fusionbroadband.com) has joined
<[exa]>	the usual style is to name all the possibilities of the list contents as variants of a single datatype. Not very module-extensible, but usually brings some clarity to the code.
<naddeoa>	So I'll make a new 'data' for this purpose essentially
<nshepperd>	naddeoa: your function on the user's type can just accept extra arguments for all the "methods" that you need on that type
<naddeoa>	Haskell is pretty old and people don't seem to miss that ability. I'll have to just think about it differently I guess
<naddeoa>	It seems like all the pieces are there
*	toblorone has quit (Remote host closed the connection)
<remexre>	naddeoa: this might be helpful to read: https://two-wrongs.com/dynamic-dispatch-in-haskell-how-to-make-code-extendable
<monochrom>	No, OOP is older.
<naddeoa>	thanks I'll check that out
<[exa]>	naddeoa: also, functional trick is to use the functions. Do you know you caan transparently "save" any kind of information in interface functions?
*	vlatkoB_ has quit (Remote host closed the connection)
<naddeoa>	exe, can you go on?
<naddeoa>	remexre, that looks like exactly what I was doing
<remexre>	naddeoa: the third ("Dynamic Dispatch in Haskell") section?
<[exa]>	naddeoa: the funny example is something like this:  addToList l a = \s -> if s==a then True else l s  ;  emptyList = False ;  isInList l a = l a
*	M6dEEp (~deepies@ip68-227-98-157.ok.ok.cox.net) has joined
<naddeoa>	remexre just the setup so far, I haven't gotten to the solutions. I started with a big data, then moved to type classes and then ran into the issue he's talking gabout
<remexre>	Yeah, the third section basically describes the idiomatic solution
*	raynold (uid201163@gateway/web/irccloud.com/x-hozpaizcpgrtbkcn) has joined
<nshepperd>	naddeoa: in java you might do 'printAListOfThings(List<Showable>)', in haskell you might do 'printAListOfThings :: (a -> String) -> [a] -> IO ()'
<nshepperd>	or indeed 'Show a => [a] -> IO ()', or '[String] -> IO ()'
*	darlan (~darlan@191.191.127.66) has joined
<[exa]>	naddeoa: in other words, if the interface is the same and only the form of data differs, save the data in the interface and, instead of changing the data, modify the interface to reflect these changes
*	darlan has quit (Client Quit)
<nshepperd>	all that java interfaces do really is provide functions. you can just give those as arguments instead
<[exa]>	naddeoa: looks terribly wrong from java point of view, but it's surprisingly efficient in Haskell
*	takle_ has quit (Remote host closed the connection)
<naddeoa>	nshepperd, yeah that seems ok, but I was hoping to combine different collections of Show into a single one and then just run map on it
*	chaosmasttter (~chaosmast@p4FF1C1B0.dip0.t-ipconnect.de) has joined
*	Zialus has quit (Ping timeout: 240 seconds)
*	marvin2 (~m@cpe-188-129-117-22.dynamic.amis.hr) has joined
*	mk_modrzew (~Michal@83.220.118.66.umts.static.t-mobile.pl) has joined
<Logio>	naddeoa: only collections of a single concrete type are possible, so you'll need to apply show on the collections beforehand
*	Zialus (~RMF@174.203.60.94.rev.vodafone.pt) has joined
<Logio>	(or possibly something else that maps each collection to its')
<Logio>	*to a single type, I meant
*	lkolstad has quit (Ping timeout: 248 seconds)
<naddeoa>	So this must mean that when you make a type class you don't actually create a new type right
*	SpinTensor has quit (Quit: WeeChat 1.9)
<Logio>	correct
*	werner291 has quit (Ping timeout: 240 seconds)
<naddeoa>	Would that be bad?
<naddeoa>	Do people specifically not want Haskell to be able to do that/
<naddeoa>	(use type classes as types in and of themselves)
*	slacko_ (~davi@151.45.37.80) has joined
<tdammers>	how would that even work?
*	Camm (~camm@186.69.141.31) has joined
<erisco>	there is something called existential type classes where classes are types
<dolio>	Type classes aren't types.
<geekosaur>	typeclasses are not intended to be OOP types
<geekosaur>	@google making ad hoc polymorphism less ad hoc
<lambdabot>	https://people.csail.mit.edu/dnj/teaching/6898/papers/wadler88.pdf
<erisco>	which makes them like OO types
<geekosaur>	it's a way to constrain polymorphism
<nshepperd>	usually you do not actually need to put different types of object in the same list. Generally 'a list of what?' has a single answer once you think about it harder
<tdammers>	erisco: if you squint a lot
*	howdoi has quit (Quit: Connection closed for inactivity)
<tdammers>	nshepperd: that, or else you can reformulate the problem as 'what are you going to do with the things in the list?'
<erisco>	always wear your safety squints before looking at bad analogies
<naddeoa>	Well, if type classes made types then those questions wouldn't be hard to answer right? Its a type and the only functions that work on it are ones defined in the type class
<naddeoa>	Would it be any different from data types?
*	Big_G (~Big_G@75-165-48-101.tukw.qwest.net) has joined
*	MaxDeepfield (~MaxDeepfi@91.105.53.239) has joined
<nshepperd>	these questions aren't hard to answer, you just need to unlearn oop
<nshepperd>	type classes aren't types, they are predicates
*	xcmw has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<tdammers>	naddeoa: that's not even how types work, actual types that is, not the stuff they teach you in OOP
<nshepperd>	'type a is Showable' is a fact
*	M6dEEp has quit (Remote host closed the connection)
<Zemyla>	But yeah, I was thinking that there really should be a type constructor added to the internal P type in Text.ParserCombinators.ReadP.
*	Achylles (~Achylles@152.249.35.133) has joined
*	MaxDeepfield has quit (Remote host closed the connection)
<Zemyla>	It'd be data P a = ... {- stuff from before -} | Skip {-# UNPACK #-} !Int (P a).
*	M6dEEp (~deepies@ip68-227-98-157.ok.ok.cox.net) has joined
*	chaosmasttter has quit (Ping timeout: 240 seconds)
*	cerozool (~kafke@ip68-227-98-157.ok.ok.cox.net) has joined
*	Garreett has quit (Quit: Page closed)
*	slacko_ has quit (Ping timeout: 240 seconds)
*	gugah (~gugah@181.28.218.205) has joined
<erisco>	naddeoa, in OOP you can define functions which work on a class that are not methods of that class
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
<naddeoa>	right, because of inheritance
*	Gurkenglas_ (~Gurkengla@dslb-178-008-180-030.178.008.pools.vodafone-ip.de) has joined
<erisco>	no, because you can just define a function that has a parameter type of a particular class
*	kadoban (~mud@unaffiliated/kadoban) has joined
<erisco>	mind you instead of "function" they might call it "class method" or "static method" but it is close enough
<Zemyla>	And I think skipping that way is more efficient than doing Get repeatedly.
*	rrode has quit (Ping timeout: 240 seconds)
<nshepperd>	iirc rust has syntactic sugar for pretending that traits (the equivalent of type clases) are types. imo this is a bad feature that encourages the bad habit of not unlearning oop. and also makes accidental existentials too easy to write
<naddeoa>	oh you're talking about class methods erisco. In something like python it just passes the self variable to itself for you 
<erisco>	you do this all the time anyways... you have methods which have parameter types of classes other than the one the method belongs
*	tomphp (~tomphp@cpc73822-dals21-2-0-cust404.20-2.cable.virginm.net) has joined
<erisco>	in Python you can just define a function... doesn't have to be in a class
<erisco>	in Java and C# everything has to be stuck into a class, for some reason
*	cloudhead (~cloudhead@ip5f5bf105.dynamic.kabel-deutschland.de) has joined
*	lkolstad (~ljk@c-24-16-12-195.hsd1.wa.comcast.net) has joined
<erisco>	so you essentially have classes serving as no more than namespaces, but whatever
<tdammers>	erisco: the reason being that "OOP is good for you, you must use it at all times"
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Sun Aug 20 12:40:54 2017

**** BEGIN LOGGING AT Mon Aug 21 12:33:29 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	drewbert (~drewbert@24-113-123-50.wavecable.com) has joined
<erisco>	drop (toIntegral x) (cycle [minBound..maxBound])  maybe?  or  [x..maxBound] ++ cycle [minBound..maxBound]
*	wildsebastian has quit (Ping timeout: 248 seconds)
<cocreature>	manek: sounds like you might be better off with a full-blown dsl rather than an edsl
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
*	zariuq (~zar@0x3e2c8759.mobile.telia.dk) has joined
<erisco>	oh I am thinking "fromEnum" ... apparently they think you can't have an enum of more than 2^63-1 items or whatever it is
*	wespiser (~wespiser@50.226.42.194) has joined
<erisco>	the drop version sure don't work XD
<asthasr>	looks like [el .. maxBound] ++ cycle [minBound .. maxBound] :: [Type] will work
<mud>	Yeah, that one seems like the best version. I was thinking: dropWhile (/= whatever) (cycle [minBound .. maxBound]), but I'd be a little worried using that on like Int for example.
<mud>	In that it'll probably take forever for no reason unless GHC is magic
*	BernhardPosselt has quit (Quit: Leaving.)
*	iAmerikan (~dwshrewt@unaffiliated/iamerikan) has joined
*	cdg (~cdg@65.50.0.4) has joined
*	Thra11 has quit (Quit: IRC for Sailfish 0.9)
*	vikram__________ has quit (Ping timeout: 255 seconds)
*	trigone (5a78a2d7@gateway/web/freenode/ip.90.120.162.215) has joined
*	S11001001 has quit (Ping timeout: 255 seconds)
*	amatecha has quit (Ping timeout: 246 seconds)
*	edwardk has quit (Read error: Connection reset by peer)
*	LnL has quit (Quit: exit 1)
*	tjpeden has quit (Ping timeout: 255 seconds)
<johnw>	Has anyone ever used CMake to build a C++ project that links in a Haskell-built library that was cabal install'd?
*	vikram__________ (sid62188@gateway/web/irccloud.com/x-fyznykzgbpehjbsf) has joined
*	S11001001 (sid42510@fsf/member/S11001001) has joined
*	cdg has quit (Ping timeout: 240 seconds)
*	wedens has quit (Ping timeout: 240 seconds)
*	relax (~john@c-76-24-9-4.hsd1.ma.comcast.net) has joined
*	dkov (~dkov@84-114-31-82.cable.dynamic.surfer.at) has joined
*	edwardk (sid47016@haskell/developer/edwardk) has joined
*	zph has quit (Ping timeout: 246 seconds)
*	relax (~john@c-76-24-9-4.hsd1.ma.comcast.net) has left
<trigone>	hi! which do you think would work fastest: f :: Word -> Word -> Word; f x y = max x y - min x y, or f x y = min (x - y) (y - x), or f x y = if x < y then y - x else x - y
*	big_num (~big_num@12.51.196.147) has joined
*	Tspoon (tlarjoma@hilla.kapsi.fi) has joined
*	amatecha (sid10006@gateway/web/irccloud.com/x-gsrhuldoiizxrkfy) has joined
*	wedens (uid222242@gateway/web/irccloud.com/x-qvvkuysigpjevmmh) has joined
*	LnL (~L0CKnL0aD@78-23-24-36.access.telenet.be) has joined
*	wizonesolutions has quit (Ping timeout: 276 seconds)
*	posco has quit (Ping timeout: 240 seconds)
*	thoradam has quit (Ping timeout: 255 seconds)
*	crownose has quit (Quit: WeeChat 1.7.1)
*	tjpeden (sid42254@gateway/web/irccloud.com/x-mpfnftwvikclojof) has joined
*	posco (sid14832@gateway/web/irccloud.com/x-tzcarevgabqeaeuq) has joined
*	zph (sid26878@gateway/web/irccloud.com/x-rxnplwpmuheqzzno) has joined
<shapr>	Any recommended tutorials on monad transformers?
*	wizonesolutions (sid27627@drupal.org/user/739994/view) has joined
<manek>	cocreature: I dont think so. Why based ony on question regarding callstacks you think this edsl is wrong approach ?
<asthasr>	trigone: I think the last is best. Fewer comparisons.
<manek>	shapr: https://en.wikibooks.org/wiki/Haskell/Monad_transformers
<manek>	shapr: its the best one
*	thoradam (sid154141@gateway/web/irccloud.com/x-yudjkicrihaqrpyb) has joined
*	eacameron has quit (Remote host closed the connection)
<trigone>	asthasr: hm yeah i guess you're right...
<asthasr>	trigone: but why not just abs $ x - y
<trigone>	asthasr: Word is unsigned
<asthasr>	oh, of course.
<Tuplanolla>	I'd expect the second one to be the best, trigone.
<trigone>	Tuplanolla: why?
<Tuplanolla>	Branching is usually the biggest cost and you can define a branchless minimum on unsigned integers, trigone.
<cocreature>	manek: users who are not proficient in Haskell and the requirement to produce good error messages suggest that a full-blown dsl might be better to satisfy your requirements
<Tuplanolla>	Then again, you're writing Haskell, so nothing is conclusive, trigone.
<trigone>	Tuplanolla: hm... and it's cheaper to substract than to compare?
<Tuplanolla>	I didn't say that, trigone.
<manek>	cocreature: I want it to be USABLE by such users. Moreover, I strongly believe in spreading knowledge about haskell, so any EDSL that is easy to grasp, yet brings you the power of HAskell allows us (as a Haskell community) to introduce Haskell to broader audience
<shapr>	my experience is that programmers of languages other than Haskell have to get over the "weird syntax" and then it's all doable.
<trigone>	Tuplanolla: oh... well in the first version, there's one substraction, and two comparison (at least i guess, unless there's some reduction of graph or sth), and in the second, two substractions and one comparison...
*	mnoonan__ (~mnoonan@cpe-69-201-46-148.twcny.res.rr.com) has joined
<Tuplanolla>	None of that matters, trigone.
*	robotroll has quit (Read error: Connection reset by peer)
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
<Tuplanolla>	@google what is branch prediction
<lambdabot>	https://en.wikipedia.org/wiki/Branch_predictor
*	_asc_ has quit (Ping timeout: 240 seconds)
*	argent0 (~aner@186.133.237.178) has joined
<ertes-w>	shapr: the best tutorial on monad transformers is your own editor: if you know how to implement State, now would be a good time to implement StateT
*	cdg (~cdg@157.166.173.4) has joined
*	LnL has quit (Quit: exit 1)
*	big_num has quit (Quit: WeeChat 1.7)
<trigone>	btw, what's the simplest way to force evaluation of the elements of a list, in constant memory?
<ertes-w>	trigone: full or WHNF?
<trigone>	Tuplanolla: can you just tell me why the second version would work better than the first? both lack conditionals, at least as far as i can see.
*	cdg_ (~cdg@157.166.173.4) has joined
<trigone>	ertes-w: i'd say WHNF though it's probably the same in my particular case
<trigone>	nevermind, yes WHNF
<ertes-w>	trigone: in the former case just use deepseq, in the latter the easiest way is to use a strategy
*	eacameron has quit (Ping timeout: 248 seconds)
<trigone>	ertes-w: hm which is the former ^^
<trigone>	?
<ertes-w>	full evaluation
<ertes-w>	partial evaluation with strategies: https://hackage.haskell.org/package/parallel-3.2.1.1/docs/Control-Seq.html
<trigone>	ertes-w: won't it save in memory the whole list?
<trigone>	*to memory
*	peterbecich (~peterbeci@75-142-96-216.static.mtpk.ca.charter.com) has joined
<ertes-w>	trigone: it will
*	ixti (~ixti@139.red-83-52-4.dynamicip.rima-tde.net) has joined
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
*	drewbert has quit (Remote host closed the connection)
*	drewbert (~drewbert@24-113-123-50.wavecable.com) has joined
<shapr>	by constant memory do you mean contiguous?
<Tuplanolla>	"Branching is usually the biggest cost and you can define a branchless minimum on unsigned integers, trigone."
*	LnL (~L0CKnL0aD@78-23-24-36.access.telenet.be) has joined
<trigone>	ertes-w: well when i said "in constant memory" i meant, without having to keep the whole list, just doing the job and discarding each element as soon as it's evaluated...
*	wildsebastian (~sebastian@ip5f5bf921.dynamic.kabel-deutschland.de) has joined
<ertes-w>	trigone: well, you could just fold the list
<ertes-w>	:t foldl' (\_ x -> x `seq` ()) ()
<lambdabot>	Foldable t1 => t1 t -> ()
<dolio>	Why even force the elements if you're just going to throw them away?
*	cdg has quit (Ping timeout: 248 seconds)
<trigone>	Tuplanolla: oh sorry i misread you, i understand! but how can i tell if min was written without branches? unless i have to define one by myself?
<trigone>	dolio: perf measurement
<Tuplanolla>	"Then again, you're writing Haskell, so nothing is conclusive, trigone."
<trigone>	Tuplanolla: so, i do have to define one by myself...
<ertes-w>	trigone: just be strict in the resulting ()
<ertes-w>	then you'll have evaluated each element
<trigone>	ertes-w: be strict in the resulting ()? i don't understand your sentence
<ertes-w>	sorry, i have to leave…  someone please fill in for me =)
<ertes-w>	bye
<trigone>	ertes-w: thx :) bye
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Mon Aug 21 13:04:05 2017

**** BEGIN LOGGING AT Tue Aug 22 11:56:38 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<Cale>	dminuoso: Generally lambdas extend as far to the right as possible
<dminuoso>	Oh hey Cale. Thank you for your lazy explanation yesterday, it was really helpful. :)
*	bodisiw (~bodiskw@128.163.237.36) has joined
*	London_jack (~user@2.26.164.178) has joined
<erisco>	a compliment only a programmer could appreciate
*	bodisiw has quit (Client Quit)
*	a3Dman has quit (Ping timeout: 240 seconds)
<London_jack>	How to translate this https://gist.github.com/nickspinale/27e63107bbe7890d17b2bf30d181c1f6 into Haskell using /singletons/
*	zorin-os has quit (Ping timeout: 255 seconds)
<erisco>	London_jack, what does the underscore mean on line 4?
*	hc_ (~ircd@unaffiliated/hc) has joined
<London_jack>	That it's inferred by the compiler
<London_jack>	or not used
<London_jack>	I'm primarily concerned with how to reflect term-level functions to the type level and back
*	leat has quit (Quit: leat)
<London_jack>	but I haven't really used the /singletons/ library 
<crucify_me>	hi the second function here seems to override the sort func. but still returns the head of a string. I don't understand what happens there, its like Ord class and sort cancel eachother out.
<crucify_me>	https://ptpb.pw/_y2P
<erisco>	I don't get that about the underscore
<erisco>	singletons has some TH facilities to translate term functions to type functions, but the capability is limited
<erisco>	and afaik you don't get to go from type functions back to term functions
*	hc has quit (Ping timeout: 240 seconds)
*	leat (~leat@188.162.49.215) has joined
<London_jack>	Will that be a restriction of -XDependentTypes as well?
<London_jack>	*on
<erisco>	there is possibly something in here (and related paper) for you but I only looked for a moment a couple days ago http://hackage.haskell.org/package/reflection-2.1.2/docs/Data-Reflection.html
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	hc_ has quit (Ping timeout: 248 seconds)
*	argent0 (~aner@201.180.112.104) has joined
<London_jack>	That would work but I did nae expect to have to go outside of singletons
<erisco>	and there could be facilities in singletons that I am not aware of
*	hc (~ircd@unaffiliated/hc) has joined
*	cyborg-one has quit (Ping timeout: 240 seconds)
*	iomotoko has quit (Ping timeout: 260 seconds)
<erisco>	you could presumably translate lambdas to biCCCs and then have a promotion to types and back again
<erisco>	I have also used GADTs to represent the desired functional relation
*	mmhat has quit (Quit: WeeChat 1.9)
*	freeman42z[m] has quit (Ping timeout: 240 seconds)
*	tobhe (~tobhe@141.84.69.68) has joined
*	hc has quit (Ping timeout: 240 seconds)
*	Fekinox has quit (Read error: Connection reset by peer)
*	JuanMiguel (~JuanMigue@251.red-88-9-136.dynamicip.rima-tde.net) has joined
*	JuanMiguel has quit (Remote host closed the connection)
*	Fekinox (~Fekinox@cpe-74-72-183-234.nyc.res.rr.com) has joined
*	hc (~ircd@unaffiliated/hc) has joined
<London_jack>	thanks, reflection will do for me
*	dhil has quit (Ping timeout: 240 seconds)
<bobismijnnaam>	hey everyone, I hope it's not inappropriate but i've been struggling with a problem for 2 days and I could use a pointer or two. Anyone here mind taking a look? https://www.reddit.com/r/haskell/comments/6vco7r/problem_with_uniplate_and_a_polymorphic_type/
<cocreature>	bobismijnnaam: that post shows only "[removed]"
<London_jack>	I don't know why it was removed
<dminuoso>	Okay, so a WHNF is if the body of the abstraction is not in normal form?
<erisco>	maybe that is the problem
<London_jack>	I'll approve it
<Tuplanolla>	It would probably fit Stack Overflow better.
<bobismijnnaam>	Wow, really? Did I do that? I certainly hope not
<bobismijnnaam>	I thought it would be interesting cause it seems kind of a fundamental problem
*	juanpauc_ (~juanpauca@host-186-101-150-143.netlife.ec) has joined
<bobismijnnaam>	Thanks London_Jack
*	xcmw (~textual@2605:a000:132b:20d8:30f4:f0f6:5be:cd9b) has joined
*	peacememories (~textual@e245-202.eduroam.tuwien.ac.at) has joined
*	toblorone (~toblorone@162.246.216.202) has joined
*	ccomb has quit (Ping timeout: 255 seconds)
<bobismijnnaam>	as a taster, it involves using a polymorhpic function with transformBi from uniplate. it seems that I've made a very stupid design decision, but maybe not all is lost!
*	iomotoko (~iomotoko@unaffiliated/iomotoko) has joined
*	eelster (~eelster@98.115.54.73) has joined
*	ertes (~ertes@haskell/developer/ertes) has joined
*	freeman42x[m] (~Freeman42@83.136.43.94) has joined
*	juanpaucar has quit (Ping timeout: 248 seconds)
*	a3Dman has quit (Ping timeout: 248 seconds)
*	jaseemabid has quit (Ping timeout: 248 seconds)
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
*	b005 (~b005@ip923460d2.dynamic.kabel-deutschland.de) has joined
*	raichoo has quit (Read error: Connection reset by peer)
*	patbecich (~user@75-142-96-216.static.mtpk.ca.charter.com) has joined
*	tabemann has quit (Quit: Leaving)
*	Associat0r_ has quit (Read error: Connection reset by peer)
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	kody has quit (Quit: WeeChat 1.9)
*	eacameron has quit (Ping timeout: 255 seconds)
*	dfssner has quit (Quit: Page closed)
*	_asc has quit (Ping timeout: 255 seconds)
*	Costar (~Costar@179.215.124.226) has joined
*	Disconnected (Connection reset by peer)
**** ENDING LOGGING AT Tue Aug 22 12:28:00 2017

**** BEGIN LOGGING AT Tue Aug 22 12:28:19 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	a3Dman has quit (Ping timeout: 240 seconds)
*	Ojd has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
*	sfcg (~sfcg@79.97.176.188) has joined
<lyxia>	Is London_jack Iceland_jack 
*	Costar has quit (Ping timeout: 255 seconds)
*	crucify_me has quit (Ping timeout: 240 seconds)
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
*	ccomb (~ccomb@ctr45-1-88-182-26-59.fbx.proxad.net) has joined
*	spaceships (spaceships@nome01.eecs.oregonstate.edu) has joined
*	peacememories has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	numee has quit (Ping timeout: 255 seconds)
*	aarvar (~foewfoiew@50.34.105.170) has joined
<London_jack>	lyxia: yes
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
*	replay_ (~replay@pdpc/supporter/student/replay) has joined
*	samrat has quit (Ping timeout: 248 seconds)
<lyxia>	bobismijnnaam: what version of GHC are you using
*	slacko_ has quit (Ping timeout: 248 seconds)
<bobismijnnaam>	glorious ghc, 7.10.3. stock ubuntu 16.04 version I imagine
*	a3Dman has quit (Ping timeout: 248 seconds)
*	replay has quit (Ping timeout: 246 seconds)
<bobismijnnaam>	are you on to something?
*	valentinbuza (~valentinb@unaffiliated/valentinbuza) has joined
<lyxia>	I'm installing uniplate for this version of GHC to get the same error because it's not the same on 8.0
<bobismijnnaam>	huh. cool
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
**** ENDING LOGGING AT Tue Aug 22 12:44:14 2017

**** BEGIN LOGGING AT Tue Aug 22 18:37:54 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<monochrom>	koz_: I don't think you have to choose. Except is an instance of Alternative too, is that right? But if you already have a Maybe, you can already use Maybe's Alternative-ness. It's up to you which one is more convenient for the rest of your code, Except or Maybe.
<pacak>	jared-w: O_o
<jared-w>	Yes, I know, which is why I was was making sure it worked on both #ghc and #haskell. I never got a reply to my prior message on #ghc (it was just a random comment)
*	neoncontrails has quit (Remote host closed the connection)
<jared-w>	The problem ended up being that ben must've changed his settings to only allow queries from registered users and I just realized I never actually registered this nick (forgot to do so)
<monochrom>	Ohai jared-w I see you too. But I mean here. I don't know about #ghc.
<monochrom>	Or PM, yeah.
<jared-w>	Yeah I figured the issue out :p
*	neoncontrails (~neoncontr@2602:306:31a7:a1a0:35a9:1d58:e157:7b57) has joined
<pacak>	koz_: If vector size is encoded with peano numbers - there are no vectors with negative size.
*	Asiannoodles42[m (asiannoodl@gateway/shell/matrix.org/x-orqnysoyhrcvupyx) has joined
*	slacko_ has quit (Ping timeout: 240 seconds)
*	neoncont_ (~neoncontr@99-26-122-26.lightspeed.sndgca.sbcglobal.net) has joined
<ClaudiusMaximus>	jared-w: freenode recently changed the default user mode for "only receive pms from registered users" due to spam attacks
*	neoncontrails has quit (Ping timeout: 246 seconds)
<geekosaur>	^
<geekosaur>	someone was spamming child porn links in /msg
<jared-w>	ClaudiusMaximus: gotcha. I'll wager that I've lost quite a few PMs due to that if non registered users can't get PMs :|
<monochrom>	Oh yikes.
<pacak>	When was it?
<monochrom>	I guess it will last until all the spammers bother to register!
<ClaudiusMaximus>	17 august
*	jathan (~jathan@189.216.204.127) has joined
<pacak>	I see. We have a bot that sits on our channel and forwards messages into internal chat - it got banned on that date as well.
<jared-w>	monochrom: registering requires having an email so it makes it much easier to limit this sort of thing because you can block the email address or even entire domains from registering new nicknames
<MarcelineVQ>	ClaudiusMaximus: I wasn't aware they made a general change like that, are you sure?
<geekosaur>	you ca  probvably get it unbanned; the news article also notes that a malfunctioning utility tried to ban all freenode users while they were trying to mass-ban the spammer
<ClaudiusMaximus>	11:23 [freenode] -christel(christel@freenode/staff/exherbo.christel)- [Global Notice] In light of the wave of spambots sending links to child pornography images, we have chosen to update our default umodes to include +R (blocking messages from unregistered users). To allow such messages, /mode yournick -R. Apologies  for the disruption and the inconvenience.
<geekosaur>	https://freenode.net/
<geekosaur>	iit's still the most recent news item
*	jathan has quit (Remote host closed the connection)
<MarcelineVQ>	:(
<geekosaur>	second paragraph is about the umode change, third mentions the malfunctioning ban
*	Jesin has quit (Quit: Leaving)
*	mrkgnao (~mrkgnao@150.129.67.8) has joined
*	jathan (~jathan@189.216.204.127) has joined
*	u-ou- has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
*	skeuomorf has quit (Ping timeout: 240 seconds)
*	kuttifunk1 (~Thunderbi@host-188-174-203-17.customer.m-online.net) has joined
*	eacameron has quit (Remote host closed the connection)
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
*	kuttifunk has quit (Ping timeout: 240 seconds)
*	kuttifunk1 is now known as kuttifunk
*	chowie (~chowie@S01067824af7e5848.vn.shawcable.net) has joined
*	u-ou- (8b503499@gateway/web/cgi-irc/kiwiirc.com/ip.139.80.52.153) has joined
*	jathan has quit (Quit: Leaving)
*	jathan (~jathan@189.216.204.127) has joined
*	_asc (~arneschro@95.91.245.187) has joined
*	eacameron has quit (Ping timeout: 240 seconds)
*	Youmu (uid129469@gateway/web/irccloud.com/x-ulbcwuqxqfkaytgo) has joined
*	banc has quit (Quit: ZNC - http://znc.in)
*	hucksy_ (~hucksy@p4FD1FDF3.dip0.t-ipconnect.de) has joined
*	u-ou- has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
*	julienchurch (~jules@70.44.247.125.res-cmts.tnk.ptd.net) has joined
*	_asc has quit (Ping timeout: 248 seconds)
*	jathan has quit (Quit: Leaving)
*	_asc (~arneschro@ip5f5bf5bb.dynamic.kabel-deutschland.de) has joined
*	hucksy has quit (Ping timeout: 240 seconds)
*	jathan (~jathan@189.216.204.127) has joined
*	juhp (~juhp@redhat/juhp) has joined
*	systemfault (~rcyr@unaffiliated/rcyr) has joined
*	steeze (~steeze@71-33-171-239.hlrn.qwest.net) has joined
*	u-ou- (8b503499@gateway/web/cgi-irc/kiwiirc.com/ip.139.80.52.153) has joined
*	_asc has quit (Ping timeout: 248 seconds)
*	jathan has quit (Remote host closed the connection)
*	jathan (~jathan@189.216.204.127) has joined
<halogenandtoast>	> 1 + 1
*	jathan has quit (Client Quit)
<lambdabot>	 2
<halogenandtoast>	Okay good, at least lambdabot is here
<MarcelineVQ>	@bot
<lambdabot>	:)
<jared-w>	@bot
<lambdabot>	:)
<jared-w>	sweet
*	banc (~master@217.151.98.168) has joined
*	jathan (~jathan@189.216.204.127) has joined
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
*	ackpacket (~ackpacket@unaffiliated/ackpacket) has joined
*	shafox_ (uid28637@gateway/web/irccloud.com/x-rsmxrljliukcqxsi) has joined
*	erisco has quit (Quit: Leaving)
*	jathan has quit (Remote host closed the connection)
*	peterbecich has quit (Ping timeout: 260 seconds)
*	jathan (~jathan@189.216.204.127) has joined
*	louispan has quit (Quit: louispan)
*	jathan has quit (Remote host closed the connection)
*	jathan (~jathan@189.216.204.127) has joined
*	u-ou- has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
*	jathan has quit (Remote host closed the connection)
*	jathan (~jathan@189.216.204.127) has joined
*	eacameron has quit (Remote host closed the connection)
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
*	jathan has quit (Remote host closed the connection)
*	jathan (~jathan@189.216.204.127) has joined
*	naddeoa (~naddeo@104.156.100.10) has joined
*	rblaze (~blaze@209.6.152.108) has joined
*	Fekinox has quit (Read error: Connection reset by peer)
*	eacameron has quit (Ping timeout: 240 seconds)
*	jcdietrich (~jcdietric@184-175-46-77.dsl.teksavvy.com) has joined
*	jcdietrich has quit (Changing host)
*	jcdietrich (~jcdietric@unaffiliated/jcdietrich) has joined
*	tushigushi (~elTugucci@82-181-78-91.bb.dnainternet.fi) has joined
*	Fekinox (~Fekinox@cpe-74-72-183-234.nyc.res.rr.com) has joined
*	u-ou- (8b503499@gateway/web/cgi-irc/kiwiirc.com/ip.139.80.52.153) has joined
*	ackpacket has quit (Ping timeout: 248 seconds)
*	jcdietrich has quit (Client Quit)
*	Noldorin has quit (Quit: Textual IRC Client: www.textualapp.com)
*	pparkkin has quit (Remote host closed the connection)
*	u-ou- has quit (Client Quit)
*	ackpacket (~ackpacket@unaffiliated/ackpacket) has joined
*	u-ou- (8b503499@gateway/web/cgi-irc/kiwiirc.com/ip.139.80.52.153) has joined
*	u-ou- has quit (Client Quit)
*	tushigushi has quit (Ping timeout: 246 seconds)
*	juhp has quit (Quit: juhp)
*	magistr (c047d50e@gateway/web/freenode/ip.192.71.213.14) has joined
*	juhp (~juhp@redhat/juhp) has joined
*	plutoniix (~q@175.176.222.7) has joined
*	pplorins (~pplorins@58.250.204.67) has joined
*	jathan has quit (Quit: Leaving)
*	brynedwardz (~bryn@109.76.122.45) has joined
*	brynedwards has quit (Disconnected by services)
*	brynedwardz is now known as brynedwards
*	jathan (~jathan@189.216.204.127) has joined
*	jathan has quit (Remote host closed the connection)
*	jathan (~jathan@189.216.204.127) has joined
*	jathan has quit (Remote host closed the connection)
*	jathan (~jathan@189.216.204.127) has joined
*	jathan has quit (Remote host closed the connection)
*	jathan (~jathan@189.216.204.127) has joined
*	naddeoa has quit (Read error: Connection reset by peer)
*	steeze has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
*	quobo has quit (Quit: Connection closed for inactivity)
*	jathan has quit (Remote host closed the connection)
*	chowie has quit (Ping timeout: 255 seconds)
*	jathan (~jathan@189.216.204.127) has joined
*	rickerbh (~rickerbh@14-203-105-198.static.tpgi.com.au) has joined
*	samrat (~samrat@202.51.76.52) has joined
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
*	XorSwap (~XorSwap@wnpgmb016qw-ds01-58-40.dynamic.bellmts.net) has joined
*	ackpacket has quit (Ping timeout: 248 seconds)
*	SkyPatrol_ (~SkyPatrol@netacc-gpn-7-136-159.pool.telenor.hu) has joined
*	davr0s has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
**** ENDING LOGGING AT Tue Aug 22 19:57:49 2017

**** BEGIN LOGGING AT Wed Aug 23 18:16:11 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:46:51 2017)
*	Channel #haskell url: http://www.haskell.org/
*	mizu_no_oto (~textual@c-24-60-15-130.hsd1.ma.comcast.net) has joined
<AlainODea>	In real code yes. I'm just messing around with a script. I'll fix the variable names :)
<ab9rf>	AlainODea: you say that, but do you actually ever DO it? :)
*	mnoonan_ (~mnoonan@cpe-69-201-46-148.twcny.res.rr.com) has joined
*	cranej (~cranej@42.120.74.200) has joined
*	AlainODea applies water to wicked burn :)
*	rickerbh has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<AlainODea>	pacak: thank you for your help. Gotta jet. I will name my variables :)
<pacak>	Have fun. Proper names are really useful.
<pacak>	And type signatures for all the functions.
*	cdg (~cdg@2600:1700:3120:40e0:15f4:76ad:93fe:2bf3) has joined
<mnoonan_>	is there a way to test if two values are the-same-location-in-memory identical? I want to write some tests that my library isn’t making copies when applying newtype wrapping/unwrapping.
*	bmeynell has quit (Remote host closed the connection)
*	lambda-11235 (~lambda-11@70.41.58.147) has joined
<geekosaur>	reallyUnsafePtrEq# --- the name means what it says
*	xcmw (~textual@2605:a000:132b:20d8:b994:4884:3e3c:5651) has joined
<mnoonan_>	geekosaur: nice, thanks. that sounds like the kind of name I would expect it to have :)
<geekosaur>	but I'mnot sure where it lives
<pacak>	mnoonan_: reallyUnsafePtrEquality#
<pacak>	GHC.Exts
<pacak>	but the name is a bit misleading.
*	beekill (~beekill@27.78.201.180) has joined
<mnoonan_>	pacak: in what sense?
<pacak>	It's really-we-mean-it-this-function-will-eat-your-cat-and-burn-your-house-PtrEquality#
<ab9rf>	hehe
<geekosaur>	oh, did I truncate it :/
<ab9rf>	mnoonan_: why do you want to do this?
<pacak>	ab9rf: Performance.
<ab9rf>	ah, i see
<ab9rf>	you are deliberately lifting the hood :)
<koz_>	I keep thinking Haskells bitwise or looks like the code is flipping you off.
*	cdg has quit (Ping timeout: 246 seconds)
<mnoonan_>	ab9rf: in https://github.com/matt-noonan/justified-containers, there are various types that are just newtypes + a phantom parameter, and I want to write tests to check that no copies are created
<mnoonan_>	byorgey had a comment earlier today about mapping a newtype unwrapper possibly having a non-zero cost, which got me thinking about it.
<geekosaur>	well, no, it's not quite accursedUnutterable bad
<mnoonan_>	i suspect i need to throw some “coerce”s into the mix
<geekosaur>	usually
<geekosaur>	but gc a the wrong time could make you unhappy
<geekosaur>	*gc at the
<mniip>	the problem with reallyUnsafePtrEquality# is
*	Jeanne-Kamikaze (~Jeanne-Ka@2601:647:4300:f30f:75e0:6185:1f6a:8eaf) has joined
<mniip>	well,
<mniip>	ignoring false negatives,
<mniip>	the problem is there's now false positives
*	dfeuer has quit (Read error: Connection reset by peer)
<pacak>	Due to GC and tags in pointers
<mnoonan_>	mniip: object X replacing object Y at the same address after a gc?
<mniip>	yes
<mniip>	do note that this doesn't require X or Y to be unreferenced
*	MindlessDrone has quit (Ping timeout: 248 seconds)
*	mrcheeks (~user@2607:fea8:5ae0:6f5:9590:ee84:a2e6:2efa) has joined
*	amar_ (~amarpotgh@p57967D45.dip0.t-ipconnect.de) has joined
*	amar_ is now known as Guest84404
*	erisco has quit (Read error: Connection reset by peer)
*	MindlessDrone (~MindlessD@unaffiliated/mindlessdrone) has joined
*	xuanrui has quit (Quit: Leaving)
*	replay has quit (Quit: Textual IRC Client: www.textualapp.com)
*	louispan has quit (Quit: louispan)
*	Guest84404 has quit (Ping timeout: 252 seconds)
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
*	leat (~leat@188.162.200.111) has joined
*	Goplat (~goplat@reactos/developer/Goplat) has joined
*	peterbecich (~peterbeci@75-142-96-216.static.mtpk.ca.charter.com) has joined
*	jchia1 (~jchia@116.192.1.251) has joined
*	mnoonan_ has quit (Quit: mnoonan_)
*	romanofski[m] (romanofski@gateway/shell/matrix.org/x-pbaquojbmechswdv) has joined
*	xcmw has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	jchia has quit (Ping timeout: 264 seconds)
*	xcmw (~textual@2605:a000:132b:20d8:b994:4884:3e3c:5651) has joined
*	chowie has quit (Ping timeout: 248 seconds)
*	bandit145 (~bandit145@68-189-243-42.dhcp.oxfr.ma.charter.com) has joined
*	chowie (~chowie@S01067824af7e5848.vn.shawcable.net) has joined
*	Costar (~Costar@2804:14d:7e85:305:8474:4a32:e41b:5149) has joined
*	MindlessDrone has quit (Ping timeout: 252 seconds)
*	peter (~peter@71.201.219.141) has joined
*	MindlessDrone (~MindlessD@unaffiliated/mindlessdrone) has joined
*	kuttifunk1 (~Thunderbi@host-188-174-220-31.customer.m-online.net) has joined
*	cdg (~cdg@162-226-219-152.lightspeed.tukrga.sbcglobal.net) has joined
*	kuttifunk has quit (Ping timeout: 255 seconds)
*	kuttifunk1 is now known as kuttifunk
*	mnoonan_ (~mnoonan@cpe-69-201-46-148.twcny.res.rr.com) has joined
*	djapo has quit (Ping timeout: 248 seconds)
*	u-ou- (8b503499@gateway/web/cgi-irc/kiwiirc.com/ip.139.80.52.153) has joined
*	louispan (~textual@203.38.203.134) has joined
*	safe has quit (Read error: Connection reset by peer)
*	iomotoko (~iomotoko@unaffiliated/iomotoko) has joined
*	remexre has quit (Quit: ZNC 1.6.5 - http://znc.in)
*	remexre (~remexre@c-107-4-203-126.hsd1.mn.comcast.net) has joined
*	banc has quit (Quit: ZNC - http://znc.in)
*	hucksy (~hucksy@p4FD1FD9E.dip0.t-ipconnect.de) has joined
*	michalisko (~michalisk@abls201.neoplus.adsl.tpnet.pl) has joined
*	peter has quit (Ping timeout: 248 seconds)
*	hucksy_ has quit (Ping timeout: 240 seconds)
*	michalisko has quit (Ping timeout: 240 seconds)
*	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has joined
*	xuanrui (~xuanrui@104.237.90.121) has joined
*	remexre has quit (Quit: ZNC 1.6.5 - http://znc.in)
*	remexre (~remexre@c-107-4-203-126.hsd1.mn.comcast.net) has joined
*	takle has quit (Ping timeout: 240 seconds)
*	polman has quit (Ping timeout: 240 seconds)
*	banc (~master@217.151.98.168) has joined
<mnoonan_>	relating to my previous question.. I haven’t been able to google up a way to reliably avoid running the GC during evaluation of a certain expression. is it possible?
*	u-ou- has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
*	jay__ (~jay@117.249.215.60) has joined
*	Michael__ has quit (Quit: Leaving)
*	xcmw has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	rickerbh (~rickerbh@14-203-105-198.static.tpgi.com.au) has joined
*	samrat (~samrat@202.51.76.53) has joined
*	tacoboy has quit (Ping timeout: 252 seconds)
*	MichaelBurge has quit (Remote host closed the connection)
*	hackagebot gnss-converters 0.3.13 – GNSS Converters. – https://hackage.haskell.org/package/gnss-converters
*	peterbecich has quit (Ping timeout: 260 seconds)
*	xuanrui has quit (Ping timeout: 240 seconds)
*	taktoa (~quassel@173.230.18.194) has joined
*	xuanrui (~xuanrui@116.25.42.109) has joined
<remexre>	Hey, has the syntax for Git extra-deps in Stack changed recently?
*	rickerbh has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	louispan has quit (Quit: louispan)
*	eschnett has quit (Quit: eschnett)
*	tobloron_ has quit (Remote host closed the connection)
*	toblorone (~toblorone@162.246.216.28) has joined
*	chao-tic (~chao@218.101.54.122) has joined
*	toblorone has quit (Remote host closed the connection)
*	sz0 has quit (Quit: Connection closed for inactivity)
*	acarrico (~acarrico@pppoe-68-142-58-22.gmavt.net) has joined
*	XorSwap has quit (Quit: Leaving)
*	XorSwap (~XorSwap@kite.riseup.net) has joined
*	safe (~safe@unaffiliated/safe) has joined
*	forsythetony (4256862d@gateway/web/freenode/ip.66.86.134.45) has joined
<nitrix>	mnoonan_: Not that I'm aware. GHC is fairly dependent on the 512kb nursery area of its GC to perform good and with the collecting turned off, that's going to fill up very quickly and become problematic.
*	juhp (~juhp@redhat/juhp) has joined
*	xuanrui has quit (Remote host closed the connection)
*	cyborg-one has quit (Quit: cyborg-one)
<nitrix>	mnoonan_: I think you're probably after disabling or postponing major GC as opposed to minor GC, but I'm not aware of how you would control this either. A large heap doesn't help here as some of the heuristics are time-based (e.g. every 0.3 seconds when all threads are idle).
<nitrix>	I guess it could be a new feature.
*	rickerbh (~rickerbh@14-203-105-198.static.tpgi.com.au) has joined
<mnoonan_>	nitrix: minor gc still can move objects, right? I mostly just am trying to avoid writing a flaky test that two objects are supposed to be identical.
<pacak>	mnoonan_: Do you have any benchmarks showing that ptr equality will help?
<pacak>	You might be barking at the wrong tree...
<nitrix>	mnoonan_: Yes, minor GC will move objects from the nursery aread to the heap.
*	parable (~william@c-98-221-152-209.hsd1.nj.comcast.net) has joined
<mnoonan_>	pacak: it isn’t for optimization, really 
<koz_>	Is there a short-circuiting fold? I wanna bail out if the fold produces a particular value.
<nitrix>	mnoonan_: And when I was a beginner with Haskell, I was trying to do pointer equality checks and after going all the way down the rabbit hole, I discovered that it'd break referential transparency to do so.
*	polman (~ananev@188.162.64.93) has joined
<mnoonan_>	I’m tagging maps and keys with a phantom type in this library, and I don’t want the tagged versions to carry any run-time overhead. they should literally just be the same, untagged values
*	blankhart (~user@pool-100-38-124-53.nycmny.fios.verizon.net) has joined
<mnoonan_>	nitrix: I promise I’m not doing shenanigans :)
*	Denommus has quit (Ping timeout: 252 seconds)
*	xuanrui (~xuanrui@116.25.42.109) has joined
*	Noldorin has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
<pacak>	"overhead"... "it isn’t for optimization"... ಠ_ಠ
<nitrix>	Have you considered newtypes? Their whole purpose are to have different types during compile-time yet the same representation at runtime (eliminated, with no overhead).
<mnoonan_>	nitrix: yes, that’s already what the library does.
<mnoonan_>	the problem that I’m trying to solve now is stemming from a comment byorgey made earlier today, which is that mapping a newtype-unwrapper over a list still has nontrivial cost
*	eschnett (~eschnett@ktnron0916w-lp130-1-65-94-201-103.dsl.bell.ca) has joined
<mnoonan_>	there is a similar point made in the Coercible paper too, I think
*	Sgeo (~Sgeo@ool-18b98627.dyn.optonline.net) has joined
<mnoonan_>	pacak: point taken :) 
<mnoonan_>	pacak: what I mean is, I’m not trying to squeeze some cycles out of a computation, I’m trying to make this library zero-cost for the user.
<nitrix>	Additional cost than just a list? That shouldn't be... the newtype should get completely erased.
*	mrcheeks` (~user@2607:fea8:5ae0:6f5:ac22:85c1:5a3f:364c) has joined
*	mrcheeks has quit (Disconnected by services)
*	mrcheeks` is now known as mrcheeks
<pacak>	mnoonan_: https://github.com/tibbe/unordered-containers/issues/147 + https://ghc.haskell.org/trac/ghc/ticket/13615
<pacak>	mnoonan_: It was ghc bug though.
<mnoonan_>	nitrix: see the first page of http://cs.brynmawr.edu/~rae/papers/2014/coercible/coercible.pdf starting at “Using newtype for abstraction in Haskell has always suf- fered from an embarrassing difficulty.”
*	drcode (~drcode@5.29.192.15) has joined
<nitrix>	Oh, interesting.
*	CoderPuppy (~cpup@32.218.118.235) has joined
<mnoonan_>	pacak: I’m not sure I follow what the connection is?
<mnoonan_>	yeah, I was surprised too
*	rickerbh has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	drcode has quit (Read error: Connection reset by peer)
<pacak>	mnoonan_: If you are doing strange stuff for performance reasons - your users might be suffering from obscure bugs.
<pacak>	I'm not saying don't do that just be careful about it.
<mnoonan_>	fair enough
<nitrix>	mnoonan_: You should be able to use `coerce` in that scenario if all things fail, but I thought GHC was able to eliminate this. I'd be very surprised. I'm tempted to look at Core.
<nitrix>	mnoonan_: https://hackage.haskell.org/package/base-4.10.0.0/docs/Data-Coerce.html
*	soniku has quit (Remote host closed the connection)
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
<mnoonan_>	nitrix: yeah, I’m working on sprinkling some “coerce”s in right now, and I wanted to write a test to ensure it was working as intended.. hence the original question :)
*	Sampuka has quit (Ping timeout: 248 seconds)
<nitrix>	As long as you're not casting between boxed and unboxed values with unsafeCoerce# and trickery (which I think should be prevented by the type checker), I don't see how a garbage collection would break this.
*	Jeanne-Kamikaze has quit (Quit: Leaving)
<geekosaur>	reallyUnsafePtrEquality# came up earlier
*	jedws has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<geekosaur>	and the answer there is, make sure both parameters are fully evaluated and force a gc before doing the comparison
<geekosaur>	thta may end up being more expensive than just letting things go...
<mnoonan_>	geekosaur: whnf is sufficient, I assume?
*	peterbecich (~peterbeci@75-142-96-216.static.mtpk.ca.charter.com) has joined
*	jathan (~jathan@189.216.204.127) has joined
*	eklavya (~eklavya@2405:205:130d:47cf:a03e:ab1f:3ae1:7597) has joined
<geekosaur>	I'm not sue it is, in a multithreaded context
<geekosaur>	your thunk could be forced by another thread, which could trigger a gc which affects all threads
<nitrix>	I'd think this is the kind of test that GHC probably has to maintain the intergrity of Data.Coerce. Seems strange to roll your own test.
*	chowie has quit (Ping timeout: 252 seconds)
<geekosaur>	Coercible is always a no-op
*	onethirtyfive has quit (Ping timeout: 240 seconds)
<mnoonan_>	the point of the test is to pin down the library’s API and give external evidence that is it zero-cost (and catch me if I screw that up), not to test Data.Coerce itself
**** BEGIN LOGGING AT Thu Aug 24 11:45:46 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:12 2017)
*	Channel #haskell url: http://www.haskell.org/
<dminuoso>	lyxia, ahh! I have a feeling where this is heading, may I see undefined as omega from lambda calculus?
*	storer (~storer@104-186-218-11.lightspeed.bcvloh.sbcglobal.net) has joined
<dminuoso>	Or I guess the question is pointless. I got the answer, thank you.
*	iAmerikan has quit (Ping timeout: 252 seconds)
*	danthemyth has quit (Ping timeout: 248 seconds)
*	a3Dman has quit (Ping timeout: 240 seconds)
<ski>	abhiroop : did you try standalone deriving ?
<byorgey>	dminuoso: it's not a pointless question.  both undefined and omega correspond to the semantic idea of "bottom", i.e. the completely undefined value.  Operationally, they are different: undefined will throw an exception if you try to evaluate it, and omega just recurses infinitely
*	Noldorin has quit (Ping timeout: 252 seconds)
*	Cale has quit (Remote host closed the connection)
*	albertus1 (~seb@x55b4d499.dyn.telefonica.de) has joined
<byorgey>	let omega = omega; f (x : xs) = "Hello" in f (omega : omega)   -- this is another way to see that f does not need to evaluate x and xs at all
<dminuoso>	byorgey, okay, so omega would be akin to `omega = omega`
*	tobloron_ (~toblorone@162.246.216.202) has joined
<dminuoso>	Oh heh. Same second. :)
<byorgey>	dminuoso: right =)
*	ski . o O ( `omega = (\t -> t t) (\t -> t t)' )
<dminuoso>	ski, the problem is type inference will error out on that one
<dminuoso>	I tried it before :P
<byorgey>	that's probably why ski put it in an imagination bubble =)
<dminuoso>	Oh :)
<ski>	dminuoso : you can do it, with an auxilary `newtype'
*	Wizek (uid191769@gateway/web/irccloud.com/x-mxgjchupjbnsjwsr) has joined
*	seangrove (~user@52.119.115.133) has joined
*	crobbins has quit (Remote host closed the connection)
<abhiroop>	ski: Yes just tried Standalone deriving, doesn't compile, it says "Value must be a vanilla data constructor"
*	crobbins (~crobbins@2600:1700:6391:1c20:1c55:1208:f069:deab) has joined
*	toblorone has quit (Ping timeout: 248 seconds)
<byorgey>	> newtype D = D { unD :: D -> D }
<lambdabot>	 <hint>:1:1: error: parse error on input ‘newtype’
<byorgey>	aww
<ski>	@let newtype D = D { unD :: D -> D }
*	mmachenry (~Adium@208.78.142.234) has joined
*	tomphp_ has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<lambdabot>	 Defined.
<abhiroop>	There is a ticket on this too: https://ghc.haskell.org/trac/ghc/ticket/10514
<jyu__>	:window move DOWN
<ski>	now make `omega' have type `forall a. a'
*	jellowj has quit (Ping timeout: 255 seconds)
<dminuoso>	ski, okay I have no idea what that.. does. But Im only in chapter 4 of the gentle introduction, so Im sure it will make sense soon.  
<ski>	dminuoso : do you know `data' ?
*	slack1256 has quit (Remote host closed the connection)
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
<dminuoso>	Wrote it down, so I can look at it later :)
<dminuoso>	ski, yes.,
<ski>	`newtype' is basically(*) like `data', except that only a single data constructor is allowed, and further, it must take exactly one argument
*	Jesin (~Jesin@pool-72-83-138-15.washdc.fios.verizon.net) has joined
<dminuoso>	ski, is this for custom "embellished types" ?
*	eacameron (~eacameron@2601:403:c003:ecc0:11a1:a810:9107:25c4) has joined
*	crobbins has quit (Ping timeout: 252 seconds)
<dminuoso>	ski, oh I see there's also a difference wrt strictness of the constructor 
<ski>	((*) except that a `newtype' has no run-time representation, the data constructor is a no-op. it's mostly used when you want a *new* distinct type, or when you need recursion (but want to avoid the extra (run-time) overhead of the data constructor). in the former case, it may or may not be an abstract data type)
*	ski doesn't know the term "embellished type"
<ski>	note that the `{ unD :: ... }' parts of the definition is "record syntax" (which is syntactic sugar)
<ski>	it amounts to the same as plain :
<ski>	  newtype D = D (D -> D)
*	dhil has quit (Ping timeout: 240 seconds)
<ski>	  unD :: D -> (D -> D)
<ski>	  unD (D d) = d
*	osa1 has quit (Ping timeout: 240 seconds)
<ski>	(and record syntax can also be used for ordinary `data' definitions)
*	ninedotnine (~dan@2607:fea8:bda0:c2f:4ebb:58ff:fe23:b33) has joined
*	ninedotnine has quit (Client Quit)
<dminuoso>	ski, interesting, so its a recursive type definition?
<ski>	in addition, `D {unD = d}' (as both pattern and expression) means the same as plain `D d'. in the `data' case, you can have multiple "fields", and you don't need to remember the ordering, when using the record syntax
*	twanvl_ (~twanvl@92.110.121.28) has joined
*	iAmerikan (~dwshrewt@unaffiliated/iamerikan) has joined
<ski>	there's also `x {unD = d}', which makes an "update" (a copy) of `x', with the `unD' field replaced by `d' (all other fields, in this case none, staying the same)
*	eacameron has quit (Ping timeout: 240 seconds)
*	ninedotnine (~dan@2607:fea8:bda0:c2f:4ebb:58ff:fe23:b33) has joined
<crucify_me>	https://ptpb.pw/gPdx  hi trying to determine how to get an instance of Num into this code. (just added ski 's comment on newtype in comments)
*	pbogdan (~pbogdan@178.62.5.204) has joined
*	ninedotnine has quit (Client Quit)
<ski>	dminuoso : correct. point is, you can't say `type D = D -> D', since `type' synonyms can't be recursive (without breaking the recursive cycle by a `data' or `newtype')
*	iAmerika1 has quit (Ping timeout: 252 seconds)
*	toblorone (~toblorone@162.246.216.28) has joined
<dminuoso>	ski, is there a special reason why you can do this with the record syntax?
<ski>	`newtype' is like `type' in that you give a name to a type. except that in the latter case, it's merely a synonym, a shorthane, while in the former case, it's a *new* type (like with `data')
*	Cale (~cale@CPEf48e38ee8583-CM0c473de9d680.cpe.net.cable.rogers.com) has joined
<ski>	dminuoso : the record syntax here is a red herring, byorgey only used it for convenience (getting `unD' for free), i imagine
*	tessier has quit (Ping timeout: 252 seconds)
*	twanvl has quit (Ping timeout: 248 seconds)
<ski>	just `newtype D = MkD (D -> D)' would work just as well
*	leshow has quit (Quit: WeeChat 1.6)
*	ubsan_ has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	leshow (~leshow@static-209-87-236-138.storm.ca) has joined
<ski>	dminuoso : .. can you figure out how to modify the definition of `omega', to make use of this type, to make it type check ?
*	merijn (~merijn@a212-238-239-156.adsl.xs4all.nl) has joined
<crucify_me>	any takers re: above question? thanks https://ptpb.pw/gPdx
<dminuoso>	ski, lets make it my "homework assignment". :-)
*	tobloron_ has quit (Ping timeout: 240 seconds)
*	sleffy (~sleffy@c-24-7-67-0.hsd1.ca.comcast.net) has joined
<dminuoso>	Wouldn't want you to spoonfeed all the fun.
<lyxia>	crucify_me: deriving (Eq, Show, Num, Fractional)
*	jyu__ has quit (Quit: leaving)
<ski>	crucify_me : `(Nada x) / (Nada y) = ..x..y..' could be `Nada x / Nada y = ..x..y..'
<ski>	dminuoso : that's the spirit :)
*	jyu_ (~jiayao.yu@rrcs-173-196-171-202.west.biz.rr.com) has joined
*	leat has quit (Ping timeout: 260 seconds)
*	abhiroop has quit (Quit: Leaving...)
<crucify_me>	thanks, sorry ski not following your suggestion.. thanks lyxia I thought I tried similar
*	shafox (~pbehera@106.51.129.97) has joined
*	peterbecich has quit (Ping timeout: 260 seconds)
<ski>	crucify_me : as lyxia is hinting at, you need at least a `Num' instance, in order to be allowed to make the `Fractional' instance
<Psybur>	Is (+5) a closure?
*	peter___ has quit (Read error: Connection reset by peer)
<Cale>	Psybur: It might be implemented with one
<ski>	`(+5)' is a function (value)
<Cale>	But yeah, it's a function.
<ski>	"closure" is an implementation-specific term
*	hackagebot jukebox 0.2.20 – A first-order reasoning toolbox – https://hackage.haskell.org/package/jukebox
<ski>	(one can have implementations which doesn't represent function values as closures)
*	merijn has quit (Ping timeout: 240 seconds)
<Psybur>	For all intents and purposes it behaves like a closure though?
<Cale>	Not for all
<Cale>	A closure specifically refers to a pair of some code with an environment
<Psybur>	(+5) has an environment right? The '5'
<Cale>	An environment which will bind free variables in the code to values
<ski>	if you're asking whether Haskell uses static/lexical scoping, the answer is yes
<Cale>	If we have a closure, we can separate off its environment and inspect it
<Cale>	If we have a function, we can't.
*	ski would say "possibly"
<Cale>	For me at least, that's the point at which things stop being closures and start being something else which a closure was used to implement.
<Cale>	That is, when they stop looking like pairs with separable parts.
*	sleffy has quit (Quit: Leaving)
*	sleffy (~sleffy@c-24-7-67-0.hsd1.ca.comcast.net) has joined
*	jfischoff (~jonathanf@pool-74-101-197-223.nycmny.fios.verizon.net) has joined
*	eacameron (~eacameron@2601:403:c003:ecc0:11a1:a810:9107:25c4) has joined
<ski>	Psybur : e.g. if you have defined `makeAdder x = adder where adder y = x + y', then `makeAdder 2' (call it `addTwo') will make a function that remembers that the value of `x' is `2', not caring about other calls to `makeAdder', nor about other possible values of `x' in scope at the place where the function value `addTwo' is applied/called
*	nullx002 has quit (Ping timeout: 264 seconds)
*	nullx002 (Elite19325@gateway/shell/elitebnc/x-jtbrthplmmjecqnn) has joined
<ski>	Psybur : that's static/lexical scoping : the value of `x' in `adder', given `adder y = x + y' is determined by what value `x' had in the "lexical / static" context (scope), where `adder' was defined (inside the body of `makeAdder', where `x' has received a value); not by any value of `x' in the "dynamic" context ("scope") where `adder' (or `addTwo') is used (which would be "dynamic scoping")
*	nitros_ has quit (Quit: WeeChat 1.9)
<Cale>	It's possible for example, for an implementation to compile special code with the 2 filled in, or when you're doing graph rewriting, to copy wholesale the graph for the body of adder, except replacing occurrences of x for 2.
<Cale>	Neither of those looks very much like a closure
<ski>	Psybur : one obvious way to implement such a function value is as a closure : a reference to the code `let adder y = x + y in adder' (possibly compiled), together with the environment remembering that `x' is bound to `2'
<Cale>	GHC will often inline the definitions of small functions which will result in fewer closures being constructed at runtime.
*	dhil (~dhil@dhcp-90-078.inf.ed.ac.uk) has joined
<ski>	what Cale was mentioning is another way to implement functions : substitution of actual parameters for formal parameters, in the body
*	peter (~peter@66.175.245.7) has joined
<crucify_me>	lyxia, thanks for your help. I pasted your correction as far as I could determine it. getting a similar error as before 
<crucify_me>	https://ptpb.pw/KN4n
*	kuribas` has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
<ski>	Psybur : makes any sense ?
*	kuribas (~user@ptr-25vy0i6r2pkd6kho66n.18120a2.ip6.access.telenet.be) has joined
*	magicmushroom[m] (magicmushr@gateway/shell/matrix.org/x-xgssbglclsvayxfn) has left ("User left")
<Psybur>	... :D
*	BernhardPosselt (~bernhard@2a02:8388:6780:ad80:22cf:30ff:fe6e:fadb) has joined
<ski>	(abstractly, instead of having a closure (pair) `(let adder y = x + y in adder , { x = 2 })', substitution corresponds to replacing `x' with `2', getting (conceptually) `let adder y = 2 + y in adder')
<BernhardPosselt>	how do lenses work? is it a macro?
<BernhardPosselt>	makeLenses
<dminuoso>	Cale, isnt the concept of a closure kind of similar to a lambda expression with a free variable? I mean in both cases you have some locally free variable that is bound in some outer context.
<Cale>	BernhardPosselt: makeLenses is a Template Haskell macro, yeah.
<ski>	(one can in fact consider the closure as *delaying* the substitution until one actually reaches the variable `x', when evaluating the body of `adder')
<Cale>	dminuoso: Well, one way that you might implement closures is to have a lambda with variables occurring free, and then a map from the names of the free variables to values (or terms).
*	leat (~leat@188.162.192.73) has joined
<ski>	dminuoso : it's a lambda expression with some free variables, together with an environment that binds those free variables, yes
<monochrom>	"similar" is a useless notion. Closure implements a lambda expression with free variables.
<Cale>	dminuoso: However, you might also use a pair consisting of a function pointer and an array of pointers to the values...
<BernhardPosselt>	are there non macro solutions to updating deeply nested records?
<Cale>	There's a wide range of possible ways for closures to look, but they all look like pairs of some code with a finite map of some sort.
<ski>	Cale : not clear to me how your latter alternative differs from the former (except in detail) :)
<Cale>	ski: Well, in the former, we have the lambda as a tree or expression graph
<Tuplanolla>	You can easily define the lenses yourself, BernhardPosselt. You don't even need a package to do that.
<Cale>	ski: I'm imagining that the lambda is an AST
<ski>	well, yes, you could have that. but one could also read your "lambda" as a (currently) unspecific term, possibly resolving to your latter example :)
<BernhardPosselt>	so the macro is basically just DRY because you probably need to create lenses for each type that you want to use right?
<dminuoso>	Cale, you know what's funny, "Ast" is the German word for "branch". There's a certain irony in that abbreviation.
<Cale>	hah
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
<monochrom>	Is there also "adt"?
<BernhardPosselt>	n
<lyxia>	BernhardPosselt: https://hackage.haskell.org/package/generic-lens you get lenses for records without TH.
<BernhardPosselt>	lyxia: wow, ty
<Psybur>	I'm seeing some people on stack overflow saying that partially applied functions are closures :{
<BernhardPosselt>	Psybur: kinda
<ski>	Psybur : unfortunately, the term "closure" is often used a bit inappropriatedly (confusing abstract semantics with implementation)
<monochrom>	There are people, even prominent ones, who use "closure" to refer to every lambda expression.
*	sleffy has quit (Quit: Leaving)
<BernhardPosselt>	Psybur: because a closure captures an argument similarily to how a partially applied function captured an argument
<Psybur>	I guess you guys are saying closures are specific types of functions?
*	sleffy (~sleffy@c-24-7-67-0.hsd1.ca.comcast.net) has joined
<ski>	Psybur : in the `makeAdder' example above, one could have defined it as `makeAdder x y0 = adder y0 where adder y = x + y' (or renaming `y0' to `y', if you prefer), or even as `makeAdder x y = x + y'
<Cale>	Psybur: They're something a compiler might use to represent functions at runtime.
<Psybur>	That can be partially applied
*	pera has quit (Ping timeout: 276 seconds)
<BernhardPosselt>	closures just get the parameter by closing over it instead of having them in their argument list
<ski>	Psybur : still, `makeAdder 2' will behave (observationally speaking) in the same way
<ski>	Psybur : .. and one could say that this is a partial application of `makeAdder'
<Cale>	Psybur: It's possible for GHC, for example, to implement (+5) as something which is not a closure, by compiling special code for that function.
*	dfeuer (~dfeuer@wikimedia/Dfeuer) has joined
<BernhardPosselt>	lyxia: the syntax is actually way easier to read than lenses
*	epsilonhalbe (~epsilonha@62.178.36.12) has left
*	mson has quit (Quit: Connection closed for inactivity)
<dminuoso>	Psybur, a closure is any "function" with a free variable (a variable that is not among its parameters) in it. 
*	cobol (Elite20180@gateway/shell/elitebnc/x-vddaqksiczidjhbg) has joined
<Cale>	Psybur: As a programmer, you can't really tell. Some people like to use the word "closure" to refer to all functions which have captured the value of a free variable from the scope in which they've been defined.
<Cale>	But that's sort of an abuse.
<dolio>	Why just functions?
*	`Guest00000 (~user@37.113.180.120) has joined
<ski>	dminuoso : a closure is a possible way for implementing a function value
<Cale>	dolio: Also a good point -- it shouldn't be just functions.
<Cale>	dolio: It seems like most such programmers are also fans of strict evaluation though, I think :)
*	coot____________ has quit (Quit: coot____________)
<dolio>	That doesn't preclude the question.
<ski>	since Haskell is non-strict, closures are often used to implement non-function values as well
<BernhardPosselt>	Psybur: still confused? need an example in js?
<Psybur>	Since functions are curried, does it mean that any function that takes in multiple parameters has implicit closures?
<dminuoso>	ski, considering how many discussions Ive had about "closures", I think the word might just lack a concise definition everyone can agree on.
<Cale>	Psybur: Maybe, maybe not.
<ski>	(in a strict language, other non-strict aspects (than functions), such as suspensions (delayed computations, without parameters), or non-strict records (think objects with methods. e.g. in OCaml) can be implemented with closures)
*	sellout has quit (Quit: Leaving.)
<Psybur>	If you have f x y = ... then f x is a closure?
<Cale>	Psybur: Usually the compiler will do all kinds of things to avoid forming closures as you apply a function to each successive argument.
<Psybur>	I see
*	dfeuer has quit (Ping timeout: 240 seconds)
<ski>	Psybur : `f x' can be implemented by a closure
<dolio>	Java has let you define classes locally that capture values in the local environment for a long time, for instance.
<dolio>	Even though it hasn't had first class function objects per se.
*	dfeuer (~dfeuer@wikimedia/Dfeuer) has joined
<Cale>	Psybur: If you're only interested in what programs *mean* then "closure" is at the wrong level of abstraction, probably.
*	sssilver_ has quit (Ping timeout: 248 seconds)
<Tuplanolla>	Are you saying closure is an implementation technique, like stack or heap?
<Cale>	Tuplanolla: yes
<Psybur>	Ok I think I get what you guys are saying. Something can "seem" like a closure but not actually "be" one heh
*	OnkelTem_ (~onkeltem@unaffiliated/fantomas) has joined
*	osa1 (~omer@91.93.255.229) has joined
*	osa1 has quit (Changing host)
*	osa1 (~omer@haskell/developer/osa1) has joined
<ski>	dminuoso : that may be so. but for the purposes of terminology in the Haskell community, i think it's relatively accepted that "closure" refers to an implementation strategy for delayed computations
<ski>	(or at least i hope so)
*	peterbecich (~peterbeci@75-142-96-216.static.mtpk.ca.charter.com) has joined
*	minn (~minn@pool-71-163-97-83.washdc.fios.verizon.net) has joined
<dolio>	I think that's probably agreed upon among PL academics.
<BernhardPosselt>	Psybur: https://dpaste.de/4Bz0
*	pja has quit (Quit: pja)
<dolio>	Which is probably where the term came from in the first place.
*	OnkelTem has quit (Ping timeout: 246 seconds)
<BernhardPosselt>	you see function solution closes over the a parameter
<BernhardPosselt>	from the first call
<Psybur>	BernhardPosselt, yes, I think I see why in Haskell (+5) might not be implemented as a closure but your example is definitely a closure.
<ski>	Psybur : and you shouldn't care about whether it's a closure or not, unless you care atm about implementation details (like stack vs. heap, how garbage-collection is done, &c.)
<Cale>	Psybur: Even still, no :)
<BernhardPosselt>	so partial application is kinda a closure :D
<BernhardPosselt>	at least in js
<Psybur>	Well, it may or may not be one depending on that tricky compiler
<Psybur>	;P
<Cale>	right
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Thu Aug 24 12:40:05 2017

**** BEGIN LOGGING AT Sat Aug 26 11:33:07 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	Spockz has quit (Client Quit)
*	castlelore (~castlelor@unaffiliated/castlelore) has joined
<hpc>	as for the reason callCC gets so much attention, it makes a good bar to measure your understanding of weird control flow by
<hpc>	if you can reach the point where you understand callCC, you should be able to understand many other more interesting control flow structures
*	albertus1 has quit (Ping timeout: 240 seconds)
<hpc>	erisco: hopefully some of that helps with your question?
*	LysergicDreams (~Lysergia@client-104-245-228-34.cvalink.com) has joined
<dolio>	People should just skip to delimited continuations.
<dolio>	They're better, and they're less weird.
*	lambdabot has quit (Remote host closed the connection)
*	lambdabot (~lambdabot@haskell/bot/lambdabot) has joined
<Welkin>	so what is callCC and why would you use it?
*	alex`` (~alex@2a01cb000bb310000e31f98b4cdf4eae.ipv6.abo.wanadoo.fr) has joined
*	You are now known as n_blownapart
*	castlelore has quit (Ping timeout: 255 seconds)
*	JuanDaugherty has quit (Read error: Connection reset by peer)
<hpc>	Welkin: it's a thing that does stuff, and you should use it because you need the stuff it does ;)
*	cloudhead has quit (Ping timeout: 240 seconds)
*	JuanDaugherty (~juan@98.4.124.117) has joined
<dolio>	You probably don't, though.
<hpc>	yeah
<hpc>	it's one of those things that's more useful to learn than to actually use
<hpc>	it's like long division
*	ido (~ido@pdpc/supporter/student/ido) has joined
<Eduard_Munteanu>	Welkin, typical usage goes like    callCC $ \exit -> ... something ... exit retVal ... something ...
*	Saukk has quit (Remote host closed the connection)
*	kody has quit (Quit: WeeChat 1.9)
<Eduard_Munteanu>	Like   callCC $ \break -> forM [1..10] $ \i -> when (i == 3) (break ())   is a for-loop-like construct which quits on the 3rd iteration
<Eduard_Munteanu>	Er, forM_
*	louispan has quit (Quit: louispan)
*	JuanDaugherty has quit (Ping timeout: 246 seconds)
*	TipsyMe has quit (Ping timeout: 248 seconds)
*	StoneToad has quit (Ping timeout: 246 seconds)
*	dhil (~dhil@dhcp-90-078.inf.ed.ac.uk) has joined
*	slacko_ (~davi@p2E5B2AF5.dip0.t-ipconnect.de) has joined
*	Fuuzetsu has quit (Read error: Connection reset by peer)
*	albertus1 (~seb@x55b4b9cb.dyn.telefonica.de) has joined
<hpc>	it's impossible to write clean callCC code on one line too
*	sellout- (~Adium@174-16-153-221.hlrn.qwest.net) has joined
*	CoderPuppy (~cpup@32.218.117.10) has joined
<Welkin>	:t callCC
<lambdabot>	MonadCont m => ((a -> m b) -> m a) -> m a
<erisco>	hpc, I take that it only really matters in effectful computation, which would explain why we see it related to Monad in Haskell
*	louispan (~textual@14-203-219-236.static.tpgi.com.au) has joined
<Welkin>	:t runContT
*	You are now known as crucify_me
<lambdabot>	forall k a (m :: k -> *) (r :: k). ContT r m a -> (a -> m r) -> m r
*	sz0 (uid110435@gateway/web/irccloud.com/x-rwhibdmmnhcmuygd) has joined
<platz>	though other monads (e.g. Maybe) hav some early-exit flavors too
<dolio>	It's not a 'pure' function.
*	cpup has quit (Ping timeout: 252 seconds)
<platz>	although not as powerful.. but for normal uses seem to be good enough
<erisco>	there is otherwise no sense to "do it twice" or "never do it"
*	StoneToad (~StoneToad@ppp-199-167-119-213.storm.ca) has joined
<dolio>	Trying to reason about a lazy language with continuations is very tricky, too.
<Welkin>	is callCC not referentially transparent?
<hpc>	it is
*	tmp-9284380 has quit (Ping timeout: 260 seconds)
*	slacko_ has quit (Ping timeout: 276 seconds)
*	Zav (a8eb4cfd@gateway/web/freenode/ip.168.235.76.253) has joined
<hpc>	@src callCC
<lambdabot>	Source not found. stty: unknown mode: doofus
*	Jeanne-Kamikaze has quit (Quit: Leaving)
<Welkin>	 @src is a lie anyway
<dolio>	'Do it {zero,two} times' can have meaning outside of effects, though.
*	TipsyMe (~TipsyMe@50-50-229-117.waus.wi.frontiernet.net) has joined
<erisco>	so I am staring at this example which reads  callcc (λk. k 5 + 2) + 10
<dolio>	You can duplicate or remove portions of your program using control effects.
<erisco>	what do you think that should reduce to?
**** ENDING LOGGING AT Sat Aug 26 11:59:51 2017

**** BEGIN LOGGING AT Sat Aug 26 12:32:11 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	nomicflux has quit (Quit: nomicflux)
<erisco>	and break is scoped to a switch or loop, continue scoped to a loop
<dolio>	Yeah, it's nicer for implementing return, at least.
<akamaus>	Athas, In case you interested, haskell-platform 8.0.2 works like a charm.
<dolio>	You can reset around a function and then return is a shift.
*	osa1 has quit (Ping timeout: 240 seconds)
<erisco>	as a structural rule you can do that, even
*	crobbins (~crobbins@2600:1700:6391:1c20::48) has joined
*	sagax (~sagax_nb@213.138.71.146) has joined
<dolio>	Also you can do a sort of multi-return by bundling up k.
<Athas>	akamaus: I'll keep that in mind if I see anyone else with that problem.  I just use stack myself.
<akamaus>	Athas, I tried, but I needed some exotic packages like astar. Stack seem to have troubles with them.
<akamaus>	usually I'm happy with cabal and nix, stack seems to be a bit redundant in such setup
<dolio>	Also you can fool around with shift/reset very easily with ContT.
<dolio>	reset m = runContT m return ; shift = ContT
*	zerokarmaleft (~zkl@morpheus.net) has joined
<dolio>	And the types show you where the control effects can happen.
*	lokydor (~lokydor@bdv75-2-82-66-243-81.fbx.proxad.net) has joined
*	cyborg-one (~cyborg-on@130-0-58-128.broadband.tenet.odessa.ua) has joined
*	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has joined
*	dxld has quit (Ping timeout: 276 seconds)
*	maddybutt has quit (Ping timeout: 260 seconds)
*	takle has quit (Remote host closed the connection)
*	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has joined
*	eazar001 (~ebrahim@2602:304:cf7b:efb0:1fbd:d543:5841:fc35) has joined
*	a3Dman has quit (Ping timeout: 240 seconds)
*	justanotheruser has quit (Ping timeout: 240 seconds)
*	Noldorin has quit (Ping timeout: 246 seconds)
<dolio>	Or if you just use Cont it will go back and forth between direct style for pure stuff and monadic style for places where control effects can happen.
<dolio>	@let reset m = runCont m id
*	nomicflux (~nomicflux@cpe-174-103-183-220.wi.res.rr.com) has joined
<lambdabot>	 Defined.
<dolio>	@let shift e = Cont e
<lambdabot>	 .L.hs:183:11: error:
<lambdabot>	     • Data constructor not in scope: Cont :: t1 -> t
<lambdabot>	     • Perhaps you meant one of these:
<erisco>	I am not sure I should really care about it... it seems kind of insane
<dolio>	:t Cont
<lambdabot>	error:
<lambdabot>	    • Data constructor not in scope: Cont
<lambdabot>	    • Perhaps you meant one of these:
<dolio>	Huh.
<dolio>	@undefine
<lambdabot>	Undefined.
<erisco>	I just wanted to understand the example given in this tutorial on K (a rewriting framework for language semantics)
*	slacko_ (~davi@p2E5B2AF5.dip0.t-ipconnect.de) has joined
*	dxld (~dxld@2002:506d:9110:0:be5f:f4ff:fe9b:ef7c) has joined
<mauke>	:t cont
<lambdabot>	((a -> r) -> r) -> Cont r a
*	maddybutt (~maddy@72.18.233.74) has joined
<dolio>	Oh. Right.
*	maddybutt has quit (Max SendQ exceeded)
*	neoncontrails (~neoncontr@2602:306:31a7:a1a0:ed30:6cc7:8f5e:183c) has joined
*	maddybutt (~maddy@72.18.233.74) has joined
*	eazar001 has quit (Ping timeout: 276 seconds)
*	vlatkoB_ has quit (Remote host closed the connection)
*	ubsan has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	slacko_ has quit (Ping timeout: 248 seconds)
*	pylbrecht has quit (Quit: Segmentation fault (core dumped))
*	louispan has quit (Quit: louispan)
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	djapo (~archie@unaffiliated/djapo) has joined
*	hackagebot recursion-schemes-ext 0.2.0.0 – Amateur addenda to recursion-schemes – https://hackage.haskell.org/package/recursion-schemes-ext
*	broccolistem has quit (Quit: Textual IRC Client: www.textualapp.com)
*	eazar001 (~ebrahim@2602:304:cf7b:efb0:1ad6:c7ff:feb8:efa7) has joined
*	trigone (56c9d193@gateway/web/freenode/ip.86.201.209.147) has joined
*	jmcarthur (~jmcarthur@2601:86:100:1620:11f3:5a14:fc98:ceb1) has joined
*	hvr has quit (Remote host closed the connection)
*	augur (~augur@noisebridge130.static.monkeybrains.net) has joined
*	hvr (~hvr@h081217016230.dyn.cm.kabsi.at) has joined
*	hvr has quit (Changing host)
*	hvr (~hvr@haskell/developer/hvr) has joined
<trigone>	hi! i'm looking for an up-to-date graph representing the hierarchy among the basic classes Num, Eq, Ord, Enum, Bound, etc. i found one here https://en.wikibooks.org/wiki/Haskell/Classes_and_types#Standard_classes but after experimenting with ghci, it appears Num does not imply Eq, and somehow Enum is not required if you have Bounded, Num, and Eq... so i'm a bit lost
<trigone>	oh nevermind wrt Enum, i made a mistake in my code
<mauke>	https://www.haskell.org/onlinereport/haskell2010/haskellch6.html#x13-1270006.3
<mauke>	oh, hmm
*	hvr has quit (Remote host closed the connection)
<trigone>	i still don't get why ghci inferred (Eq a, Num a, Bounded a) => if all Num are automatically Eq... redundancy?
<mauke>	they're not (anymore)
*	raichoo (~raichoo@dslb-178-009-138-226.178.009.pools.vodafone-ip.de) has joined
<mauke>	https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/bugs.html#numbers-basic-types-and-built-in-classes
*	hvr (~hvr@h081217016230.dyn.cm.kabsi.at) has joined
*	hvr has quit (Changing host)
*	hvr (~hvr@haskell/developer/hvr) has joined
<trigone>	mauke: ok! thx :)
<trigone>	btw, the tokens representing say integers (0, 1, 2, 3 ...), are they overloadable somehow? how are they defined?
<trigone>	:t 0
<lambdabot>	Num t => t
<erisco>	surprise
<mauke>	a numeric literal 42 actually means (fromInteger 42_as_Integer)
<mauke>	but there's no syntax for 42_as_Integer
*	{emptyset} has quit (Ping timeout: 248 seconds)
<mauke>	:t fromInteger
<lambdabot>	Num a => Integer -> a
*	peterbecich has quit (Ping timeout: 260 seconds)
<trigone>	mauke: ok...
<geekosaur>	basically youy overload it by creatinga Num instance and defining its fromInteger appropriately. but you also have to define the other Num methods
*	johnw has quit (Read error: Connection reset by peer)
<trigone>	can't you write it along the lines of (fromInteger (42 :: Integer))?
<trigone>	geekosaur: ok thx :)
<geekosaur>	it acts like that, but as compiled that just adds an extra fromInteger
<mauke>	that would be a recursive definition
<dolio>	But that's effectively: fromInteger (fromInteger 42_as_integer :: Integer)
<trigone>	mauke: hm yeah
*	AndChat|79476 (~AndChat79@75-165-48-101.tukw.qwest.net) has joined
<geekosaur>	in ghc specifically, with the right options and imports it probably ends up as something like (fromInteger (S# 42# ))
<geekosaur>	but there is no standard for that, just a specification of how numeric literals should behave
<trigone>	mauke: even if fromInteger is defined as `id` for Integers?
<trigone>	wait i'm not srue it makes sense...
<mauke>	trigone: even if you say "42 actually means id 42", that still contains a 42
<mauke>	which would be expanded to id 42, and so on
<trigone>	mauke: oh right
<trigone>	geekosaur: ok
<dolio>	As far as the Haskell report goes, it could be fromNatural, except the report doesn't have Natural.
<mauke>	heh, I suppose you could define it as fromInteger (read "42")
<dolio>	And ghc has negative literals now.
<dolio>	As an option.
<trigone>	dolio: really... you mean, overloaded unary (-)?
<geekosaur>	(where "42#" when MagicHash is in effect is an unboxed machine word with that numeric value, and S# is the hidden constructor for "short" Integers)
<dolio>	Unary (-) was already overloaded.
<dolio>	GHC also has negative literals.
*	ali_bush has quit (Quit: No Ping reply in 180 seconds.)
<trigone>	dolio: oh.. so what's the definition of negative literals?
<trigone>	(by contrast i mean)
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
<mauke>	previously: -42 means negate (fromInteger 42_as_Integer)
<mauke>	now: -42 means fromInteger minus_42_as_Integer
<dolio>	Where `- 42` is unary minus of 42, and `-42` is the negative 42 literal.
*	Milijus has quit (Ping timeout: 246 seconds)
<trigone>	ok... and in practice, the difference?
<trigone>	it means you can have different values for (negate x) and (- x) or something?
<trigone>	(for custom Num classes i mean)
<dolio>	No, (- x) is (negate x).
<mauke>	it means f -42 applies f to -42
<dolio>	You could have different values for (- 42) and (-42) if you were into bad ideas.
<trigone>	mauke: oh you mean you can write negatvie literals without parentheses?
<trigone>	cool, it's a (relatively) good idea
<mauke>	:t ?f -42
<lambdabot>	(?f::a, Num a) => a
<mauke>	yeah, not in lambdabot :-)
<dolio>	I'm not sure it's a good idea.
*	TipsyMe has quit (Ping timeout: 252 seconds)
*	ali_bush (~ali_bush@gentoo/developer/alibush) has joined
<dolio>	But it exists as an option.
<mauke>	I like it
*	TipsyMe (~TipsyMe@50-50-233-140.waus.wi.frontiernet.net) has joined
<trigone>	dolio: does it have perf efficiencies? since you don't have to go through negate to get the value (in case it's a primitive type like Int)? though maybe the optimization was already done
<dolio>	I don't care about its performance.
<dolio>	I care that, since it exists with the other unary negation, it introduces a lot of complicated distinctions.
<dolio>	If it were the only unary negation, I'd be more on board.
<dolio>	Making the old sort of negation 'fast' for literals is not a hard problem, and I'm pretty sure GHC does it.
<erisco>	what really was the point of it?
<trigone>	btw, what's the major reason why we couldn't add methods to classes in other modules? provided they're strictly defined in terms of pre-existing methods (aka provided they have a default definition). it'd allow adding ad-hoc polymorphic functions when needed, but also allow specializing them if a more efficient version would exist...
<trigone>	(in other modules than the original module into which the class was written)
<geekosaur>	because other modules don't know to, or how to, pass the functions
<trigone>	geekosaur: what do you mean
<geekosaur>	remember that methods are not attached to data, they are records
<geekosaur>	this is not OOP
<geekosaur>	when you define foo :: Eq a => ...
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Sat Aug 26 13:20:04 2017

**** BEGIN LOGGING AT Sun Aug 27 11:49:12 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	leat (~leat@188.162.200.93) has joined
*	slacko_ (~davi@p2E5B29BE.dip0.t-ipconnect.de) has joined
<dminuoso>	monochrom, in all honesty excercises in Haskell are tough, because there's so little you can do until you get to things like monads. At least that has been my experience.
<jared-w>	(although I've found that, at least for the first half of Bird's book, it feels very "this is how FP programmers thought and went about things 10 years ago..." although it's still a very valid way to approach things. It just takes a bit of time to really get an appreciation for his approach since he has this giant fetish for lists and if/then/else
<kuribas>	Unode: In haskell we typically don't use hashes, but Data.Map or Data.HashMap
<Unode>	monochrom: about 40%, mostly on the first part of the book. The second half I read while commuting and didn't have a ghc with me to try it. I did them mentally as far as I could.
<monochrom>	dminuoso, I'm referring to HPFFP's exercises, not exercises randomly obtained from the Internet.
<dminuoso>	Oh okay
<erisco>	dminuoso, that seems to be because "a thing to do" only counts if it involves IO
*	Rodya_ (~Rodya_@2601:46:4001:e0b4:cd74:8269:f040:6d23) has joined
<monochrom>	I'm wondering if 40% is enough.
<jared-w>	No, it's not
*	osa1 has quit (Ping timeout: 248 seconds)
<Unode>	monochrom: some of the exercises were extenuating specially once "solutions" were no longer available. I felt a lot of frustration because often it was not even clear what the end-goal was supposed to be.
<erisco>	I think I have written zero IO programs to date and somehow I am not bored
<erisco>	well, I guess I used shake + Hakyll that one time
<jared-w>	Starting with the Monad chapter, it /feels/ mostly theory, but you *really* need to do the exercises or nothing will stick
<Unode>	erisco: I can't even envision what you actually do.
<dumptruckman>	screw it
<dumptruckman>	just gonna install mint dual boot
<Unode>	erisco: literally everything I do on a daily basis is IO oriented.
*	CoderPuppy (~cpup@32.218.116.44) has joined
<jared-w>	Unode: although I do sympathize since I did share a lot of that frustration as well. I'm only on the Traversable chapter right now but having some solutions online really helps when I get really stuck
<monochrom>	I guess there is still a difference between "uniformly randomly chosen 40%" and "consciously chosen, therefore biasedly chosen, 40%"
<kuribas>	Unode: well, a good texbook should explain you why you cannot extract a value from an IO action.
*	jao (~jao@pdpc/supporter/professional/jao) has joined
<dumptruckman>	suggestions for the best linux option for haskell for a beginner?
<monochrom>	And Dunning-Kruger implies that virtually all conscious choices are wrong choices.
<Unode>	monochrom: sure I won't argue on that. Make that 40% biased by whatever level of frustration I was on at the time.
*	mounty has quit (Ping timeout: 255 seconds)
<lbown>	for a beginner you want something with a terminal and that is easy to install
<Tuplanolla>	Not Arch, dumptruckman.
*	davr0s has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
<dumptruckman>	I'm gonna use Mint
<erisco>	Unode, I bet it is less IO than you think
<kuribas>	Unode: a lot of IO is done with combinators, so you don't actually have to do IO :)
<Tuplanolla>	(Its GHC is broken.)
<jared-w>	monochrom: the first 40% of the book is getting you a foundation so you don't panic when you learn monads. If you just do exercises from that part, you'll have a very beginner level of knowledge (although sufficient to start on toy projects)
<Welkin>	(x)ubuntu
<bah-tum-tzz>	dumptruckman: what do you mean by "best linux option"? which distribution is recommendable? or how to install haskell-stuff?
<dumptruckman>	how to install haskell stuff
<dminuoso>	dumptruckman, whatever floats your boat. Here I use linux mint because no effort. :)
<Unode>	erisco: I don't know how to quantify that.
<lbown>	I'm using zsh on windows 10
*	davr0s (~textual@host86-157-68-250.range86-157.btcentralplus.com) has joined
<dumptruckman>	i want to use Atom for my editor
<kuribas>	Unode: by using libraries like reactive-banana, pipes, binary, etc...
*	slacko_ has quit (Ping timeout: 260 seconds)
<bah-tum-tzz>	dumptruckman: that depends on the distro. if you use linux mint, you might want to install stack with your package manager. then upgrade stack using `stack upgrade`. and then install ghc and everything with stack.
<monochrom>	dumptruckman: Does it have to be best? Does it have to be perfect? How perfect does it have to be?
<Unode>	erisco: for instance the problem I'm trying to solve now is processing a set of files with an external software, then collect all the outputs and merge them into a single file based on criteria that depend on the content of each output file.
<geekosaur>	alternately you can install haskell via hvr's Ubuntu PPAs
*	cpup has quit (Ping timeout: 246 seconds)
<erisco>	Unode, the objective of writing a program may be to send these bits to those bits, but only some parts of a program need actually deal with the reading of inputs and the writing of outputs
<dumptruckman>	i mean, i just want to be able to use ide-haskell on atom and have the repl work
<dumptruckman>	I got everything working except the repl on windows
<dumptruckman>	and i'm just giving up on that pursuit now
<monochrom>	Now there is a real question.
<Unode>	erisco: sure, I get that. But often enough I'm calling out to system so IO ends up almost everywhere.
*	jellowj has quit (Ping timeout: 276 seconds)
*	mounty (~mounty@n106-70-230-157.rdl1.qld.optusnet.com.au) has joined
*	exbio (~ri@unaffiliated/exbio) has joined
*	fizbin (~Adium@pool-96-235-144-253.cmdnnj.east.verizon.net) has joined
<monochrom>	Always question askers "does it have to be perfect?", and they will spill the beans.
<Unode>	but what do I know. It's probably all wrong since I'm writing it with poor understanding.
<monochrom>	In fact, hell, s/question/challenge/
<dumptruckman>	what do you even mean "perfect"
<dumptruckman>	or you're not talking to me
<dumptruckman>	?
<monochrom>	Yeah, I know right? What do you even mean "best"?
<n_blownapart>	hi this func needs Integral because of the use of the func odd . I added Bool to the signature thinking that was surely correct. so I guess the function is not taking a Bool but the Bool is somehow only in the scope of the case statement? https://ptpb.pw/TcWi
<kuribas>	Unode: say you want to read input, do something with it, then output it, then you can use the interact function : interact :: (String -> String) -> IO ()
<Unode>	these days I find that wget url://stack and launch that is easy enough. Just recently moved from relying on the package manager for this.
*	nakal (~nakal@port-92-201-52-160.dynamic.qsc.de) has joined
<kuribas>	Unode: you don't actually need to write any IO code, just define a function String -> String
<dumptruckman>	monochrom: i was asking for opinions on what is best, surely people have opinions on what that means
*	Welkin has quit (Quit: leaving)
*	peter_ (~peter@71.201.219.141) has joined
<Unode>	kuribas: about libraries, the framework already uses conduit so I was digging into it the other day. I sort of understand it now. But needs more practice.
<monochrom>	Then that is also my answer.
<Tuplanolla>	Correct analysis, n_blownapart.
<bah-tum-tzz>	n_blownapart: use guards instead of the case-statement
<erisco>	dumptruckman, I did not have luck keeping haskell-ide for Atom working. I would work for a bit and then break, in my experience, but I am a numpty for that sort of stuff
<n_blownapart>	thanks Tuplanolla Oh my I'm catching on. thanks bah-tum-tzz this is a book example
<erisco>	dumptruckman, I would rather keep my editor on half a screen and ghci on the other half
<lbown>	if you don't know vi you should learn it
<c_wraith>	You should at least learn how to quit vi
<lbown>	lol
<erisco>	:q!
*	merijn (~merijn@a212-238-239-156.adsl.xs4all.nl) has joined
<c_wraith>	Because if you don't know, you'll *never* guess
<Tuplanolla>	:t otherwise -- There's a nicer way to do it with guards and this, as bah-tum-tzz said, n_blownapart.
<lambdabot>	Bool
<dumptruckman>	i know vim enough to know that i don't want to learn more
<dumptruckman>	:)
*	fizbin has quit (Ping timeout: 248 seconds)
<dumptruckman>	erisco: good to know
<n_blownapart>	erisco how do you do that in xterm do you know? 
*	argent0 has quit (Ping timeout: 264 seconds)
<Unode>	kuribas: right, I understand that. My point was more that I call a lot of functions that have IO Something as output and I'm still not good with handling that.
*	nakal_ has quit (Ping timeout: 248 seconds)
<Unode>	do syntax is fine but feels like I'm bypassing the learning.
<erisco>	n_blownapart, I couldn't even tell you what xterm was
<n_blownapart>	Tuplanolla, thanks I think I could do it with guards. I'll give it a shot
<kuribas>	Unode: haskell is like a puzzle, once you understand how the pieces fall together, it becomes easy.
<n_blownapart>	erisco,  sorry I use a debian gnome terminal is it not xterm? 
<merijn>	Unode: My usual beginner recommendation is using explicit >>= and fmap until you're comfortable enough writing that way to understand how it desugars
*	revprez_cst (~revprez@pool-108-20-156-103.bstnma.fios.verizon.net) has joined
<merijn>	Unode: Also, in case you haven't read how the desugaring of do works, do that too. https://en.wikibooks.org/wiki/Haskell/do_notation
<Unode>	kuribas: for instance in this ngless software, there's an NGLessIO monad, so MonadIO. And I find myself using liftIO all the time, without actually understanding why.
<kuribas>	Unode: because NGLessIO isn't IO
<kuribas>	Unode: it's a stack that uses IO.
*	bennofs (~benno@2a00:c1a0:4300:dd00:e6a4:71ff:feb5:3f6f) has joined
<erisco>	n_blownapart, I reiterate my previous statement
<monochrom>	Sometimes abstraction means you don't "understand" a lot of things.
<kuribas>	Unode: so you have to "lift" the IO action into the NGLessIO monad.
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
<merijn>	Unode: MonadIO is a typeclass for monads that let you piggyback IO sequencing on whatever else they do. liftIO is just a convenient "turn something IO into any MonadIO" function
*	bah-tum-tzz succeeded in building a package after 2 days of compiling on a raspberry pi 3
<Unode>	kuribas: so something more like "IO (NGLessIO ...)" as opposed to "NGLess (IO ...)"?
<kuribas>	Unode: but since you said you don't know Monad Stack, it's really recommended to read a good text about it.
*	peter_ has quit (Ping timeout: 264 seconds)
<c_wraith>	Unode: liftIO is defined to be "do the minimal conversion to make this IO action work here".  Except with a more specific version of "minimal" which means it really can't do anything except make the types work.
<johnw>	monochrom: you mean, you know the answer but not the content of the answer? ;)
<c_wraith>	Unode: so..  there really isn't anything else to understand.
<monochrom>	haha
<n_blownapart>	how would you split screens in a terminal to get ghci on one side and vim on the other is what I would hope to do..
<c_wraith>	n_blownapart: depends on the terminal.
<Unode>	c_wraith: "make it work", does that mean "perform the action"?
*	mkoenig_ (~mkoenig@93.115.89.214) has joined
<monochrom>	But I don't know how to implement Data.HashSet for example. That is a kind of "not understand".
>nickserv<	identify ****
-NickServ-	You are now identified for n_blownapart.
<merijn>	n_blownapart: Get tmux if it's not already installed on your system
*	fizbin (~Adium@pool-96-235-144-253.cmdnnj.east.verizon.net) has joined
<merijn>	n_blownapart: It's a terminal multiplexer which (among other things) lets you splitscreen terminals anyway you want
<c_wraith>	Unode: are you comfortable with the idea of laws for a class?
*	xiinotulp has quit (Quit: Leaving)
<Unode>	c_wraith: more or less, yes.
<n_blownapart>	thanks merijn checking that
<erisco>	I am more of a class anarchist myself
*	asthasr has quit (Ping timeout: 255 seconds)
<bah-tum-tzz>	n_blownapart: you could also just open two terminal emulator windows, if you use Xorg or so
<monochrom>	However, I know its external guarantees about insert, delete, and lookup for example, and I can demonstrate writing correct programs using it. That is a strong kind of "understand", i.e., predictive power.
<bah-tum-tzz>	bah-tum-tzz: :D
<kuribas>	Unode: it simply means, turn a "IO a" into a "NGLessIO a"
*	asthasr (~asthasr@cpe-174-108-4-76.carolina.res.rr.com) has joined
<c_wraith>	Unode: have you looked at the laws for MonadIO?
<Unode>	c_wraith: no, not yet.
<n_blownapart>	bah-tum-tzz, I do that but I have rather large fonts on a laptop thanks
*	mkoenig has quit (Ping timeout: 276 seconds)
<c_wraith>	Unode: https://hackage.haskell.org/package/base-4.9.1.0/docs/Control-Monad-IO-Class.html
<monochrom>	And a main thesis of software engineering is that I don't want to worry about how to implement Data.HashSet.
<monochrom>	So when I "not understand" it, I'm actually doing it right.
<c_wraith>	Unode: the second law says that binding then lifting gives the same result as lifting then binding.
*	soniku has quit (Ping timeout: 248 seconds)
<kuribas>	Unode: because you cannot fit an "IO a" piece where a "NGLessIO a" piece is needed.
<c_wraith>	Unode: the only way that can possibly work is if lifting lifts the entirety of the effects.
*	ackpacket (~ackpacket@unaffiliated/ackpacket) has joined
<monochrom>	But it's against human nature.
<erisco>	alleviated from the burden of knowing one thing, monochrom is freed to know another
<monochrom>	Human nature is to be an armchair philosopher and "understand" all the fundamentals and getting nothing done.
*	slacko_ (~davi@p2E5B29BE.dip0.t-ipconnect.de) has joined
*	fizbin has quit (Ping timeout: 264 seconds)
<Unode>	c_wraith: so it's more of a wrapper rather than an alias? i.e. "MonadIO (IO ...)" as opposed to "MonadIO = IO" (where MonadIO extend functionality not present in IO)?
<monochrom>	It is like everyone wants to talk about repairing cars but no one actually drives one.
<Unode>	monochrom: that's a good phrasing of how I felt when reading the book we mentioned before. Like I was building a car from scratch.
<Unode>	And I just want to drive it.
<kuribas>	Unode: no, MonadIO is a typeclass, which means liftIO will work for many things.
*	osa1 (~omer@haskell/developer/osa1) has joined
*	Nd-69-M (~nndvc@109.72.55.120) has joined
<Unode>	kuribas: sure, I was trying to simplify the jargon there.
*	muttrat (~quassel@173-18-165-161.client.mchsi.com) has joined
<kuribas>	Unode: a typeclass is neither a wrapper or an alias.
*	cpup (~cpup@32.218.116.65) has joined
*	fizruk (~anonymous@89-178-211-68.broadband.corbina.ru) has joined
*	fizruk has quit (Client Quit)
<c_wraith>	Unode: "simplifying jargon" doesn't work.  The whole point of jargon is to be the simplest correct way to convey its meaning.
<kuribas>	Unode: NGLessIO might be a wrapper, but it doesn't have to be.  And it doesn't really matter.
*	Volt_ (~Volt_@c-68-51-145-60.hsd1.mi.comcast.net) has joined
<Unode>	c_wraith: interesting. Never thought of it like that.
<monochrom>	Unode, #haskell is a pretty sane place where people already use jargons minimally. Be assured that with more than 95% probability you can't further simplify jargons.
*	Nenadovicc has quit (Ping timeout: 246 seconds)
*	mmn80 (uid194575@gateway/web/irccloud.com/x-fcftidzjqavpyyuj) has joined
<monochrom>	(The 5% is when people start saying "thunk" and "closure"!)
<Unode>	monochrom: sometimes it's not so much simplify. It's more like finding terms to which I can link the new ones.
<geekosaur>	the point of a typeclass is to allow types to supply their own implementations of a common functionality. in this case, the MonadIO typeclass is providing the functionality "relay an IO action to an underlying IO monad and relay the result back"
<erisco>	what about monoids in the category of endofunctors?
<Unode>	closure I'm actually familiar with :)
*	CoderPuppy has quit (Ping timeout: 260 seconds)
<geekosaur>	so IO provides its implementation: instance MonadIO IO where liftIO = id
<c_wraith>	Unode: that also usually doesn't work.  The whole reason new terms are created is because the old ones don't work.
<Unode>	(not the language)
*	shafox has quit (Quit: This computer has gone to sleep)
*	acidjnk has quit (Ping timeout: 255 seconds)
<jared-w>	You could possibly find some old terms that are a fuzzy approximation; unfortunately, rather than being a fuzzy (yet accurate) approximation, they are often afuzzy approximation that lead to incorrect mental models
<kuribas>	Unode: btw, what language do you come from?
<jared-w>	like "monads are burritos"
<Unode>	kuribas: mostly Python
<monochrom>	burrito is fairly new
<monochrom>	But I guess I am the old one.
<Tuplanolla>	:t getLine :: Burrito String
<monochrom>	But before burrito there was spacesuit. From dons no less. Giants make horrible mistakes too.
<lambdabot>	Burrito String
*	fizbin (~Adium@pool-96-235-144-253.cmdnnj.east.verizon.net) has joined
<geekosaur>	wasn't the spacesuit one explicit mockery?
*	fizbin has quit (Client Quit)
<monochrom>	But I guess if Hoare got to invent null, dons got to invent spacesuit.
<monochrom>	Naw, that's not my understanding. My understanding is that burrito was an explicit mockery.
<c_wraith>	Burrito was also explicit mockery
*	Rodya_ has quit (Remote host closed the connection)
*	CoderPuppy (~cpup@32.218.116.74) has joined
<geekosaur>	I thought burrito was mockery as well but have had others insist it was proposed seriously (and then *that* was mocked)
<monochrom>	OK!
*	dispanser has quit (Ping timeout: 246 seconds)
*	shafox (~pbehera@106.51.240.179) has joined
*	cpup has quit (Ping timeout: 252 seconds)
<c_wraith>	iirc, burrito was first used in someone's (byorgey's?) blog post begging people to stop writing monad tutorials
<merijn>	I liked the SIGBOVIK paper explaining burritos via monads :p
<kuribas>	Unode: a lot of haskell stuff can be simply understood by looking at the types.
<erisco>	we should found a monad analogy competition, complete with a website and prizes
<monochrom>	In dons's infinite wisdom, he thought up the spacesuit explanation.  <--- Now this is a proposition or a mockery and you can't tell which! Take your pick! >:D
*	exbio has quit (Remote host closed the connection)
*	jeltsch has quit (Quit: jeltsch)
<Tuplanolla>	Monads are like generalized monad tutorials.
<kuribas>	Unode: often what the type tells you is all you need to know, like in the case of liftIO
<merijn>	monochrom: dons' infinite wisdom is that he spends all his time skiing and taking pictures of sunsets, rather than spend his life here on IRC ;)
<monochrom>	Tuplanolla: But how do I bind or join generalized monad tutorials?
<monochrom>	True that.
<monochrom>	Is dons at Facebook now?
<c_wraith>	yes
*	armyriad (~armyriad@gateway/vpn/privateinternetaccess/armyriad) has joined
<n_blownapart>	Tuplanolla, et al this is close I think but getting indent error? https://ptpb.pw/cxaw
<Tuplanolla>	Lifting is narration and joining is concatenation, monochrom.
<merijn>	In a completely unrelated note: conduit is pull only, yes?
<monochrom>	Need to refresh that new memory. Because I am kind of stuck with the stale state of "dons was chartered by a bank".
<erisco>	merijn, speaking of which I was about to go outside to read this paper because you guys are too distracting for me ;P
<c_wraith>	merijn: it was last time I looked, but that's the sort of thing that might change with a new major release
*	jeltsch (~wolfgang@85.253.202.166.cable.starman.ee) has joined
<Tuplanolla>	You have written nonsense, n_blownapart.
*	zblkf (~drlkf@AMontsouris-651-1-209-228.w82-123.abo.wanadoo.fr) has joined
<kuribas>	Unode: it goes like this: why cannot I use a IO String here?  Because you need a NGLessIO String here.  How can I make an NGLessIO from an IO?  By using an higher order function.  Is there one that fits the bill?  In fact there is!  liftIO :: IO a -> NGLessIO a
<geekosaur>	n_blownapart, your indent hygiene is pretty terrible there
<n_blownapart>	dang so I can't write that
<merijn>	c_wraith: damn...so what do I do when I need a push based solution? :p I could use pipes, but I already have/need a bunch of dependencies using conduit so using both conduit and pipes seems wrong :\
<n_blownapart>	but is that the only problem  ? 
<monochrom>	merijn: Is it OK to spawn a thread that converts pull to push?
*	xpo (~xpo@agc-lab3.cs.uit.no) has joined
*	mrkgnao (~mrkgnao@45.64.222.122) has left (""... must ... sleep"")
<n_blownapart>	why the hell can't I be crucify_me hexchat won't let me switch suddenly for no reason
<geekosaur>	I *think* the only thing you need to do is indent the last two lines past the 'p' on the line above them
<merijn>	monochrom: I already have a bunch of threads, so I guess
<n_blownapart>	cool trying that thanks
<monochrom>	:S
*	jellowj (~yellow-ja@dbu133.neoplus.adsl.tpnet.pl) has joined
<geekosaur>	do you have multiple connections again?
<c_wraith>	n_blownapart: you are already logged in as crucify_me from another connection.
*	sleffy has quit (Ping timeout: 240 seconds)
<zblkf>	is it possible to generate documentation for your routes in yesod with haddock ?
<kuribas>	Unode: you may say, but the type of liftIO is MonadIO m => IO a -> m a !
<c_wraith>	n_blownapart: you can use "/whois crucify_me" to get information about it
<kuribas>	Unode: since NGLessIO is an instance of MonadIO, you can substitute NGLessIO for MonadIO.
*	minn (~minn@pool-71-163-97-83.washdc.fios.verizon.net) has joined
<monochrom>	No. Substitute NGLessIO for m.
*	jao has quit (Ping timeout: 260 seconds)
<n_blownapart>	thanks
<merijn>	monochrom: Basically, I have a fork-join pipeline where I have multiple threads (using conduit) pulling from a channel. I'm feeding the channel from another conduit, however the pull setup would flood the channel with way more values than makes sense (like, keeping 10k values in a channel where I'm processing 10 at a time kinda defeats the fixed memory processing dealio
<kuribas>	monochrom: right
*	[n_blownapart] (~john@172-6-186-21.lightspeed.sntcca.sbcglobal.net): realname
*	[n_blownapart] #debian #haskell-beginners #haskell 
*	[n_blownapart] adams.freenode.net :Budapest, HU, EU
*	[n_blownapart] is using a secure connection
*	[n_blownapart] is connecting from *@172-6-186-21.lightspeed.sntcca.sbcglobal.net 172.6.186.21
*	[n_blownapart] idle 00:00:10, signon: Sun Aug 27 11:49:06
*	[n_blownapart] is logged in as n_blownapart
*	[n_blownapart] End of WHOIS list.
*	[crucify_me] (~n_blownap@128.32.176.159): n_blownapart
*	[crucify_me] rajaniemi.freenode.net :Helsinki, FI, EU
*	[crucify_me] is logged in as n_blownapart
*	[crucify_me] End of WHOIS list.
<merijn>	monochrom: I could limit the insert by putting a QSem around the insert, but with a pull setup I might be able to ditch the channel entirely
<kuribas>	Unode: substitute NGLessIO for m.  It's probably weird to think about things when coming from Python, which doesn't have static types at all.
<kuribas>	Unode: think about types
*	erisco has quit (Ping timeout: 248 seconds)
*	neoncontrails has quit (Remote host closed the connection)
*	Scip (~scip@76.121.6.102) has joined
<kuribas>	Unode: surprisingly this "meaningless" puzzling with types often gets you far.
<n_blownapart>	geekosaur, sorry not sure what's up. my work computer is asleep
<monochrom>	That's what the computer tells you when it takes on an alter ego and go out and have fun.
*	cpup (~cpup@32.218.116.89) has joined
<n_blownapart>	Tuplanolla, yes it's nonsense. how would you write that with guards?
<monochrom>	Bah, English is so hard.
<n_blownapart>	word monochrom especially when you're reading text on a conveyor belt
*	cpup- (~cpup@32.218.116.93) has joined
*	slacko_ has quit (Ping timeout: 264 seconds)
<minn>	I recently ported some lexers from flex to alex. I am noticing an order of magnitude performance difference (e.g., 1.0 versus 0.1 seconds to tokenize and print a large file that stresses the internal data structures to stdout). Profiling reveals that internal alex functions and record access/updates (using lenses) account for almost all time spent (50% of the time is spent performing alex's bind operation). Is this to be expected or
<minn>	 does this indicate that I'm doing something wrong? I'm using lazy bytestrings with monadic user state.
*	oisdk has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<Tuplanolla>	@let addOneIfOdd p | odd p = f p | otherwise = p where f p = p + 1 -- Like this, n_blownapart.
<lambdabot>	 Defined.
*	CoderPuppy has quit (Ping timeout: 246 seconds)
*	Rodya_ (~Rodya_@2601:46:4001:e0b4:869:ee18:c8fc:eb36) has joined
*	connrs (~connrs@conners.plus.com) has joined
<Tuplanolla>	(I would inline `f` though.)
<Unode>	kuribas, monochrom thanks for the help
<n_blownapart>	one sec got disconnected ..
<kuribas>	Unode: np, have fun learning!
<n_blownapart>	thanks got the code
*	CoderPuppy (~cpup@32.218.116.98) has joined
*	cpup has quit (Ping timeout: 240 seconds)
*	Rodya_ has quit (Remote host closed the connection)
*	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has joined
*	cpup- has quit (Ping timeout: 260 seconds)
*	Kreest_ has quit (Read error: Connection reset by peer)
*	cdg (~cdg@107.19.152.25) has joined
<geekosaur>	minn, I'm checking, I think there's some known issues with inlining (>>=) in ghc 8.2.1 if you are running that version
*	besenwesen is now known as groundfault
*	CoderPuppy has quit (Ping timeout: 240 seconds)
<monochrom>	Wait, was that an issue during release candidates and fixed before releasing?
*	Volt_ has quit (Quit: Volt_)
<geekosaur>	I thought someone mentioned it post-release
*	danthemyth has quit (Ping timeout: 260 seconds)
*	Volt_ (~Volt_@c-68-51-145-60.hsd1.mi.comcast.net) has joined
*	eHammarstrom (~initiumdo@31.208.64.89) has joined
*	lbown has quit (Ping timeout: 240 seconds)
<kuwze>	I am porting some code to haskell, and it makes heavy usage of inheritance for the data-structures. Is there a way to extend a record in haskell?
<geekosaur>	sigh. ghc trac is 500ing
*	cdg has quit (Ping timeout: 252 seconds)
<monochrom>	Yeah it's taking me forever too.
<merijn>	I heard it was down earlier today
<merijn>	maybe still issues?
<geekosaur>	ryantrinkle has a benchmark that is ~60x slower in 8.2.1 because bind isn't being inlind
*	herr_jth has quit ()
<c_wraith>	kuwze: there's no good analogue.  You're going to have to port what the code does, not how it works.
<kuwze>	but you can't extend records? I'm looking at vinyl hoping it can help
<merijn>	I...would not recommend using vinyl to anyone just starting Haskell
*	raichoo has quit (Ping timeout: 248 seconds)
*	TipsyMe has quit (Quit: TipsyMe)
*	shafox has quit (Quit: This computer has gone to sleep)
<minn>	geekosaur: I'm actually using ghc 8.0.2, so I shouldn't be running into issues with current versions of ghc. Thank you for checking, though :) (that seems like an odd issue).
<merijn>	minn: Obvious first question: Did you doublecheck that you compiled with -O/-O2?
<c_wraith>	kuwze: things like vinyl exist  That's why I said there's no *good* analogue.  I mean, vinyl works, but it's incredibly complicated and usually not the best approach.
*	diegoksp (~diegoksp@190.153.194.178) has joined
*	shafox (~pbehera@106.51.240.179) has joined
*	asthasr_ (~asthasr@cpe-174-108-4-76.carolina.res.rr.com) has joined
<dminuoso>	Is there a way to have ghci add explicit parens to see how an expression associates?
<kuwze>	c_wraith: thanks for making it more explicit, I keep stumbling on things hoping there's a quick fix (or a good analog)
<dminuoso>	Hoping for something along the lines of `:p foo bar` :-)
*	toby1851 (~toby@yali.mythic-beasts.com) has joined
*	kdisneur has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	Jeanne-Kamikaze has quit (Quit: Leaving)
<minn>	merijn: Yeah - I have stack configured to compile with -O2. I'm currently trying to ensure that I'm not running into issues with laziness (I hate to say this, but this is my first time trying to track down performance problems in Haskell).
*	wespiser (~wespiser@2601:197:a80:19e4:7137:8025:fb11:b683) has joined
<geekosaur>	dminuoso, as far as I know the closest you can get is -ddump-parsed
<kuwze>	c_wraith: what do you think of this tactic?: http://yi-editor.blogspot.com/2008/12/prototypes-encoding-oo-style.html
<geekosaur>	but that's nbot going to dump it as Haskell code
*	asthasr has quit (Ping timeout: 248 seconds)
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
<c_wraith>	kuwze: I think that if you don't know haskell well, you're likely to introduce infinite loops you'll have trouble debugging with that approach.
*	vjacob (~vjacob@185.145.38.234) has joined
*	peter_ (~peter@71.201.219.141) has joined
<kuwze>	c_wraith: I definitely don't know haskell well
<kuwze>	c_wraith: thanks for the advice
*	alex`` has quit (Quit: WeeChat 1.9)
<c_wraith>	kuwze: there is a simpler thing you might consider - replace the hierarchy from the original code with a record of the operations it provides.
*	Immune (~Immune@47.145.46.247) has joined
<c_wraith>	kuwze: that's the most direct translation of OO objects to Haskell.  You can create all kinds of different behaviors in values of the same type.
*	theelous3 (~theelous3@unaffiliated/theelous3) has joined
*	peter_ has quit (Ping timeout: 260 seconds)
<kuwze>	c_wraith: what do you mean by "record of the operations in provides"?
<dminuoso>	geekosaur, how do you reason about how code associates? Do you know the infixity declarations of all your operators?
<dminuoso>	Or is that a thing you just quickly check in ghci while you code?
<geekosaur>	generally, and if I dont then I can ask ghci (:i)
<dminuoso>	k :)
*	efeuska has quit (Ping timeout: 255 seconds)
<c_wraith>	kuwze: you start with the operations the type should support, then create a data type that contains the set of operations as functions.
*	Nd-69-M has quit (Ping timeout: 240 seconds)
<n_blownapart>	https://ptpb.pw/5KFu  no clue I tried to format Tup*anolla 's code differently
<n_blownapart>	getting indent errors again
*	Nd-69-M (~nndvc@109.72.55.120) has joined
<geekosaur>	that looks pretty wrong to me, if it's at top level then you do not want let, if it does require let then the type signature needs to be inside the let
<c_wraith>	kuwze: this would be easier to demonstrate with a list of functions. :)
<n_blownapart>	thanks checking that geekosaur 
<merijn>	c_wraith, kuwze: If you need an example of that, I've got one here: https://github.com/merijn/broadcast-chan/blob/master/benchmarks/Channels.hs :)
*	fizruk (~anonymous@89-178-211-68.broadband.corbina.ru) has joined
<kuwze>	c_wraith: thank you!
<c_wraith>	merijn: thanks
<kuwze>	merijn: thanks, I will look at that
<merijn>	I'm to busy to help explain, but non-abstract examples help ;)
<merijn>	Plus, it's fairly straightforward
*	justanotheruser (~justanoth@unaffiliated/justanotheruser) has joined
*	zblkf has quit (Quit: WeeChat 1.6)
*	Rodya_ (~Rodya_@2601:46:4001:e0b4:1027:8e45:aaa8:3b5b) has joined
*	Rodya_ has quit (Remote host closed the connection)
*	nshepperd has quit (Quit: WeeChat 1.9)
*	jao (~jao@pdpc/supporter/professional/jao) has joined
<bah-tum-tzz>	hackage down?
<kuwze>	merijn: thank you so much, I'm actually working on a library that consumes an event stream from a file, so broadcast-chan looks very useful
<merijn>	bah-tum-tzz: Looks like it
*	Immune has quit (Ping timeout: 240 seconds)
*	ixti (~ixti@46.red-83-43-158.dynamicip.rima-tde.net) has joined
<geekosaur>	http://auto-status.haskell.org/
<merijn>	kuwze: The current version on hackage is a bit pointless, imo. The github version is looking much better, but haven't gotten around to finishing everything up nicely to distribute it
<merijn>	Which means the entire API is completely unstable with no promises whatsoever :p
<merijn>	kuwze: probably want something like pipes/conduit for streaming from files anyway
<kuwze>	merijn: right now it will consume events from a file, but eventually it will be receiving events over the network
<kuwze>	merijn: just got to make sure it works right with historical data
<n_blownapart>	I'm just guessing geekosaur but this won't work either https://ptpb.pw/H3BR
*	takle has quit (Remote host closed the connection)
<geekosaur>	(a) that makes little sense, you are taking p as a parameter only to immediately shadow it with a lambda?
<geekosaur>	(b) guards are not part of "where"
<n_blownapart>	God I'm having a hard time. 
<geekosaur>	if you have guards inside a "where" then they would have to attach to a binding in the "where"; they cannot attach to the outer binding
*	albertus1 (~seb@x4e32df9e.dyn.telefonica.de) has joined
<geekosaur>	and then your guard, if it did scope to the definition of ff, would infinite loop if p were odd
<geekosaur>	in fact I have no idea what you're trying to accomplish there
*	dispanser (~dispanser@x590e14a6.dyn.telefonica.de) has joined
<n_blownapart>	http://lpaste.net/358015  this is the original exercise. it got thrashed . the idea was to rewrite the where statement
*	Deewiant has quit (Ping timeout: 258 seconds)
*	shafox has quit (Quit: This computer has gone to sleep)
<n_blownapart>	which I guess is just f = ( \n -> n + 1 )
<geekosaur>	... there is context missing here. "rewrite" in what way?
<n_blownapart>	using a \n notation
*	caisah has quit (Quit: My work is done here.)
<geekosaur>	f = ( \n -> n + 1 )        is correct if that's all you;r;e supposed to do. no other changes needed
<geekosaur>	if you wanted to also rewrite using guards: http://lpaste.net/358015#a2384509402573963264
*	rockfordal (~Rockforda@c-62-220-170-253.cust.bredband2.com) has joined
<n_blownapart>	geekosaur, I think I was trying to do that initially thanks alot
<n_blownapart>	I mean write it using guards.. 
*	Immune (~Immune@47.145.46.247) has joined
*	zariuq has quit (Ping timeout: 252 seconds)
*	gugah (~gugah@181.28.218.205) has joined
*	dahan (uid190916@gateway/web/irccloud.com/x-yvidkkdcdoodjlsz) has joined
*	amar_ (~amarpotgh@p5796711B.dip0.t-ipconnect.de) has joined
*	tsaka__ has quit (Ping timeout: 260 seconds)
*	amar_ is now known as Guest20166
*	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has joined
*	dispanser has quit (Ping timeout: 240 seconds)
*	takle has quit (Remote host closed the connection)
*	OnkelTem has quit (Quit: went to restart in 17.04. God bless me)
Python interface unloaded
**** ENDING LOGGING AT Sun Aug 27 13:30:12 2017

**** BEGIN LOGGING AT Mon Aug 28 11:38:40 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	jncunha (~jncunha@a89-152-161-129.cpe.netcabo.pt) has joined
*	leah2 has quit (Ping timeout: 252 seconds)
<reactormonk>	edwardk, is there a way to use hashing to speed up a on a Grouping1? Not that easy to attach a `Hashable` instance.
*	hc_ (~ircd@unaffiliated/hc) has joined
*	bobakk3r has quit (Quit: Leaving.)
*	bobakk3r (~Adium@dhcp-077-251-207-252.chello.nl) has joined
*	crissava (~crissava@2a02:2f0b:4010:aa2:a5e5:a1aa:3bb6:5bcd) has joined
*	hackagebot distributed-static 0.3.8 – Compositional, type-safe, polymorphic static values and closures – https://hackage.haskell.org/package/distributed-static
*	hackagebot codec-rpm 0.1.3 – A library for manipulating RPM files – https://hackage.haskell.org/package/codec-rpm
*	hc has quit (Ping timeout: 240 seconds)
*	jbgi has quit (Ping timeout: 252 seconds)
*	drewbert has quit (Remote host closed the connection)
*	drewbert (~drewbert@24-113-123-50.wavecable.com) has joined
*	bobakk3r has quit (Client Quit)
*	pylbrecht (~pylbrecht@2a02:8109:8a40:2f28:704:3793:833f:e990) has joined
*	lkolstad (~ljk@c-24-16-12-195.hsd1.wa.comcast.net) has joined
*	marr (~ccc@159-205-229-96.adsl.inetia.pl) has joined
*	rzp (~christoph@dslb-088-073-066-106.088.073.pools.vodafone-ip.de) has joined
*	sfcg (~sfcg@79.97.176.188) has joined
*	lamefun has quit (Quit: lamefun)
*	tomphp (~tomphp@213.205.198.209) has joined
*	dhil (~dhil@dhcp-90-078.inf.ed.ac.uk) has joined
*	zachk (~Zach@unaffiliated/zachk) has joined
<cocreature>	oh new release of distributed-static. I still need to take some time to play around with static pointers
*	Guest43 has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<jared-w>	oh neat
*	MichaelBurge (~quassel@2603:3004:620:5c00:6959:8167:213e:5d75) has joined
*	jimmyrcom (~fold@71-11-240-211.dhcp.dntn.tx.charter.com) has joined
*	jellowj (~yellow-ja@diu246.neoplus.adsl.tpnet.pl) has joined
*	lbown (~logan@131.194.165.243) has joined
*	lbown has quit (Client Quit)
*	baweaver is now known as baweaver_away
*	baweaver_away is now known as baweaver
*	skeuomorf (~skeuomorf@unaffiliated/skeuomorf) has joined
*	Guest43 (~textual@ptr-1pmiu65hlh48bocdu9y.18120a2.ip6.access.telenet.be) has joined
*	tortal (tortal@unaffiliated/tortal) has joined
*	baweaver is now known as baweaver_away
*	baweaver_away is now known as baweaver
*	baweaver is now known as baweaver_away
*	prophile has quit (Quit: The Game)
*	justanotheruser (~justanoth@unaffiliated/justanotheruser) has joined
*	tomphp has quit (Ping timeout: 248 seconds)
*	tomphp_ (~tomphp@213.205.198.209) has joined
*	dispanser has quit (Ping timeout: 276 seconds)
*	baldrick1 (~duncan@bny92-5-82-232-58-132.fbx.proxad.net) has left
*	Guest43 has quit (Client Quit)
*	ravennat (~Nat@24.117.208.46.dyn.plus.net) has joined
*	davr0s has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
*	drewbert has quit (Remote host closed the connection)
*	bsima (~bsima@138.68.63.9) has joined
*	drewbert (~drewbert@24-113-123-50.wavecable.com) has joined
*	argent0 (~aner@186.133.188.1) has joined
*	chaosmasttter has quit (Ping timeout: 252 seconds)
*	vincenzo (~hawk@host94-130-dynamic.16-87-r.retail.telecomitalia.it) has joined
*	justanotheruser has quit (Ping timeout: 252 seconds)
*	whoisxy has quit (Ping timeout: 248 seconds)
<miscyb>	hi i was here earlier trying to create a combinator for servant that would let you specify a constant query parameter
*	chaosmasttter (~chaosmast@p200300EB7BD65B91021FE2FFFE8BD789.dip0.t-ipconnect.de) has joined
<miscyb>	i'm having some trouble so here's a past of what i was doing
*	KarboniteKream (~klemen@188-230-158-178.dynamic.t-2.net) has joined
<miscyb>	http://lpaste.net/358034
<miscyb>	i'm kinda new to this advanced type stuff so if anyone could explain that error that would be awesome
*	asthasr (~asthasr@cpe-174-108-4-76.carolina.res.rr.com) has joined
*	KarboniteKream has quit (Client Quit)
*	jeltsch (~wolfgang@85.253.202.166.cable.starman.ee) has joined
*	sssilver (~sssilver@38.122.48.218) has joined
*	steeze (~steeze@63.76.231.82) has joined
*	eacameron has quit (Remote host closed the connection)
<miscyb>	the idea for that code is that you'll be able to differentiate from "route.json?action=foo" and "route.json?action=bar"
*	asthasr_ has quit (Ping timeout: 255 seconds)
*	CoderPuppy (~cpup@32.218.113.242) has joined
*	eacameron (~eacameron@2601:403:c003:ecc0:c1b4:c6:6fe1:a66e) has joined
*	sssilver has quit (Client Quit)
*	steeze has quit (Client Quit)
<remexre>	With Haskeline, is there any way to change the base monad of InputT?
<remexre>	The type of mapInputT is (m a -> m a) -> InputT m a -> InputT m a, rather than the expected (m a -> n b) -> InputT m a -> InputT n b
*	eelster has quit (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
*	tobhe (~tobhe@141.84.69.68) has joined
*	cpup has quit (Ping timeout: 240 seconds)
*	asthasr_ (~asthasr@cpe-174-108-4-76.carolina.res.rr.com) has joined
*	groundfault is now known as gehidora
*	pylbrecht has quit (Quit: Segmentation fault (core dumped))
*	leah2 (~leah@vuxu.org) has joined
*	sssilver (~sssilver@38.122.48.218) has joined
*	sssilver has quit (Client Quit)
*	rblaze has quit (Quit: Leaving.)
*	gehidora is now known as besenwesen
*	asthasr has quit (Ping timeout: 255 seconds)
*	MP2E (~cray@ip68-224-146-82.lv.lv.cox.net) has joined
*	iomotoko has quit (Quit: leaving)
*	sssilver (~sssilver@38.122.48.218) has joined
*	tobhe has quit (Ping timeout: 252 seconds)
*	rblaze (~Adium@2620:10d:c091:200::16d0) has joined
*	davr0s (~textual@host86-157-68-250.range86-157.btcentralplus.com) has joined
*	Apocalisp (~textual@172.110.61.179) has joined
*	Orion3k (~Orion3k@47-51-33-228.static.mtpk.ca.charter.com) has joined
*	tobhe (~tobhe@141.84.69.68) has joined
*	egis has quit (Quit: Leaving)
*	argent0 has quit (Ping timeout: 248 seconds)
*	cyphase (~cyphase@unaffiliated/cyphase) has joined
<ocharles>	remexre: It doesn't look possible to me
*	steeze (~steeze@63.76.231.82) has joined
<remexre>	Hmm, that's what I feared. I guess I'll make a stub function and file an issue
*	tobhe has quit (Ping timeout: 260 seconds)
*	kuribas has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
*	dispanser (~dispanser@x590e23ca.dyn.telefonica.de) has joined
*	mmn80 (uid194575@gateway/web/irccloud.com/x-ewtpnvopqpeitahe) has joined
*	prietoj has quit (Ping timeout: 240 seconds)
*	drewbert has quit (Remote host closed the connection)
*	drewbert (~drewbert@24-113-123-50.wavecable.com) has joined
*	coot____________ (~coot@188.146.171.165.nat.umts.dynamic.t-mobile.pl) has joined
*	epsilonhalbe (~epsilonha@84-113-106-42.cable.dynamic.surfer.at) has joined
*	biglama (~Day_dream@ip-188.net-82-216-175.joinville2.rev.numericable.fr) has joined
*	theelous3 has quit (Remote host closed the connection)
*	theelous3 (~theelous3@unaffiliated/theelous3) has joined
*	cdg (~cdg@65.50.0.4) has joined
*	inhortte has quit (Ping timeout: 246 seconds)
*	latro`a has quit (Read error: Connection reset by peer)
*	Psybur__ is now known as Psybur
*	cpup (~cpup@32.218.114.28) has joined
*	plutoniix (~q@node-37b.pool-125-25.dynamic.totbb.net) has joined
*	miscyb has quit (Quit: WeeChat 1.9)
*	cdg has quit (Ping timeout: 248 seconds)
*	tomphp_ has quit (Ping timeout: 240 seconds)
*	dhil has quit (Ping timeout: 240 seconds)
*	garphy`aw is now known as garphy
*	atomi has quit (Ping timeout: 240 seconds)
*	CoderPuppy has quit (Ping timeout: 248 seconds)
*	Cassiopaya (~Discovery@172.111.214.142) has joined
*	Cassiopaya has quit (Killed (Sigyn (Spam is off topic on freenode.)))
*	wedify has quit (Ping timeout: 248 seconds)
*	plutoniix has quit (Read error: Connection reset by peer)
*	dsantiag_ (~dsantiago@cpe-104-175-193-69.socal.res.rr.com) has joined
*	plutoniix (~q@node-37b.pool-125-25.dynamic.totbb.net) has joined
*	dsantiago has quit (Ping timeout: 246 seconds)
<filthy_causual2_>	miscyb: I think you need ScopedTypeVariables. Though I am not sure why it can't unify them...I would into where the class is defined too.
*	albertus1 (~seb@x55b4b8f7.dyn.telefonica.de) has joined
*	albertus1 has quit (Max SendQ exceeded)
*	tomphp (~tomphp@213.205.198.102) has joined
*	albertus1 (~seb@x55b4b8f7.dyn.telefonica.de) has joined
*	peter_ has quit (Ping timeout: 240 seconds)
*	HallaSurvivor (~HallaSurv@2601:547:501:21b2::e6c4) has joined
*	wedify (~flobberle@S01061cabc06b7d23.lb.shawcable.net) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	plutoniix (~q@node-37b.pool-125-25.dynamic.totbb.net) has joined
*	cschneid_ has quit ()
*	plutoniix has quit (Read error: Connection reset by peer)
*	KeyJoo has quit (Quit: Good luck! Have a nice Day!)
*	plutoniix (~q@node-37b.pool-125-25.dynamic.totbb.net) has joined
*	asthasr__ (~asthasr@cpe-174-108-4-76.carolina.res.rr.com) has joined
*	otulp (~otulp@144.119.45.31.customer.cdi.no) has joined
*	`^_^v has quit (Quit: Leaving)
*	cdg (~cdg@157.166.173.4) has joined
*	zariuq (~zar@0x3e2c874d.mobile.telia.dk) has joined
*	ccomb has quit (Remote host closed the connection)
*	tikhon (~user@50-1-48-198.dsl.dynamic.sonic.net) has joined
*	asthasr_ has quit (Ping timeout: 252 seconds)
<tikhon>	What's a good type for maintaining a sorted sequence of items?
*	gdog (~george@2.31.52.244) has joined
<APic>	No Idea?
*	Volt_ has quit (Quit: Volt_)
<APic>	✝ Volt_
*	ubsan has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<cocreature>	tikhon: what operations do you want to perform on that sequence?
*	plutoniix has quit (Read error: Connection reset by peer)
*	Blkt has quit (Remote host closed the connection)
<tikhon>	mostly inserting things and keeping it sorted
*	eschnett has quit (Quit: eschnett)
*	Blkt (~Blkt@2a01:4f8:200:2425::adda) has joined
*	rblaze has quit (Quit: Leaving.)
*	Blkt has quit (Read error: Connection reset by peer)
<cocreature>	do you need duplicates?
<tikhon>	yeah, I think so
<cocreature>	and why do you need it to be sorted? do you just want to be able to enumerate them in order?
*	plutoniix (~q@node-37b.pool-125-25.dynamic.totbb.net) has joined
*	Blkt (~Blkt@2a01:4f8:200:2425::adda) has joined
*	Blkt has quit (Remote host closed the connection)
<tikhon>	well, that and getting the first/last, probably
*	eelster (~textual@173-161-205-177-Philadelphia.hfc.comcastbusiness.net) has joined
*	Blkt (~Blkt@2a01:4f8:200:2425::adda) has joined
*	eelster has quit (Client Quit)
<cocreature>	sounds like you want a multiset 
<cocreature>	e.g. https://hackage.haskell.org/package/multiset-0.3.3/docs/Data-MultiSet.html
*	rblaze (~Adium@2620:10d:c091:200::3c24) has joined
*	Sampuka (~Sampuka@x1-6-24-7f-20-00-22-92.cpe.webspeed.dk) has joined
<tikhon>	oh yeah, wouldn't have thought of that
<tikhon>	thanks
*	plutoniix has quit (Read error: Connection reset by peer)
*	sssilve__ (~sssilver@38.122.48.218) has joined
*	plutoniix (~q@node-37b.pool-125-25.dynamic.totbb.net) has joined
*	db8093246 has quit (Remote host closed the connection)
*	acertain (~zcarterc@unaffiliated/fread2281) has joined
*	raichoo has quit (Ping timeout: 260 seconds)
*	baweaver_away is now known as baweaver
<lavalike>	remexre: what happens for m = IO, n != IO ?
*	numee has quit (Ping timeout: 248 seconds)
<remexre>	n would have to be MonadIO, so it gets liftIO'd?
*	`^_^v (~nycs@gw.hq.meetup.com) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
<lavalike>	where does that constraint come from?
<remexre>	InputT requires m to be MonadException, which requires MonadIO
*	sssilver has quit (Ping timeout: 252 seconds)
*	justanotheruser (~justanoth@unaffiliated/justanotheruser) has joined
<lavalike>	I see!
*	plutoniix (~q@node-37b.pool-125-25.dynamic.totbb.net) has joined
*	tomphp has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<lavalike>	controlIO has a funny type
*	BonParaAra (2e051063@gateway/web/freenode/ip.46.5.16.99) has joined
*	gdog has quit (Quit: This computer has gone to sleep)
*	osa1 (~omer@91.93.255.229) has joined
*	osa1 has quit (Changing host)
*	osa1 (~omer@haskell/developer/osa1) has joined
*	augur (~augur@noisebridge130.static.monkeybrains.net) has joined
*	oish has quit (Ping timeout: 252 seconds)
*	simukis (~simukis_@78-60-58-6.static.zebra.lt) has joined
*	dispanser has quit (Ping timeout: 246 seconds)
*	LiaoTao has quit (Quit: ZNC 1.6.4 - http://znc.in)
*	machinedgod has quit (Quit: leaving)
*	parable_ (~wersing@50-200-204-218-static.hfc.comcastbusiness.net) has left
*	CoderPuppy (~cpup@32.218.114.95) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	higs (higs@94.26.49.130) has joined
*	higs (higs@94.26.49.130) has left
*	plutoniix (~q@node-37b.pool-125-25.dynamic.totbb.net) has joined
*	prietoj (~user@host86-181-92-195.range86-181.btcentralplus.com) has joined
*	anton___ has quit (Remote host closed the connection)
*	nickolay has quit (Ping timeout: 248 seconds)
*	reactormonk has quit (Ping timeout: 240 seconds)
*	higs (higs@94.26.49.130) has joined
*	higs (higs@94.26.49.130) has left
*	chaosmasttter has quit (Quit: WeeChat 1.9)
*	trigone (56c9d193@gateway/web/freenode/ip.86.201.209.147) has joined
<trigone>	hi! do i need an extension to use Phantom types?
<tikhon>	no
<tikhon>	phantom types are a specific usecase of normal type parameters, they're not a language feature unto themselves
*	cpup has quit (Ping timeout: 248 seconds)
*	henriksod has quit (Quit: henriksod)
*	HarveyPwca has quit (Ping timeout: 240 seconds)
<trigone>	ok thx! and there's no way to use them with type synonyms, aka without having to wrap the values with data constructors?
<raynold>	ahh it's a wonderful day :D
*	plutoniix has quit (Read error: Connection reset by peer)
<johnw>	trigone: you can use them with newtype
*	LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) has joined
<tikhon>	trigone: think of type synonyms as something you can completely replace throughout your whole program
*	herr_jth has quit ()
*	prietoj has quit (Ping timeout: 248 seconds)
*	BonParaAra has quit (Quit: Page closed)
*	ecthiender (~ecthiende@unaffiliated/ecthiender) has joined
**** ENDING LOGGING AT Mon Aug 28 13:27:58 2017

**** BEGIN LOGGING AT Sat Sep  2 12:52:27 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:12 2017)
*	Channel #haskell url: http://www.haskell.org/
*	halogenandtoast has quit (Ping timeout: 248 seconds)
*	mmhat has quit (Quit: WeeChat 1.9)
*	twandy has quit (Client Quit)
*	Elish has quit (Quit: Elish)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<monochrom>	Yes, this is half of why writing a thesis is so hard, and whoever gets it done is celebrated with a party.
<monochrom>	(The other half is choosing a good problem and its scope to work on.)
*	bmeynell (~bmeynell@142-197-108-175.res.bhn.net) has joined
*	takle has quit (Ping timeout: 246 seconds)
*	crobbins (~crobbins@2600:1700:6391:1c20:e9a2:9c89:f0bb:7f7c) has joined
<[exa]>	jared-w: draw a thinkmap or a diagram and use rigorous flattening tools on that
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<Tuplanolla>	Tell a story, but keep it shallow, jared-w.
<jared-w>	oooh, that's a good idea [exa]
*	a3Dman has quit (Ping timeout: 240 seconds)
<Tuplanolla>	See `texdoc tikz` or `texdoc beamer` for examples, jared-w.
*	xft0 (~Anonymous@user-94-254-235-116.play-internet.pl) has joined
*	xft0 has quit (Read error: Connection reset by peer)
*	twandy has quit (Client Quit)
*	fiddlerwoaroof (~fiddlerwo@unaffiliated/fiddlerwoaroof) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	hazyPurple (~hazyPurpl@14.140.110.205) has joined
*	crobbins has quit (Ping timeout: 246 seconds)
*	hazyPurple has quit (Max SendQ exceeded)
*	hazyPurple (~hazyPurpl@14.140.110.205) has joined
*	Yuuri (5d6dc562@gateway/web/freenode/ip.93.109.197.98) has joined
*	danza has quit (Quit: Leaving)
*	OnkelTem has quit (Ping timeout: 240 seconds)
*	nsnth (adefe863@gateway/web/freenode/ip.173.239.232.99) has joined
*	a3Dman (~3Dman@156.222.119.66) has joined
*	a3Dman has quit (Changing host)
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
<Yuuri>	Is aeson a library of choice for JSON parsing? Are there reasons to prefer any other?
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	hackagebot mbtiles 0.6.0.0 – Haskell MBTiles client. – https://hackage.haskell.org/package/mbtiles
*	sfcg (~sfcg@79.97.176.188) has joined
*	biglama has quit (Ping timeout: 248 seconds)
*	takle (~takle@host86-166-243-7.range86-166.btcentralplus.com) has joined
<jared-w>	Tuplanolla: I'll check those out, thanks :)
*	AndreasK has quit (Ping timeout: 248 seconds)
<epta>	is there any way to add all library deps as a test deps automatically (except hpack)?
*	sfcg has quit (Remote host closed the connection)
*	sfcg (~sfcg@79.97.176.188) has joined
<monochrom>	Yuuri: I use aeson. I don't know there are others.
*	zachk (~Zach@unaffiliated/zachk) has joined
*	sfcg has quit (Read error: Connection reset by peer)
*	biglama (~Day_dream@ip-188.net-82-216-175.joinville2.rev.numericable.fr) has joined
*	sfcg (~sfcg@79.97.176.188) has joined
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	drdo (~drdo@overlord0.drdo.eu) has left
*	a3Dman has quit (Ping timeout: 240 seconds)
*	drdo (~drdo@overlord0.drdo.eu) has joined
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<cocreature>	there are some other libs but aeson is by far the most popular one
*	systemfault has quit (Quit: Bye!)
<Limeth_>	Any easy way to run `stack ghci` with "syntax highlighting"? Like some sort of colored mode?
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	al-damiri (uid142631@gateway/web/irccloud.com/x-vbnqwkpbqmrgxtrt) has joined
*	pellenation has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	Denthir (~textual@128-76-242-152-cable.dk.customer.tdc.net) has joined
*	sfcg has quit (Remote host closed the connection)
<jared-w>	syntax highlighting? In GHCi?
*	Mutter (~Mutter@2601:647:cb02:72b0:44b6:acec:2daf:6146) has joined
*	marvin2 (~m@cpe-188-129-60-232.dynamic.amis.hr) has joined
<jared-w>	There's ghci --color
<Limeth_>	Something like this: https://camo.githubusercontent.com/7ba745679887b0192bb52045e2eca1f4b3377c77/68747470733a2f2f7261772e6769746875622e636f6d2f72687973642f676863692d636f6c6f722f6d61737465722f6361702e6a7067
*	kolko has quit (Read error: Connection reset by peer)
*	Associat0r (~Associat0@31-151-60-131.dynamic.upc.nl) has joined
*	Associat0r has quit (Changing host)
*	Associat0r (~Associat0@unaffiliated/associat0r) has joined
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	twandy has quit (Client Quit)
<epta>	jared-w: any way to pass it to 'cabal new-repl'?
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	fendoer has quit (Ping timeout: 248 seconds)
*	kolko (~kolko@ppp109-252-90-39.pppoe.spdop.ru) has joined
<cocreature>	jared-w: are you sure that’s a thing? doesn’t seem to work for me
*	terrorjack has quit (Quit: Connection closed for inactivity)
<jared-w>	oh whoops, I was reading the wiki page wrong
*	przemkovv has quit (Read error: Connection reset by peer)
<Limeth_>	jared-w: It outputs 'ghc: unrecognised flag: --color' when I run `ghci --color`
<cocreature>	jared-w: for a short moment I was very exited :)
*	conal (~conal@185.169.255.8) has joined
<Limeth_>	Yeah, I was reading the same thing :D
*	przemkovv (~przemkovv@gandalf.kari.put.poznan.pl) has joined
<jared-w>	my apologies lol. I was also excited
*	bmeynell has quit (Remote host closed the connection)
<geekosaur>	I think there's a hack to pipe ghci output through hscolour, but that's it
<Tuplanolla>	It breaks a lot.
<jared-w>	https://github.com/rhysd/ghci-color  there's this which implements the 'sed' hackery that's mentioned in the wiki
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
*	sfcg (~sfcg@79.97.176.188) has joined
*	julienchurch (~jules@70.44.247.125.res-cmts.tnk.ptd.net) has joined
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<Limeth_>	I've found this, which uses hscolour, but the post is from 4 years ago. https://www.reddit.com/r/haskell/comments/144biy/pretty_output_in_ghci_howto_in_comments/
*	lambdaGrp (~lambdaGrp@249.74.192.178.dynamic.wline.res.cust.swisscom.ch) has joined
<jared-w>	That's the one that breaks a lot :)
*	bigdaddytank (~bigdaddyt@47.187.79.33) has joined
*	bigos (~jacek@cpc103102-ward12-2-0-cust346.10-2.cable.virginm.net) has joined
<Limeth_>	I'll give 'ghci-color' a try, then
*	cloudhead (~cloudhead@ip5f5bd3e7.dynamic.kabel-deutschland.de) has joined
*	tabemann (~tabemann@172-13-49-137.lightspeed.milwwi.sbcglobal.net) has joined
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	julienchurch has quit (Client Quit)
*	L8 (~Michael@unaffiliated/misha123) has joined
*	twandy has quit (Client Quit)
<L8>	hey guys, question: how can I pattern match a record of a specific value? for example, having: "data Car = Car { name :: String }"; I want to return a value when I'm calling my function with Car "Tesla"
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	ashpokemonZ has quit (Quit: Leaving)
<L8>	so that my function (someFunc :: Car -> Bool), will do: someFunc Car("Tesla") = True
*	conal_ (~conal@client-7-151.visitor-network.oxuni.org.uk) has joined
*	jellowj has quit (Ping timeout: 240 seconds)
*	twandy has quit (Client Quit)
<geekosaur>	you can match it positionally like a non-record: someFunc (Car "Tesla") = ...
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	conal has quit (Ping timeout: 248 seconds)
<geekosaur>	or do the same with field selection sntax: someFunc (Car {name = "Tesla"}) = ...
<geekosaur>	te positional form requires you have fields in the same order as declared; record syntax can be in any order
*	bbear (~david@212-198-113-54.rev.numericable.fr) has joined
<L8>	geekosaur, right, thanks!
<L8>	I did the same thing initially but GHC complained about redundant pattern matching
<L8>	I was thinking that maybe he's ignoring concrete values, but looking again I actually had redundent definitions
<L8>	silly me.
*	jellowj (~yellow-ja@dak100.neoplus.adsl.tpnet.pl) has joined
*	Yuuri has quit (Ping timeout: 260 seconds)
*	CoderPuppy (~cpup@32.218.119.57) has joined
*	beerdrop has quit (Ping timeout: 260 seconds)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	cpup has quit (Ping timeout: 260 seconds)
*	vjacob has quit (Ping timeout: 260 seconds)
<thoughtpolice>	L8: For the record, you can even be super fancy if you want: `someFunc car@(Car {}) | name car == "Tesla" = ...`
*	a3Dman has quit (Ping timeout: 240 seconds)
<thoughtpolice>	I'm weird, but I like this style. It's also more convenient IMO if you want to check multiple things (for example, if you wanted to check cost, you could change the clause to `| name car == "Tesla", cost car < 50000 = ...`, etc)
*	twandy has quit (Client Quit)
*	falafel has quit (Ping timeout: 264 seconds)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<L8>	thoughtpolice, for my case I just want to apply some "sample data", so my actual function is called "getState" and for a given x and y it returns a boolean
<thoughtpolice>	The empty `{}` syntax also means that the pattern match is independent of the number of arguments to the constructor; e.g. if you add another argument to `Car`, the match still works as expected.
<L8>	and thanks for the alternative! :)
*	slomo has quit (Read error: Connection reset by peer)
*	kuwze has quit (Quit: Page closed)
*	ejay (~edwin@public-gprs358837.centertel.pl) has joined
<mac10688>	http://lpaste.net/358168
*	jellowj has quit (Ping timeout: 246 seconds)
<mac10688>	anyone know how to make the buildItemArmor function simpler?
<thoughtpolice>	L8: Right, there are many, many ways to pattern match in Haskell, so you can pick and choose. Most of those features work in any place a pattern match occurs, too.
*	revtintin has quit (Ping timeout: 246 seconds)
*	otto_s_ has quit (Remote host closed the connection)
*	ertes has quit (Ping timeout: 248 seconds)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<thoughtpolice>	So you can also do `case x of { Foo a b | a == 10 -> ...; Foo a b -> ...; _ -> ... }` by using `|` on the case clause. Or you can use it with `let` too, like `let x | b == True = ...`, etc
*	lambdaGrp has quit (Quit: leaving)
*	anton__ has quit (Remote host closed the connection)
<thoughtpolice>	So practically any place you can do a pattern match, you can add a guard, @ patterns, etc. If you keep this in mind you can keep some code pretty clean, especially with -XPatternSynonyms.
*	conal (~conal@185.169.255.8) has joined
<thoughtpolice>	It's especially useful with `case`, IMO.
*	systemfault (~rcyr@unaffiliated/rcyr) has joined
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	conal_ has quit (Ping timeout: 240 seconds)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	eschnett has quit (Quit: eschnett)
<edwardk>	monochrom: the price was for 15 minutes actually
*	hexfive has quit (Quit: WeeChat 1.9)
<monochrom>	Oh haha
*	vjacob (~vjacob@185.145.38.234) has joined
*	twandy has quit (Client Quit)
*	yqt has quit (Quit: KVIrc 4.0.4 Insomnia http://www.kvirc.net/)
<edwardk>	monochrom: I wanted to make sure that if someone had an urgent haskell question they could always get an answer
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<edwardk>	As a sort of support backstop
<monochrom>	What is that URL again where you have your coding/coaching rate?
<edwardk>	I since dropped it
*	peterbecich has quit (Ping timeout: 260 seconds)
<monochrom>	booo...
<edwardk>	It was getting too many false positives
<edwardk>	And I never actually charged any of the folks who asked me questions
<monochrom>	Wait, false positives? People enquired you for PHP help or something?
<edwardk>	The meta discussion was more noise than the discussion
*	a3Dman has quit (Ping timeout: 240 seconds)
*	dx_m (~dx_m@105.155.73.175) has joined
<crucify_me>	hi I have an error on the last line here. not sure what's going on: https://ptpb.pw/ztjA
*	twandy has quit (Client Quit)
*	jellowj (~yellow-ja@dak100.neoplus.adsl.tpnet.pl) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	metaporia (~aporia@2601:647:cb02:72b0:6c78:a5bc:d32b:e91e) has joined
*	bigdaddytank has quit (Quit: Peace out!)
<Limeth_>	Done customizing my Haskell REPL: https://i.imgur.com/MRnITWO.png
<monochrom>	crucify_me: It looks like it should be palbool :: Bool -> String
<crucify_me>	thanks! checking that
*	peterbecich (~peterbeci@71-84-251-238.static.lsan.ca.charter.com) has joined
*	maxvaillancourt1 (~maxvailla@gateway/vpn/privateinternetaccess/maxvaillancourt1) has joined
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<c_wraith>	crucify_me: I suspect that code isn't what you want at all.
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
<c_wraith>	crucify_me: as it stands, you might as well replace palbool with const "no"
<edwardk>	Managed to get the relative map stuff to work on the flight out here, now I just need to finish up some convenience relative Foldable stuff so I can have nice show/eq/ord for relative containers
<monochrom>	There is also that.
<edwardk>	Also managed to finish up my relative catenable lists
<c_wraith>	edwardk: at the risk of falling into the rabbit hole, got a reference for relative data structures?
*	dh has quit (Ping timeout: 240 seconds)
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	bigos has quit (Remote host closed the connection)
*	acertain (~acertain@unaffiliated/fread2281) has joined
<edwardk>	c_wraith: github.com/ekmet/coda the Coda.Relative.Delta  and Class
*	twandy has quit (Client Quit)
<edwardk>	Data structures where I can act on them "slowly" with a particular monoid
<c_wraith>	For anyone following that link, edwardk can't spell his own name correctly.
<edwardk>	In this case the monoid is the # of chars
<c_wraith>	I would tease him for that, but I have similar problems. :)
<edwardk>	Hah on a phone
*	SynOps has quit ()
*	smibarber (~smibarber@185.103.96.151) has joined
<edwardk>	Anyways the classes in there extend the concept in various ways so that I can say relocate all the keys and values in a map in O(1)
<edwardk>	Which is key to the project in that folder
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	Mutter has quit (Quit: Mutter: www.mutterirc.com)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<crucify_me>	thanks that compiles mono*chrom . but I thought compositions are read from left to right 
*	Rodya_ (~Rodya_@2601:46:4001:e0b4:e54b:d09d:1247:16a8) has joined
<monochrom>	I wouldn't hardcode myself to always reading left-to-right or always reading right-to-left. It depends on the purpose of reading.
<epta>	http://lpaste.net/raw/4724907489563246592 is there any way to do that except standalone deriving declarations?
*	dh (dh@bsd.ee) has joined
*	a3Dman has quit (Ping timeout: 240 seconds)
*	hackagebot Villefort 0.1.1.11, google-static-maps 0.5.0.1, grammatical-parsers 0.2, servant-purescript 0.8.0.1, … and 1 more
*	hackagebot  → https://hackage.haskell.org/packages/recent
<edwardk>	c_wraith basically rel can be used to move whole containers of errors, token sequences, parse trees, etc around
<c_wraith>	epta: Well, technically, you could write the instance yourself.  But I don't think that's what you mean.
*	hazyPurple has quit (Ping timeout: 246 seconds)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<c_wraith>	epta: StandaloneDeriving allows you to specify constraints.  That's why it will work there.
*	mkali has quit (Quit: mkali)
*	MP2E (~cray@ip68-224-146-82.lv.lv.cox.net) has joined
<edwardk>	To let it relocate map keys you need x < y implies rel d x < rel d y. But this is a really common property
*	dx_m (~dx_m@105.155.73.175) has left
*	dkov has quit (Quit: dkov)
<edwardk>	So I have classes in there for if rel distributes over the monoid, is monotone, etc
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	lkolstad has quit (Ping timeout: 248 seconds)
<c_wraith>	Yeah, I see what's going on.  It's one of those things that seems obvious in retrospect
*	jmcarthur (~jmcarthur@2601:86:100:1620:11f3:5a14:fc98:ceb1) has joined
<edwardk>	Coda.Syntax.Line has machinery for converting to a more traditional line/col
*	beerdrop (~beerdrop@c-107-2-115-62.hsd1.mn.comcast.net) has joined
*	sellout- (~Adium@24-111-131-35-static.midco.net) has joined
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	artem (~artyom@campus.ifmo.ru) has joined
*	metaporia has quit (Quit: WeeChat 1.7)
<artem>	what's the idiomatic way of appending one element to the end of array?
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	metaporia (~aporia@2601:647:cb02:72b0:6c78:a5bc:d32b:e91e) has joined
<edwardk>	i'm currently using # of utf-16 codepoints rather than line/col because it is a bit more compact internally to be able to annotate a syntax tree with just an extra int here and there and because it gives me a full abelian group rather than just a monoid for merging partial positions
<edwardk>	er code units
<ski>	artem : the idiomatic way would be to not do that
<glguy>	artem: The idiomatic solution would probably be to pick a different type
<edwardk>	c_wraith: the cost of it is you never really want to do all the usual functory things to your containers.. because they'd be too slow anyways
<ski>	artem : if by "array" you mean "list", then one option may be adding to the front instead. and then perhaps, once finally, do a reverse
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<artem>	by array i mean Data.Array
<c_wraith>	Array is a terrible structure to add to
*	drewbert has quit (Remote host closed the connection)
*	drewbert (~drewbert@24-113-123-50.wavecable.com) has joined
<artem>	okay, what would be a good structure for O(1) index access
<edwardk>	TIL people still use Data.Array
<artem>	i'm learning
<edwardk>	artem: you want O(1) access and cheap cons? can't have it
<edwardk>	you can have log time access and O(1) cons
*	alx741_ (~alx741@190.152.59.132) has joined
<crucify_me>	monochrom, pardon, as it stands, how can I be sure all 3 functions are utilized?  https://ptpb.pw/O4iW
<edwardk>	Data.Sequence offers O(1) cons and log time access
<edwardk>	and log time append
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<ski>	edwardk : i occasionally use immutable arrays for dynamic programming (at least when there's not an easy pattern of only needing to remember some items, like the last `n' ones)
*	alx741 has quit (Ping timeout: 252 seconds)
<monochrom>	I don't understand the question. Apart from: If you use palBool, it will use pal' and boolToString. Done.
<edwardk>	the problem is in a functional setting you don't have enough time to build the structure between conses.
*	a3Dman has quit (Ping timeout: 240 seconds)
<crucify_me>	palbool doesn't take an argument. sorry, confused here
<monochrom>	That is true and false depending on what you mean.
<crucify_me>	sorry , how to call the function on "asisa"
<monochrom>	The code doesn't show a parameter. But when you use it you can provide one. It won't hate you.
*	isidore (~isidore@ACaen-651-1-97-249.w81-48.abo.wanadoo.fr) has joined
<monochrom>	The parameter has type Bool. Use True or False.
*	nickolay has quit (Ping timeout: 240 seconds)
<edwardk>	ski: I often use a dynamization scheme like this one where the 'a's might be array types and the like. https://www.irccloud.com/pastebin/VeOv5tnH/Dyn.hs
*	infinity0_ (~infinity0@occupy.ecodis.net) has joined
*	infinity0_ has quit (Changing host)
*	infinity0_ (~infinity0@freenet/developer/infinity0) has joined
*	infinity0 has quit (Killed (card.freenode.net (Nickname regained by services)))
*	infinity0_ is now known as infinity0
<monochrom>	It's Bool -> String, not String -> ???.
*	conal has quit (Ping timeout: 252 seconds)
<jared-w>	monochrom: earlier on I showed how to split pal' into a palindrome and boolToString function and accidentally wrote `palbool = palindrome . boolToString` instead of the other way around. I think that's where most of the confusion comes from so far...
*	twandy has quit (Client Quit)
<edwardk>	to take a container type that is a monoid that has some form of query that is a monoid homomorphism and turn a static structure that has a linear mappend into one with a log time slower query and log time mappend on an amortized basis
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<monochrom>	The problem is that "boolToString . pal' " is a type error.
*	StoneToad has quit (Ping timeout: 240 seconds)
<L8>	http://lpaste.net/358170
*	lkolstad (~ljk@c-24-16-12-195.hsd1.wa.comcast.net) has joined
<jared-w>	monochrom: yeah the first time I wrote this out I typed pal' twice, but meant two different palindrome functions in my head. I didn't convey all of that as cleanly as I should have, apparently :p
<monochrom>	But perhaps palindrome has the correct type for boolToString.palindrome to make sense.
<c_wraith>	crucify_me: I think the real problem is that pal' should not be duplicating the logic of boolToString.  I think it should have the type String -> Bool
<L8>	I'm missing something, but my function returns True / False only considering the first element for some reason
*	chaosmasttter has quit (Ping timeout: 246 seconds)
<crucify_me>	I thought that duplication would cause it not to compile at first, but it did. so I'm lost right now c_wraith et al
<monochrom>	This is why programming is so hard.
<crucify_me>	bloody hard
*	Rodya_ has quit (Remote host closed the connection)
*	twandy has quit (Client Quit)
<L8>	nvm, understood my mistake:)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<jared-w>	L8: what was it? 
<c_wraith>	L8: did you want any instead of all?
<L8>	indeed
<monochrom>	If it doesn't type-check, you're back to square 1. If it gives the wrong answer, you're back to square 1. If it doesn't give any answer at all after an hour, you're back to square 1. On every slightest pretext it sends you back to square 1.
*	kuwze (ad4c64cb@gateway/web/freenode/ip.173.76.100.203) has joined
<crucify_me>	so just looking at that, the 2 logic statements appear that it would be tripped up
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
<jared-w>	L8: you can also write 'isOccupied x xs = all (/= x) xs` which is the same as `isOccupied x = all (/= x)`
*	ashirase (~ashirase@gateway/vpn/privateinternetaccess/ashirase) has joined
<jared-w>	(or, rather, 'any' since that's the function you actually wanted)
<L8>	jared-w, cool!
*	juliaan (82f5c012@gateway/web/freenode/ip.130.245.192.18) has joined
*	StoneToad (~StoneToad@ppp-199-167-119-201.storm.ca) has joined
*	quobo (uid178934@gateway/web/irccloud.com/x-krjlseswfuugcdon) has joined
<L8>	there's so much syntax tricks I need to remember
<L8>	I'll get that eventually
<jared-w>	There's two separate syntax "tricks" there, both related concepts
<L8>	but the reason I started writing this because I'm also adding case of clause over the lamba
*	maxvaillancourt1 has quit (Ping timeout: 240 seconds)
*	lkolstad has quit (Ping timeout: 248 seconds)
<jared-w>	The first trick is a slice, related to the concept of partial application
<jared-w>	:t (+2)
<lambdabot>	Num a => a -> a
<jared-w>	:t (/= 3)
<lambdabot>	(Num a, Eq a) => a -> Bool
*	Rodya_ (~Rodya_@2601:46:4001:e0b4:88d0:5ff6:2861:2d1) has joined
<crucify_me>	no doesn't pal' need to return a Bool ?
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<jared-w>	(+2) is a function taking one argument and returning that argument +2. /= 3 takes one argument and returns whether or not it's not-equal, etc.
<crucify_me>	it returns a "yes" or "no"
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
*	coot____________ has quit (Remote host closed the connection)
<jared-w>	The second trick is eta reduction, again related to partial application.
*	sfcg has quit (Remote host closed the connection)
*	coot____________ (~coot@188.146.163.201.nat.umts.dynamic.t-mobile.pl) has joined
<L8>	jared-w, http://lpaste.net/358170
<L8>	any nicer way doing that?
*	ejay has quit (Remote host closed the connection)
<jared-w>	there's lambda-case to make things slightly prettier
*	coot____________ has quit (Client Quit)
*	JULIAAN_ (82f5c012@gateway/web/freenode/ip.130.245.192.18) has joined
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<L8>	jared-w, I saw that here: https://downloads.haskell.org/~ghc/7.6.2/docs/html/users_guide/syntax-extns.html
*	JULIAAN_ has quit (Client Quit)
<L8>	but it says that I need to set the XLambdaCase flag explicitly
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
<L8>	this feature enabled by default?
<jared-w>	You need to use a pragma for LambdaCase
<jared-w>	Not really worth it in most cases, fo rme
<L8>	then I'll stick with this :)
*	lkolstad (~ljk@c-24-16-12-195.hsd1.wa.comcast.net) has joined
*	Rodya_ has quit (Remote host closed the connection)
<jared-w>	What's much cleaner is to just indent the case statement. Lambda functions can be multiline
<jared-w>	(refresh your lpaste; I edited it)
<L8>	jared-w, agree
<L8>	added another small change
<L8>	state => _
Python interface unloaded
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Sat Sep  2 14:37:37 2017

**** BEGIN LOGGING AT Sat Sep  2 17:28:34 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:46:51 2017)
*	Channel #haskell url: http://www.haskell.org/
<trigone>	yeah i'll most certainly watch it :)
<edwardk>	trigone: at the end? it depends on the particular stack of effects i want. i may pick out a concrete monad transformer stack. i may write my own hairy instance if i want part of my state to backtrack and the other to not
<trigone>	ok :)
<edwardk>	i care about the mtl classes. i almost don't care about the basic _instances_
*	hackagebot nested-routes 8.0.1 – Declarative, compositional Wai responses – https://hackage.haskell.org/package/nested-routes
<trigone>	edwardk: the interpreter design is also focused on things like aspect-oriented (se and mocking. that's not really intrinsically implied by mtl, is it?
<edwardk>	i'm not above writing instances of the existing classes for my own problems to make the code clearer or faster: https://github.com/ekmett/ermine/blob/master/src/Ermine/Unification/Sharing.hs#L118
*	twandy has quit (Client Quit)
<ignamv>	is there an easy way to extract a Right value in the repl?
*	wotanold has quit (Ping timeout: 260 seconds)
<trigone>	*aspect oriented (separating concerns)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	peterbecich has quit (Ping timeout: 260 seconds)
<jared-w>	ignamv: easier than pattern matching?
<ski>	ignamv : `let Right x = ...' ?
*	Rodya_ (~Rodya_@2601:46:4001:e0b4:197f:1da3:9fd2:99df) has joined
<edwardk>	trigone: i generally 'mock' using an mtl style. make up classes for how to say, open/close files, etc. make a base instance for IO that i actually use in the code, then my test suite can make up local instances for mock testing or that build some free structure i can inspect
<ignamv>	ahh thanks
*	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has joined
<trigone>	ski:  don't you need parentheses around the pattern?
*	vjacob has quit (Ping timeout: 260 seconds)
<ignamv>	never really pattern match on let, thanks
*	Mutter (~Mutter@2601:647:cb02:72b0:44b6:acec:2daf:6146) has joined
<trigone>	edwardk: yeah :) well that's exactly what i was talking about :) cool
*	marr has quit (Ping timeout: 246 seconds)
<edwardk>	in practice i try to keep the bits of evil mutation stuff small enough that i don't have to do that often, but meh
*	cobreadmonster (uid150434@haskell/developer/breadmonster) has joined
<ski>	trigone : nope why would you ?
<trigone>	edwardk: what about aspect oriented? do you do that kind of thing? like say, logging aspect put at one place only versus logging all around the place in every atomic operation of the program
<ski>	ignamv : in the interactor, in this case
<trigone>	ski: oh well i thought it was required
*	twandy has quit (Client Quit)
<ski>	not at all
<trigone>	> let Right x = pure "a" in x
<lambdabot>	 "a"
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<trigone>	ha lol everyday something new to learn
*	Mutter has quit (Client Quit)
<trigone>	ski: is it only necessary for infix operators? like list cons?
<edwardk>	my personal opinion is that AOP itself was sort of a dead-end. it tried super-hard to separate concerns and failed. your logging and locks often interact in non-trivial ways so applying AOP to the problem in an imperative setting leads to a mess of conflicting layers. even scala gave up on using mixins for concurrency for their maps and the like
<jared-w>	AOP? == aspect oriented programming?
<trigone>	edwardk: hm maybe
<edwardk>	your mileage may vary
<edwardk>	jared-w: yeah
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Sat Sep  2 17:36:14 2017

**** BEGIN LOGGING AT Sat Sep  2 17:40:21 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<ski>	trigone : "what about case of? same deal, no need for parens?" -- yep
<trigone>	edwardk: i agree. the worst is it makes haskell look a bit like pearl :P or bash
<trigone>	no wonder lots of people think haskell is also read-only
<ski>	jared-w : except in the lisps, every bracket is sacred, every bracket counts
<trigone>	ski: ok thx
<edwardk>	the mess with | is that it interacts badly with existing list comprehension syntax, etc.
*	twandy has quit (Client Quit)
*	amar_ (~amarpotgh@p579678CD.dip0.t-ipconnect.de) has joined
<trigone>	ski: lol
<edwardk>	| is already stolen for more important work and so isn't available.
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	amar_ is now known as Guest92514
<edwardk>	it'd pair nicely with lens's (and now base's) use of &
<trigone>	edwardk: hm well we could systematically replace $ by | and vice versa... since `|` is much rarely used
<trigone>	*could have 
<crucify_me>	hi anyone know what this vim setting would do ?   ' let g:haskell_indent_disable = 1 '
<edwardk>	trigone: | for pattern syntax is used a _lot_
<edwardk>	foo x | x < 12 = ...
*	epsilonhalbe has quit (Quit: Leaving.)
<trigone>	edwardk: well yeah but if you use $ to me it's not too bad in that position, esp when it starts the line... but then tha's a bikeshed issue
<edwardk>	$ became an element of haskell style much later
<trigone>	edwardk: oh really i didn't know
<trigone>	did they use parens instead?
*	ski uses `$' sparingly, often preferring e.g. `(f . g . h) (...)'
<edwardk>	when i joined cale was still exhorting folks to pointfree everything f $ g $ h i    to f . g $ h i then see if you can scrub it out of your code.
<edwardk>	i think cale doesn't like $
*	twandy has quit (Client Quit)
<trigone>	ski: well very often me too i kinda avoid it unless it's like calling for a lambda or something. i think it's mostly because i don't read well the symbol (and i don't dare using a custom alternative symbol for fear of never being understood)
<ski>	if i could use `\',`do',`let',`if',`case' to start the last argument in an application, most of my remaining `$'s would be gone
<Cale>	I like $ I just don't like the right-associativity of $
<jared-w>	Yet another reason to hate list comprehension syntax!
<edwardk>	given my early attempts to hire him back in the day i think that must be the case , actually ;)
*	DTZUZO has quit (Ping timeout: 248 seconds)
<edwardk>	Cale: agreed
*	vjacob (~vjacob@185.145.38.234) has joined
<trigone>	ski: there's a great proposal for that, me too i hope it gets into haskell as normal syntax
<edwardk>	right associativity of $ and $! bother me
<crucify_me>	what about the <- which is a 'stylized epsilon' that is nice to read, no?
<edwardk>	foo $! arg1 $! arg2 with more stuff $! whatever
*	Guest92514 has quit (Ping timeout: 240 seconds)
<edwardk>	would be awesome
<ski>	yep
*	jedws has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<Cale>	If it were left-associative then 1) we could remove more parens from code (whether this is a good thing or not to-be-determined), and 2) it would be much easier to use along with left-associative $! to strictly apply specific arguments
<Cale>	yes
<Cale>	haha
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	rudol has quit (Ping timeout: 260 seconds)
<ski>	jared-w : list comprehensions ?
<jared-w>	!|>  <|!  <.  .>  <.!  !.>  
<jared-w>	ski: their usage of | annoys me
<ski>	oh
<ski>	TH quasiquotations, then ?
<edwardk>	that said, we switched assocativities of $ in ermine and it always screwed us up.
<jared-w>	ski: their general existance annoys me but the usage of | also annoys me :p
<ignamv>	oh man
<trigone>	edwardk: i'm not sure to follow... i thought $ was right-assoc for a reason
<ignamv>	I should make a vim plugin that adds parentheses to an expression
<Cale>	trigone: It is, but it's kind of a bad reason
<jared-w>	edwardk: Do you not like symbols like |>  ?
*	twandy has quit (Client Quit)
*	pavonia has quit (Quit: Bye!)
<jared-w>	trigone: much bike shedding, weeping and gnashing of teeth were wasted over that reason :p
<edwardk>	trigone: f $ g $ h = f . g $ h  -- so you an flip the associativity of $ as you never need it on the right of another $  then you get the semantics i sketched
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<jared-w>	ignamv: check out surround.vim
*	mizu_no_oto_work (~textual@c-24-60-15-130.hsd1.ma.comcast.net) has joined
*	danthemyth has quit (Remote host closed the connection)
<edwardk>	jared-w: |> doesn't play nice with haskell's alternative class. <|> has a different connotation
<trigone>	edwardk: hm
<ignamv>	jared-w: thanks, that's quite useful
*	DTZUZO (~DTZUZO@S0106bcd16584b0aa.vs.shawcable.net) has joined
<crucify_me>	as in biblical gnashing of teeth.?
<edwardk>	so i expect |> to be something like m a -> a -> m a
<edwardk>	filling in a default
<jared-w>	crucify_me: yes lol
<Cale>	If $ were left associative, then we could replace f (g x y) (h z) with f $ g x y $ h z
<ignamv>	but I was thinking take a line and explain how it will be evaluated using parens
<trigone>	edwardk: there's (&) which is the same as |>
<trigone>	:t (&)
<lambdabot>	a -> (a -> b) -> b
<edwardk>	trigone: yeah. i wrote it =P
<jared-w>	edwardk: That's quite true. I suppose I'm really meaning the unicode triangles rather than |>
<trigone>	i meant jared
*	helmet33 has quit (Quit: Leaving)
<ignamv>	good night
<jared-w>	trigone: I'm aware of it, but & is just as ugly of an operator as $ :p
<crucify_me>	brutal heat wave in california usa
<Cale>	jared-w: How so?
*	theelous3_ has quit (Ping timeout: 240 seconds)
<trigone>	edwardk: ah ok ^^ well to be fair i must admit i don't really like it much better than `$` (but then all the good symbols are already taken, like / or > ...)
*	drewbert has quit (Remote host closed the connection)
*	carlomagno (~cararell@inet-hqmc02-o.oracle.com) has joined
<edwardk>	jared-w: anyways, & (formerly %) won out for me for lens because it comes with a built-in reading that reads right. foo & whatever .~ 12       reads as foo and whatever = 12..
<trigone>	jared-w: agreed :) but it's one golf shorter!
<edwardk>	(it read better when the operator was .=)
<jared-w>	I got a lot of shit on r/haskell for this but I still think & is a stupid name. Symbolic operators should be mnemonic in the symbolic sense, not in the aural sense
*	drewbert (~drewbert@24-113-123-50.wavecable.com) has joined
<edwardk>	which was as close to := as i could get
<jared-w>	That being said, it's one of the better choices when confined to the ascii list of symbols
<Cale>	jared-w: & isn't symbolic of anything in any sense, it's just a character that was freely available
*	Ch0c0late has quit (Quit: Connection closed for inactivity)
*	peterbecich has quit (Ping timeout: 260 seconds)
<edwardk>	trigone: it was selected because it was underutilized and one character. # is often overloaded. % aws taken by Data.Ratio and pissed of yitz
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<Cale>	Same with $ -- there are only so many symbols which can easily be typed
*	`Guest00000 has quit (Ping timeout: 240 seconds)
<edwardk>	and &'s natural pairing | was taken by syntax in haskell
<trigone>	the best symbol would probably be `->` but it's already reserved too ofc ^^
<jared-w>	Right, which makes it a stupid choice to me. It's a symbol that's supposed to denote a meaning and the only reason we choose the symbol is 'cause it looked cute and you can type it easily'
<Cale>	What meaning was it supposed to denote?
<trigone>	edwardk: yeah as i said, i know there wasn't lots of viable alternatives
*	ski . o O ( conjunctive coordination )
*	dolio has quit (Quit: ZNC 1.6.5 - http://znc.in)
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
*	Rodya_ has quit (Remote host closed the connection)
<Cale>	My complaint about & isn't so much which symbol was picked
<edwardk>	anyways the only other one character easily typed symbol available was #   -- which we avoided for a long time because of its comparatively common third party use
*	Rodya_ (~Rodya_@2601:46:4001:e0b4:197f:1da3:9fd2:99df) has joined
<Cale>	It's that people are actually going to use the damn thing
<jared-w>	&'s mnemonic is "and then" but it's a operator that shunts data down a pipeline, same with $
<edwardk>	before giving in and using it for prisms
<edwardk>	> _Left # 12
<lambdabot>	 Left 12
<Cale>	jared-w: I don't think of it that way
*	edwardk was waiting for cale to climb up on that high high horse ;)
<Cale>	haha
*	ignamv has quit (Ping timeout: 255 seconds)
<jared-w>	How do you think of it, then? If I may poke you a bit :p
<edwardk>	soon i'll have him regressed to where he's ranting that . should be fmap
<Cale>	jared-w: It's just function application with the function on the wrong side
<jared-w>	So the fact that it's `flip $` is the only thing that's wrong with it?
<Cale>	x & f = f x
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<trigone>	what i'm wondering more than anything is why we don't write compositions of functions from left to right. i know mathematicians (for some reason) sold the habit of reversing everything for fun, but it's still very much easier to read something when you don't have to constantly read from right to left in the middle of a left-to-right language...
*	DTZUZU (~DTZUZU@S0106bcd16584b0aa.vs.shawcable.net) has joined
<Cale>	Well, yeah, it just tends to be a less readable choice than other options for that reason
<ski>	edwardk : .. or that `flip' should be `\f x -> fmap ($ x) f' ?
*	tsaka_ has quit (Ping timeout: 240 seconds)
<edwardk>	:t (??)
<lambdabot>	Functor f => f (a -> b) -> a -> f b
<jared-w>	trigone: there's plenty of things that read left to right, right ot left, up to down, down to up
<edwardk>	^- flip
<edwardk>	stolen shamelessly from ski
*	ski smiles
<edwardk>	i really should have stuck to my guns and taken ? for that operator
<jared-w>	:t (?)
<lambdabot>	error: Variable not in scope: ?
<Cale>	I actually dislike >>= for the same reason. Occasionally I grep for instances of >>= and I tend to find that unless it's immediately followed by \case (or part of an instance declaration) there's some code there which is awkward and annoying.
<edwardk>	(?) isn't taken
<jared-w>	edwardk: there's still a chance, then! :p
<trigone>	jared-w: well yeah but even function application i think would have been better off left arg to right function. i don't see the logic in having things the other way round. it's like saying "to cook a cake, you'll end by putting it to the oven, just before tha you'll do this and that" etc, it's absurd
<ski>	trigone : "why we don't write compositions of functions from left to right" .. because we write `f(x)' (or `f x' in Haskell), not `(x)f'
<edwardk>	jared-w: i took ? at first but it broke diagram which was using it at the time
<jared-w>	ski: although some branches of math do write (x)f quite pervasively
<trigone>	ski: well i'd advocate for (x f) notation actually
<edwardk>	jared-w: so i renamed out of courtesy
<Cale>	trigone: You just have to pick some convention and stick with it
<Cale>	jared-w: Which ones?
*	davr0s (~textual@host86-142-61-82.range86-142.btcentralplus.com) has joined
<lyxia>	trigone: right-to-left composition is not that bad. If you see  f x = sort . ...  you know that f x is a sorted list.
*	twandy has quit (Client Quit)
<Cale>	jared-w: There might be some weirdo out there which actually does that, but as far as I know, it's not a common convention.
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<ski>	trigone : typically (and this is probably what Cale is about), `x' tends to be a larger expression than `f'. and for some reason we usually think it's nicer to first read the operator, rather than the operand
<edwardk>	i tend to use & and <&> and for_ the like because the function is usually the big messy thing
<edwardk>	and it saves me more parens ;)
<ski>	trigone : also, in a definition `f(x) = ..x..', the thing defined comes first, while `x' could be a large pattern
*	tabemann has quit (Quit: Leaving)
<edwardk>	whatever >>= \case             pops up a lot in my code for that same reason.
*	peterbecich (~peterbeci@71-84-251-238.static.lsan.ca.charter.com) has joined
<jared-w>	Cale: to be honest I only know that some branches of math do it; I always forget which ones...
<trigone>	ski: well i guess there are arguments for either...
<trigone>	edwardk: i love lambda case
<Cale>	edwardk: Yeah, \case is the one place where >>= is probably okay
<ski>	trigone : fwiw, sometimes i think we ought to do `A <- B', rather than `B -> A', if we're going to stick with `f(x)' / `f x'
<edwardk>	i just wish it had been \of
*	dtcristo (dtcristoma@gateway/shell/matrix.org/x-mkldewzozvevgbms) has joined
<Cale>	edwardk: I wanted case of ...
<trigone>	Cale: you don't like the bind operator?
<Cale>	edwardk: Just leaving out the scrutinee to get a function, similar to operator sections
*	tsaka_ (~torstein@84-52-234.108.3p.ntebredband.no) has joined
<edwardk>	that would have been tolerable too
<ski>	edwardk : "because the function is usually the big messy thing" -- yep, often (not always) the case
<edwardk>	\of or case of both have the benefit that they don't add a new keyword that introduces layout some o the time
<trigone>	ski: there's that too. esp if you have to split the sig over several lines, the first will always contain the result (modulo currying), which is much more logical
<ski>	trigone : the MLs had "lambda case" from the start. unfortunately Haskell didn't
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<trigone>	at any rate, gotto go to sleep :) got a big day tomorrow! thanks a lot everybody for the info and discussions! :)
<ski>	trigone : in SML, `case <scrutinee> of <matches>' is sugar for `(fn <matches>) (<scrutinee>)'
*	Costar (~Costar@179.215.124.226) has joined
*	dolio (~dolio@haskell/developer/dolio) has joined
*	jao has quit (Ping timeout: 248 seconds)
*	Associat0r has quit (Ping timeout: 240 seconds)
<trigone>	ski: i don't know the language syntax at all
<trigone>	(sorry)
<trigone>	bye all!
*	trigone has quit (Quit: Page closed)
<edwardk>	anyhow, i don't have a particular objection to there being multiple styles, its relatively bounded, the problem only spans a dozen names or so in the standard library and locally can make a lot of difference to readability. so while cale has the more defensible view in terms of 'fewer things to learn' i tend to want more expressiveness. having both let and where is redundant too =P
<ski>	trigone : `fn x => x+1' is `\x -> x+1'. ..
*	hackagebot tile 0.1.0.0 – Slippy map tile functionality. – https://hackage.haskell.org/package/tile
*	hackagebot hopenpgp-tools 0.19.5 – hOpenPGP-based command-line tools – https://hackage.haskell.org/package/hopenpgp-tools
<ski>	edwardk : .. only mostly
*	twandy has quit (Client Quit)
*	fendor has quit (Ping timeout: 252 seconds)
<Cale>	edwardk: Yeah, it's okay if it's not abused too much also.
<jared-w>	Cale: Pointfree ascii gibberish is my favorite pasttime though...
<edwardk>	Cale: if it makes you feel better, i feel the same way about killing 'let's wherever i find them in my code ;)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<Cale>	jared-w: It's fun right up until you have to deal with someone else's pointfree ascii gibberish in what ought to have been boring code.
*	augur (~augur@noisebridge130.static.monkeybrains.net) has joined
<ski>	i don't know of a better solution to the `for_' vs. `traverse_' thing
<jared-w>	edwardk: oh you also hate 'let'? What about 'where'?
<edwardk>	ski: ? :)
<edwardk>	ski traverse ? whatever $ do
<Cale>	edwardk: Killing lets in which way?
<edwardk>	Cale: usually by turning them into pattern guards or shoving them into where clauses
<jared-w>	With fire, season with salt and pepper, then heat on medium high for 4 minutes each side and top with garnish
<Cale>	ah
<ski>	edwardk : hm. i suppose
<edwardk>	let ... in is an unindentable nightmare
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<edwardk>	it just causes me to sit there with a nervous twitch reformatting the lines its on
<Cale>	heh
<Cale>	Can't decide if 'in' should line up with the 'let' or be one space deeper?
<ski>	edwardk : this is one reason we ought to have "message-dispatching" aka "copattern" syntax, at least for `newtype's
<Cale>	'let' doesn't actually bother me at all
<jared-w>	let actually bugs me for an entirely different reason
<edwardk>	i can somethings bring myself to 'let in' if its a one line statement in a larger thing
<edwardk>	but if the in floats down i get twitchy
<jared-w>	"let (some stuff I don't care about yet) in (now I need to figure out how to care about it)"
*	ski is thinking of `blah = Foo $ \x -> let ... in ...'
<edwardk>	ski blah = foo go where go x = ... ;)
<edwardk>	now i can use another where =)
<ski>	edwardk : but then i have to make a silly name that's not even recursive
<jared-w>	vs "(high level implementation of function) where (ugly details details I can now reason about)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<ski>	i'm offended
<edwardk>	ski: yeah. that is the one case i do tend to let myself 'let' just because i can't pattern guard a lambda.
<edwardk>	\ x | y <- whatver -> ..
<ski>	it ought to be `unFoo blah x = ... where ...'
<edwardk>	is what i want
<jared-w>	multiWayIf does that, does it not?
<edwardk>	the if | whatever could work there
<edwardk>	yeah
<edwardk>	\x -> if | whatever -> ...
<edwardk>	i haven't used it to replace let yet, maybe i'll try.
<edwardk>	its a 5 character tax over my 'ideal' version, but only 5 characters
*	Swizec_ (~swizec@c-76-126-10-27.hsd1.ca.comcast.net) has joined
<jared-w>	plus you can add yet another pragma to your list! Win win, really
*	ski grins
<edwardk>	i used to use multiway if pretty heavily
<edwardk>	not i adopt a sort of 'hanging if' style that reduces the pressure on my code to use it
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<edwardk>	\x -> if whatever       and then i outdent the 'then' and 'else' like everything else two spaces
<edwardk>	er now i adopt i mean
<jared-w>	Is there any benefit of one style over another? I'm not quite picturing that in my head
*	Swizec_ has quit (Ping timeout: 248 seconds)
<edwardk>	it fits with the surrounding code style i use. i tend to do hanging do blocks, hanging case statements, etc.
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	jedws (~jedws@2001:8003:3582:aa00:c9dc:d0:b855:b3bb) has joined
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
<edwardk>	the cascading case style sort of crept up on me from writing lots of low level system code directly against State# RealWorld and the like where i had to use it, or where i can't let' bind my way through anyways because it makes ghc's head explode
*	emilypi has quit (Ping timeout: 240 seconds)
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	Welkin (~Welkin@107-147-90-29.res.bhn.net) has joined
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
*	Foritus has quit (Ping timeout: 240 seconds)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<jared-w>	gotcha, that makes sense
*	emilypi (~emilypi@pool-100-33-104-88.nycmny.fios.verizon.net) has joined
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	tsaka_ has quit (Ping timeout: 252 seconds)
*	nullifidian__ is now known as nullifidian
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	erikd has quit (Ping timeout: 255 seconds)
*	Achylles has quit (Quit: Leaving)
*	Guest31 (~textual@cpe-70-112-244-109.austin.res.rr.com) has joined
*	Guest31 has quit (Client Quit)
*	ts_ (~212@112.215.200.49) has joined
*	ts_ has quit (Remote host closed the connection)
*	twandy has quit (Client Quit)
*	samrat (~samrat@202.51.76.46) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	fresheyeball (~isaac@h88.129.189.173.dynamic.ip.windstream.net) has joined
*	kuttifunk1 (~Thunderbi@host-188-174-207-138.customer.m-online.net) has joined
*	Welkin has quit (Quit: leaving)
<fresheyeball>	I've made much progress toward my strange mission
<fresheyeball>	but I've hit a +4 block of stumbling
<fresheyeball>	http://lpaste.net/1793278755955802112
*	tsaka_ (~torstein@84-52-234.108.3p.ntebredband.no) has joined
<fresheyeball>	how to tell GHC that the numbers are LT?
*	twandy has quit (Client Quit)
*	kuttifunk has quit (Ping timeout: 240 seconds)
*	kuttifunk1 is now known as kuttifunk
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<Axman6>	hmm, I feel using a GADT is probably the right thing to produce the proof that the values are LT
<Axman6>	like, you need some whitness that that's true
<fresheyeball>	Axman6: Splain!
<Axman6>	but... I'm not sure I know enough to make it work
<fresheyeball>	lame!
<fresheyeball>	me too!
<fresheyeball>	!!-!!-!!
<Axman6>	data LTWitness (a :: Nat) (b :: Nat) (ord :: Ordering) where... yeah dunno
*	twandy has quit (Client Quit)
<Axman6>	I would poke edwardk in the first instance "(as the person who's most likely to know the answer, no matter what the question is)
<edwardk>	?
<fresheyeball>	edwardk: hi! Was about to poke ya
<fresheyeball>	*don't hit me, Axman6 told me to
<fresheyeball>	http://lpaste.net/1793278755955802112
<fresheyeball>	edwardk: how to inform GHC that these number are 'LT
<fresheyeball>	?????????
<edwardk>	what am i looking at other than a twisty maze of singletons?
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<edwardk>	oh
<fresheyeball>	edwardk: come now, its not that twisty
<edwardk>	have you seen the code in Data.Constraints.Nat?
<fresheyeball>	I have not!
<edwardk>	http://hackage.haskell.org/package/constraints-0.9.1/docs/Data-Constraint-Nat.html
<edwardk>	that gives you machinery for proving stuff with out natural number kinds
<edwardk>	as they are? they are basically useless tags
<edwardk>	you need something like that or the ghc plugin someone has to actually work with them in earnest
*	twandy has quit (Client Quit)
*	jmcarthur has quit (Ping timeout: 246 seconds)
*	erikd (~erikd@hendrix.mega-nerd.net) has joined
<fresheyeball>	edwardk: so apparently I have seen this, given it was already in a tab in my browser
<fresheyeball>	I don't see how it could help me
<edwardk>	you need something to reify the comparison of the value level singletons into a comparison of the type level ones
<edwardk>	i don't have the actual combinator you need in there
<fresheyeball>	yes I do
*	mson (uid110608@gateway/web/irccloud.com/x-sxfutcfxhhxgtkxz) has joined
<fresheyeball>	HOW TO DO?
<edwardk>	by copying the 'axiom' trick i use in that code
<edwardk>	its a little bit of unsafety
<edwardk>	you need something like (KnownNat n, KnownNat m) => Maybe (Dict (n <= m))
<fresheyeball>	is context
<fresheyeball>	I don't know what Dict is in this context
<edwardk>	data Dict p where Dict :: p => Dict p
<fresheyeball>	I know its not a normal term level dictionary
<edwardk>	using constraint kinds
<fresheyeball>	Ouch!
<fresheyeball>	ma brains!
*	peterbecich has quit (Ping timeout: 260 seconds)
*	Rodya_ has quit (Remote host closed the connection)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<fresheyeball>	so its a reified Constraint?
<edwardk>	fresheyeball: http://comonad.com/reader/2011/what-constraints-entail-part-1/ is an article i wrote up when max bolingbroke first added the "Constraint" kind to haskell
<edwardk>	it covers Dict
<edwardk>	and my :- data type, etc.
<edwardk>	you probably want to start there
<edwardk>	you'll need a lot of this machinery to make this code go
<edwardk>	then you can understand the constraints package
<edwardk>	and from there the code in Data.Constraints.Nat should make sense
<edwardk>	well more sense
<edwardk>	you might need to understand reflection first
<edwardk>	also have articles on that!
<fresheyeball>	crapes
<fresheyeball>	this is alot
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<koz_>	edwardk's motto should become 'I have an article for that!'.
<koz_>	s/article/library also works
<edwardk>	fresheyeball: you did jump into the deep end of the pool
<koz_>	edwardk: In your Rotten Bananas article, you talk about the lambda cube, but I'm not sure how your data type maps to what is described here: https://en.wikipedia.org/wiki/Lambda_cube
<koz_>	Am I looking at the wrong cube?
*	Rodya_ (~Rodya_@2601:46:4001:e0b4:8818:81e2:271e:febc) has joined
<crucify_me>	I have an article called bananas with small brown sugar spots
<fresheyeball>	edwardk: just for fun
<fresheyeball>	but yeah
*	elpfen (~elpfen@173-28-20-229.client.mchsi.com) has joined
*	a3Dman has quit (Ping timeout: 240 seconds)
<fresheyeball>	also I'm using the compactable package you helped me with at work
<fresheyeball>	and it's been very nice so far
*	twandy has quit (Read error: Connection reset by peer)
*	JuanDaugherty (~jdaughert@98.4.124.117) has joined
*	banc has quit (Quit: ZNC - http://znc.in)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	hucksy (~hucksy@p5B3C5F2C.dip0.t-ipconnect.de) has joined
*	m0rphism has quit (Quit: WeeChat 1.9)
*	TipsyMe has quit (Ping timeout: 252 seconds)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	Bhootrk_ (~Bhootrk_@118.189.203.83) has joined
<edwardk>	crucify_me: related to my rotten bananas article?
**** BEGIN LOGGING AT Sun Sep  3 11:44:00 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	pellenation (~textual@175.red-88-20-27.staticip.rima-tde.net) has joined
<geekosaur>	trampel, jared-w, the more recent one is https://www.haskell.org/onlinereport/haskell2010/
*	mePressButton (~jose@190.193.184.240) has joined
<trampel>	geekosaur: thank you all.
<crucify_me>	hi I need to revisit these two examples. could you guys show me how to flesh out the first example into something that I can follow? https://ptpb.pw/JFBD
<geekosaur>	although arguably onlinereport/ should redirect tto that and the older one should be onlinereport/haskell98/
<crucify_me>	the let..in clause
<jared-w>	geekosaur: I agree. Although quite a few webadmins consider it a grade A cardinal sin to change any permalink... ever... :p
*	Guest74361 has quit (Quit: Leaving.)
*	jared-w is firmly not in that camp
<hpc>	this is why javascript makes web development so easy
<geekosaur>	then it is on them to not camp on the wrong real estate
<hpc>	if everything is served on / all you have to do is keep the same domain name :P
<geekosaur>	if it's a versioned document, it should be a versioned permalink
<jared-w>	hpc: ಠ_ಠ
*	soLucien (~Lu@alfa.oek.dk) has joined
*	twandy has quit (Read error: Connection reset by peer)
<hpc>	anyhoo there isn't a whole lot changed in 2010
<hpc>	n+k patterns, language extensions were formalized, and the FFI
<hpc>	and maybe one or two other small things i am forgetting
<jared-w>	n+k patterns being removed, you mean?
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<hpc>	yeah
<geekosaur>	clarification of translating the layout rule to brace insertion
*	shafox has quit (Quit: This computer has gone to sleep)
*	KeyJoo has quit (Remote host closed the connection)
<jared-w>	Hmm... I actually wonder, is brace and semicolon insertion a thing all "whitespace-only" languages do when compiling?
<lyxia>	crucify_me: are you trying to find more and more complicated ways of writing x = 1 : x
<hpc>	jared-w: an obvious counterexample is python, which has no brace syntax
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	Whitesquall has quit (Ping timeout: 248 seconds)
*	davr0s has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
<crucify_me>	lyxia, thanks, I'm trying to understand a closure and those are two examples that I never really got. definitely don't know how either works there
<jared-w>	hpc: right, I was curious as to how python "compiled". Haskell makes braces and semicolons and all that "optional" but inserts them in when compiling. I always thought that was one of the stranger design choices and kinda fail to see why anyone would want to do it that way
<crucify_me>	I don't know what x = 1 : x means lyxia 
<lyxia>	jared-w: markdown has some layout rules too, though it's not a *programming* language
<orzo>	is there a common operator equivelent to flip fmap ?
<geekosaur>	jared-w, I don't think it's required to actually do it, only to conform to the semantics obtained that way
<Rotaerk>	:t (<&>)
<lambdabot>	Functor f => f a -> (a -> b) -> f b
<lyxia>	crucify_me: it means x = 1 : 1 : 1 : 1 : ... -- ad infinitum
<orzo>	thanks, Rotaerk 
<Rotaerk>	:t &
<lambdabot>	error: parse error on input ‘&’
<Rotaerk>	:t (&)
<lambdabot>	a -> (a -> b) -> b
<geekosaur>	also I feel like some 60sish languages did things like that, although not specifically brace insertion
<Rotaerk>	<&> is analogous to & as <$> is analogous to $
*	djapo (~archie@unaffiliated/djapo) has joined
<crucify_me>	oh.. but it is a suspended computation (according to my patchy notes)
*	Whitesquall (~user@188.254.110.251) has joined
<crucify_me>	?
*	pandeiro (~user@2606:6000:6080:de00:9c35:de6e:d92f:4231) has joined
<jared-w>	geekosaur: yeah it feels like a very 60s-ish thing to do
<hpc>	jared-w: ultimately it's a parser implementation detail, and it all becomes ASTs in the end
<jared-w>	crucify_me: they're referring to laziness in an obtuse way
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<crucify_me>	meaning what?
<jared-w>	hpc: makes sense. I guess I'd just prefer it if the parser left ; and {} alone so I could use them for naming data structures or other shiny things like that
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
*	mePressButton has quit (Quit: leaving)
<jared-w>	crucify_me: x = 1 : x won't destroy your computer because the language is lazy and only takes what it needs. It evaluates the 1, then goes to the : x which is 1, then goes to the : x, which is... 
*	mePressButton (~jose@190.193.184.240) has joined
<jared-w>	If the language was strict it would have to go through the whole list before printing and evaluating it out
*	KeyJoo (~keyjoo@46.249.9.128) has joined
<jared-w>	(x = 1 : x might be the wrong example for that. I'm not sure how corecursion is handled in strict languages; it probably depends?)
*	BartAdv (uid90451@gateway/web/irccloud.com/x-vwurtpiqublurbmp) has joined
<lyxia>	ocaml allows it with the same result.
*	fendor (~fenedoer@178.115.129.167.wireless.dyn.drei.com) has joined
<lyxia>	there's nothing to suspend, it's just a constructor pointing to itself.
<crucify_me>	sorry I really would need to see how its used (or not used, suspended?) in a program that did something 
*	takle has quit (Remote host closed the connection)
*	twandy has quit (Client Quit)
<crucify_me>	I was hoping to flesh it out into an interesting sample I could sink my teeth into
<jared-w>	lyxia: I thought so. Halfway through writing that I was like "hmm... Pretty sure 1:x is one of the few counterexamples to what I'm writing out" lol
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	Squant has quit (Ping timeout: 260 seconds)
*	sleffy (~sleffy@c-24-7-67-0.hsd1.ca.comcast.net) has joined
<geekosaur>	pattern matching forces an expression to the next constructor. since a list is a chain of (:) constructors terminated with a [] constructor, each evaluation forces exactly one more list element
*	pera has quit (Ping timeout: 260 seconds)
<orzo>	Rotaerk: do i need lens for <&> ?  I want a base operator if their is one
<geekosaur>	(of course if your pattern matches more than one element, it will go further e.g. foo (x:y:s) = ...
<jared-w>	> let x = 1 : 1 : zipWith (+) x (tail x) in x -- Here's an interesting example for you, crucify_me ;)
<lambdabot>	 [1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17...
<geekosaur>	er (x:y:xs) or (x:x':xs)
<Rotaerk>	orzo, <&> is defined in multiple packages, it looks like, but it's not is base
<crucify_me>	thats fibonacci?
<Rotaerk>	you could always just redefine it locally if you don't want to add a dependency just for it
<jared-w>	crucify_me: yes
<Rotaerk>	(<&>) = flip (<$>)
*	Vbitz has quit (Quit: ZNC - http://znc.in)
<geekosaur>	> let x:x':xs = [1,2,undefined] in x' -- xs is merely bound, not evaluated
<lambdabot>	 2
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	pgiarrusso has quit (Quit: This computer has gone to sleep)
<jared-w>	or (<&>) = flip fmap if you hate parens :p
<CindyLinz>	> fix ("bug" :) -- Yet another interesting example
<crucify_me>	excellent jared-w   ..  sorry hold on geekosaur
<lambdabot>	 ["bug","bug","bug","bug","bug","bug","bug","bug","bug","bug","bug","bug","bu...
<hpc>	> fix error -- the best example
<lambdabot>	 "*Exception: *Exception: *Exception: *Exception: *Exception: *Exception: *Ex...
<jared-w>	lol
*	argent0 (~aner@186.133.132.26) has joined
*	bbsl (~bbsl@15.66.34.95.customer.cdi.no) has joined
<CindyLinz>	XD
*	caumeslasal (~Thunderbi@mar92-10-82-239-65-141.fbx.proxad.net) has joined
<dminuoso>	How exactly does join implement a natural transformation?
<c_wraith>	despite the name, it doesn't fix any error
*	trampel has quit (Quit: Leaving)
<dminuoso>	I mean I keep looking at T∘T -> T, and it just does not look similar at all
*	twandy has quit (Client Quit)
*	ali_bush (~ali_bush@2407:7000:8141:cf00::2) has joined
*	ali_bush has quit (Changing host)
*	ali_bush (~ali_bush@gentoo/developer/alibush) has joined
*	KeyJoo has quit (Quit: Good luck! Have a nice Day!)
<Rotaerk>	hmm is EmptyDataDecls enabled by default now or something
*	KeyJoo (~keyjoo@46.249.9.128) has joined
<Rotaerk>	I see it's an extension, but I can do "data Foo" without it
<lyxia>	dminuoso: A natural transformation between functors (T . T) and T is given by, for every object a, a morphism from (T . T) a to T a. In other words, forall a. T (T a) -> T a.
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	nahra has quit (Quit: ERC (IRC client for Emacs 25.1.1))
<c_wraith>	lyxia: it has to preserve some sort of morphisms along the way, right?
<lyxia>	Indeed.
*	hc_ (~ircd@unaffiliated/hc) has joined
*	fendor has quit (Remote host closed the connection)
*	OnkelTem has quit (Ping timeout: 240 seconds)
*	fendor (~fenedoer@178.115.129.167.wireless.dyn.drei.com) has joined
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	freeman42x[m] (~freeman42@86.47.59.60) has joined
<dminuoso>	lyxia, yeah about that. join just seems to give me the mapping between the objects, what about morphisms?
<crucify_me>	more drama soon
<dminuoso>	Or.. mmm.
<lyxia>	dminuoso: morphism = function  in the Hask category.
*	osa1 (~omer@94.119.64.7) has joined
*	osa1 has quit (Changing host)
*	osa1 (~omer@haskell/developer/osa1) has joined
*	hc has quit (Ping timeout: 252 seconds)
*	forgottenone has quit (Ping timeout: 240 seconds)
<geekosaur>	Rotaerk, it's not an extension as of Haskell2010
*	twandy has quit (Client Quit)
*	jao (~jao@pdpc/supporter/professional/jao) has joined
<geekosaur>	but still supported for backward compatibility
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<Rotaerk>	ah, gotcha
<lyxia>	I omitted some work in there but parametricity basically implies the naturality conditions. There might actually be natural transformation between Hask functors that are not expressible as polymorphic functions, I'm not sure.
*	hc (~ircd@unaffiliated/hc) has joined
*	hc_ has quit (Ping timeout: 252 seconds)
<geekosaur>	crucify_me, http://lpaste.net/358187 is a breakdown of what I showed
<dminuoso>	lyxia, well how do I "join" two fmap functions?
*	fendor has quit (Ping timeout: 240 seconds)
<lyxia>	dminuoso: what does that mean
*	nahra (~user@unaffiliated/nahra) has joined
*	slackman has quit (Remote host closed the connection)
*	hackagebot pipes-concurrency 2.0.8 – Concurrency for the pipes ecosystem – https://hackage.haskell.org/package/pipes-concurrency
*	hackagebot harp 0.4.3 – HaRP allows pattern-matching with regular expressions – https://hackage.haskell.org/package/harp
*	chaosmasttter (~chaosmast@p4FF1C655.dip0.t-ipconnect.de) has joined
*	slackman (~slackman@99.fe.37a9.ip4.static.sl-reverse.com) has joined
<elpfen>	any good imagemagick or similar packages?
<hpc>	juicypixels, maybe
*	twandy has quit (Client Quit)
<crucify_me>	geekosaur, thanks very much ! looking now
<elpfen>	Optimally, full imagemagick capability. Otherwise just looking at sizes
*	drcode (~drcode@5.29.192.15) has joined
<hpc>	ah, i think juicypixels can do that then
<elpfen>	Nice!
<hpc>	when i briefly looked at getting the full imagemagick featureset, i ended up settling on calling the convert utility
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<lyxia>	dminuoso: the definition of a natural transformation is just a mapping from object to morphism, with a commutative diagram, which is equivalent to an equation   fmap f . join = join . (fmap . fmap) f
<hpc>	which if you can get past the syntax and learn the model behind it, isn't too terrible
*	Subeff (259d8a9d@gateway/web/freenode/ip.37.157.138.157) has joined
*	mizu_no_oto_work (~textual@c-24-60-15-130.hsd1.ma.comcast.net) has joined
<elpfen>	it looks like there's a bunch of FFI bindings for imagemagick...what are ffi bindings? just bindings to the underlying utility?
<elpfen>	I might do that then, because I already have all the commands written
<hpc>	ffi is short for foreign function interface
<hpc>	and yeah, it's just bindings to the imagemagick c library
*	conal (~conal@client-7-151.visitor-network.oxuni.org.uk) has joined
*	chrissl (~chris@mail.meicloud.at) has joined
*	twandy has quit (Client Quit)
<Subeff>	Hey again guys, It is the third time I face something I have no clue and it should be pretty easy I guess, but when I implement an instance of Applicative, for the data type `data Three a b c = Three a b c` I have no clue how to implement the `pure` function. How is that even possible if one argument is coming how do I construct something that needs actually three values? As for the <*> I just restrict the first two types to be Mon
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	chaosmasttter has quit (Ping timeout: 240 seconds)
<lyxia>	it's not possible
<hpc>	Subeff: you need additional constraints on the a and b types such that you can pick a value for them
<hpc>	:t mempty
<lambdabot>	Monoid a => a
*	sagax (~sagax_nb@213.138.71.146) has joined
*	seventh-chord has quit (Quit: Leaving)
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
*	XorSwap (~XorSwap@wnpgmb016qw-ds01-58-40.dynamic.bellmts.net) has joined
*	preyalone (uid21561@gateway/web/irccloud.com/x-shgaxpxywlpyuumb) has joined
<Subeff>	laaal yes guys <3 you
<lyxia>	Ah, you already restricted the types to be monoids for <*> ...
*	conal_ (~conal@185.145.156.52) has joined
<Subeff>	yes yes, how come I completely forgot of mempty
<Subeff>	thank you so much
<dminuoso>	lyxia, just found this: https://wiki.haskell.org/Category_theory/Natural_transformation
<dminuoso>	This is gold, exactly what I was looking for. Just couldn't find the words. :)
*	conal has quit (Ping timeout: 240 seconds)
*	freeman42y[m] (~freeman42@83.136.45.123) has joined
*	bennofs (~benno@2a00:c1a0:4300:dd00:e6a4:71ff:feb5:3f6f) has joined
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	m0rphism has quit (Quit: WeeChat 1.9)
*	drcode has quit (Ping timeout: 248 seconds)
*	freeman42x[m] has quit (Ping timeout: 240 seconds)
<dminuoso>	lyxia, so just staring at that diagram made me realize that the "mapping of functions" ψ(f) and ϕ(f) parts dont need to be "mapped". The natural transformation just cares about ϕ(x) and ψ(y)
*	zero_byte (~zer0@ip-89-103-110-138.net.upcbroadband.cz) has joined
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	soLucien has quit (Ping timeout: 240 seconds)
*	takle (~takle@host86-166-243-7.range86-166.btcentralplus.com) has joined
*	twandy has quit (Client Quit)
*	cyborg-one has quit (Ping timeout: 252 seconds)
<elpfen>	How do I use `when` when the IO Action i want to use doesn't return IO () ?
<cocreature>	:t void -- elpfen 
<lambdabot>	Functor f => f a -> f ()
<phadej>	:t when . void
<lambdabot>	error:
<lambdabot>	    • Couldn't match type ‘f1 ()’ with ‘Bool’
<lambdabot>	      Expected type: f1 a -> Bool
<phadej>	:t \b -> when b . void
<lambdabot>	Applicative f => Bool -> f a -> f ()
<jared-w>	also, when is applicative, not monadic... can you use it for IO actions?
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<cocreature>	jared-w: Applicative is a superclass of Monad
*	yqt has quit (Quit: KVIrc 4.0.4 Insomnia http://www.kvirc.net/)
*	freeman42y[m] has quit (Ping timeout: 248 seconds)
*	jellowj (~yellow-ja@dbn234.neoplus.adsl.tpnet.pl) has joined
<phadej>	keywords: covariance & contravariance
*	pellenation has quit (Quit: Textual IRC Client: www.textualapp.com)
*	mePressButton has quit (Quit: Lost terminal)
<jared-w>	riiight... duh, brainfart on my part.
*	dsantiago (~dsantiago@cpe-104-175-193-69.socal.res.rr.com) has joined
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@69.36.49.34) has joined
<crucify_me>	jared-w, hey with that fibonacci example, how would you concisely describe how the fib numbers are being generated, using that method?
<elpfen>	That's what void is for!!
<elpfen>	thanks
*	OnkelTem has quit (Ping timeout: 248 seconds)
<jared-w>	elpfen: you can also abuse it in fun ways with pseudo-dependent typing if you're so inclined :p
*	acteek has quit (Quit: Leaving)
*	drewbert has quit (Remote host closed the connection)
*	drewbert (~drewbert@24-113-123-50.wavecable.com) has joined
<jared-w>	crucify_me: it's zipping a list with the tail of that list using addition
<jared-w>	> zipWith (+) [1..5] [10..15]
<lambdabot>	 [11,13,15,17,19]
*	Jeanne-Kamikaze has quit (Remote host closed the connection)
<crucify_me>	thanks, could you say that is forcing evaluation without a bottom value? ..trying to get the terminology in order
<jared-w>	[(1 + 10), (2 + 11), (3 + 12), (4 + 13), (5 + 14)] (and the zipWith function stops since we ran out of one list even though there's a 15 in the other list)
<orzo>	If I have a literal expression 1 + 4 + 2 + 32 can I count on GHC to evaluate it at compile time?
<orzo>	I'm not talking about evaluating general constant expressions, but simple math formula like that
*	twandy has quit (Client Quit)
<crucify_me>	ok thanks gotta go through that
<jared-w>	crucify_me: no, that's the entirely wrong terminology and wrong context to use that sort of terminology in
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<crucify_me>	ok thanks 
<jared-w>	crucify_me: Do you understand what `tail` does? Given a list [1..5] tail gives you [2..5]
<crucify_me>	yeah that's like cdr
*	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has joined
<jared-w>	So with zipWith (+) x (tail x) you're adding x_n and x_(n+1) together which is precisely the co-recursive method for generating a fibonacci number
*	mac10688 (~mac10688@c-24-21-116-24.hsd1.or.comcast.net) has joined
*	chaosmasttter (~chaosmast@p4FF1C655.dip0.t-ipconnect.de) has joined
*	MarioBranco has quit (Quit: Leaving)
*	ashpokemonZ has quit (Quit: Leaving)
<jared-w>	I start the list off with `1 : 1 : ` so that x and (tail x) have value to work with to get the third item in the list (which will be 2)
*	bbsl has quit (Quit: WeeChat 1.9)
*	jfo (3ec726df@gateway/web/freenode/ip.62.199.38.223) has joined
<crucify_me>	thanks right you need two 1's to start it. you can
<crucify_me>	t
*	twandy has quit (Client Quit)
<jared-w>	so it's:  1 : 1 : (1+1) : (1 + (1+1)) : ((1+1) + (1 + (1+1))) : ...
<crucify_me>	 *can't use the zero
*	pera (~pera@unaffiliated/pera) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<jared-w>	You could use zero just fine ¯\_(ツ)_/¯
<lyxia>	orzo: yes
<jared-w>	> let x = 0 : 1 : zipWith (+) x (tail x) in x
<lambdabot>	 [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,...
<jared-w>	In fact you could use any two numbers to 'kick start' the fibonacci series. It is merely convention that the "traditional" fibonacci function is defined as f0 = 1; f1 = 1; fn = f(n-1) + f(n-2). The two base cases could really be whatever you wanted them to be
<c_wraith>	> let x = 0 : scanl (+) 1 x in x
<lambdabot>	 [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,...
<jared-w>	But that's more a mathematical aside than anything that's actually relevant to programming
<c_wraith>	> let x = (0 :) . scanl (+) 1 $ x in x
<lambdabot>	 [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,...
*	dsantiago has quit (Quit: Computer has gone to sleep.)
<c_wraith>	> fix (0 :) . scanl (+) 1
<lambdabot>	 error:
<lambdabot>	     • Couldn't match expected type ‘[b] -> c’
<lambdabot>	                   with actual type ‘[Integer]’
<c_wraith>	> fix $ (0 :) . scanl (+) 1
<lambdabot>	 [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,...
<crucify_me>	excellent. yeah you just need to fib numbers in sequence to prime the sequence
<jared-w>	c_wraith: now you're just screwing around :p
<jared-w>	> fix $ (1 :) . scanl (+) 1
<lambdabot>	 [1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17...
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<koz_>	:t scanl (+) 1
<lambdabot>	Num b => [b] -> [b]
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
<crucify_me>	that's also fibonacci?
<jared-w>	idk, while shiny and cool, I don't really like this definition as much. It's not quite the clearest representation of the fibonacci sequence, to me
*	banc has quit (Quit: ZNC - http://znc.in)
*	Wuzzy (~Wuzzy@p5790E0B7.dip0.t-ipconnect.de) has joined
<crucify_me>	is that using a fold or something?
<jared-w>	crucify_me: yeah. Don't think too hard about that. fix is a way to define recursion without having a recursive call. scanl is a co-recursive method... etc
*	dsantiago (~dsantiago@cpe-104-175-193-69.socal.res.rr.com) has joined
<jared-w>	Not a fold, but an unfold
<c_wraith>	> scanl (+) 0 [1..10]
<lambdabot>	 [0,1,3,6,10,15,21,28,36,45,55]
*	banc (~master@217.151.98.168) has joined
*	dmiles has quit (Read error: Connection reset by peer)
<c_wraith>	If that helps explain what scanl does
<crucify_me>	interesting that's overload, thanks though!
<c_wraith>	> scanl (+) 0 (repeat 1)
<lambdabot>	 [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,2...
<jared-w>	crucify_me: yeah I can barely follow the pointfree fix and scan version myself. Don't worry too much about it :p
*	twandy has quit (Client Quit)
<c_wraith>	crucify_me: scanl is a variant of foldl that gives a list of every intermediate state.
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) has joined
<jared-w>	And the reason it doesn't break on infinite lists is because it's co-recursive, right?
<c_wraith>	yes
<crucify_me>	thanks so much I gotta go over the log and make a nice file with notes (and footnotes for scanl / foldl)
*	dmiles has quit (Excess Flood)
*	efeuska has quit (Quit: efeuska)
*	zapbranig has quit (Ping timeout: 248 seconds)
*	biglama has quit (Remote host closed the connection)
<c_wraith>	jared-w: though technically that isn't much of a statement.  Anything that works with infinite lists has to be co-recursive.
*	dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) has joined
*	conal_ has quit (Ping timeout: 240 seconds)
*	davr0s (~textual@host86-142-61-82.range86-142.btcentralplus.com) has joined
<c_wraith>	or recursive over an argument other than the list, I suppose.
*	twandy has quit (Client Quit)
<c_wraith>	> take 5 [1..]  -- recursive over the Int argument
<lambdabot>	 [1,2,3,4,5]
<Tuplanolla>	let f = (1 !) \/ plus; g = ((() !) -|- pred /\ (pred . pred)) . ((<= 1) ?) in hylo (_L :: Mu (Const () :+: (Id :*: Id))) f g -- Here's an even better way to do it with the `pointless-haskell` package.
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	emilypi has quit (Ping timeout: 248 seconds)
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
*	zapbranig (~zapbranig@cpc92882-cmbg20-2-0-cust147.5-4.cable.virginm.net) has joined
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	emilypi (~emilypi@100.33.104.88) has joined
<crucify_me>	so these examples I have, where exactly is the closure operating, say in the fibonacci example jared-w  ? geekosaur entitled their sample with "when evaluation is and isn't forced by a pattern match; so how do you look at those examples and say: "there's the closure"
*	soniku has quit (Ping timeout: 246 seconds)
<jared-w>	c_wraith: fair point :p I just like to keep recursive vs co-recursive straight in my head even though Haskell blurs the lines quite a bit
*	twandy has quit (Client Quit)
*	conal_ (~conal@185.145.156.52) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	vjacob has quit (Ping timeout: 246 seconds)
<crucify_me>	^ no wonder I'm having trouble. the fibonacci is co-recursive?
*	danvet has quit (Ping timeout: 252 seconds)
*	samrat has quit (Ping timeout: 246 seconds)
*	twandy has quit (Client Quit)
*	ziocroc2 (~ziocroc@151.74.82.4) has joined
<jared-w>	The particular examples we've been doing are. Fibonacci can be written in a co-recursive or recursive way
<jared-w>	"the fibonacci" is nothing more than a mathematical function. It's how it's implemented that matters
*	zzq has quit (Read error: Connection reset by peer)
*	JuanDaugherty has quit (Quit: Ex Chat)
*	Mirandag (~Mirandag@host46-28-dynamic.10-87-r.retail.telecomitalia.it) has joined
<Mirandag>	ciao
<Mirandag>	!list
*	ziocroc has quit (Ping timeout: 246 seconds)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	Mirandag has quit ()
*	jmcarthur (~jmcarthur@2601:86:100:1620:11f3:5a14:fc98:ceb1) has joined
*	jeltsch (~wolfgang@82.131.87.29.cable.starman.ee) has joined
*	Subeff has quit (Quit: Page closed)
*	twandy has quit (Client Quit)
<crucify_me>	jared-w, thanks a lot for all the help .. et al
*	a3Dman has quit (Ping timeout: 240 seconds)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	nshepperd (~nshepperd@gateway/vpn/privateinternetaccess/nshepperd) has joined
*	fizbin (~Adium@pool-96-235-144-253.cmdnnj.east.verizon.net) has joined
*	conal_ has quit (Quit: Computer has gone to sleep.)
*	pandeiro has quit (Ping timeout: 246 seconds)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	Big_G has quit (Read error: Connection reset by peer)
*	OnkelTem has quit (Ping timeout: 240 seconds)
*	drewbert has quit (Quit: Leaving...)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	m0rphism (~m0rphism@HSI-KBW-085-216-002-127.hsi.kabelbw.de) has joined
*	hackagebot Villefort 0.1.1.12, io-streams 1.5.0.1, openssl-streams 1.2.1.2, snap-core 1.0.3.1, … and 2 more
*	hackagebot  → https://hackage.haskell.org/packages/recent
*	StoneToad has quit (Ping timeout: 252 seconds)
*	StoneToad (~StoneToad@ppp-199-167-119-201.storm.ca) has joined
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<c_wraith>	I'm still so slow at this...  and wow does it look like alphabet soup.
<c_wraith>	:t \f z t -> foldr (\c g x -> x : g (f c x)) (:[]) t z
<lambdabot>	Foldable t => (t2 -> t1 -> t1) -> t1 -> t t2 -> [t1]
*	Mon_Ouie has quit (Quit: WeeChat 1.9)
*	Welkin (~Welkin@107-147-90-29.res.bhn.net) has joined
*	twandy has quit (Client Quit)
<ignamv>	is there a tidy way to access variables bound in an inner do block in the outer do block?
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<c_wraith>	ignamv: return them.
<hpc>	^
<hpc>	it's the only way
*	nilg has quit (Ping timeout: 248 seconds)
<Welkin>	nested do-blocks sounds like perhaps a badly written function
*	slomo has quit (Read error: Connection reset by peer)
<ignamv>	what's the alternative?
<mniip>	mutable references!
*	oisdk has quit (Ping timeout: 240 seconds)
<hpc>	the alternative is not returning them ;)
<cocreature>	mniip: heretic!
<geekosaur>	I think that alternative thing is aimed at Welkin
<ignamv>	yes
<hpc>	ignamv: see acme-dont for a basic example of where extracting something from a do-block is simply impossible
<Welkin>	it depends on your code
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
<ignamv>	I understand that the function that gets the inner do has to do the work
<ignamv>	or rather cooperate in passing along the vars
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has joined
*	albertus1 (~seb@x55b4bad7.dyn.telefonica.de) has joined
<ignamv>	anyway thanks, I guess there's no sugar for this situation
<eschnett>	@jle` thanks! yes, the name “sum” is misleading in this context; however, if f and g are vector spaces, then this corresponds to the sum space.
<lambdabot>	 Parse failed: Parse error: name
*	Scip (~scip@76.121.6.102) has joined
<eschnett>	jle`: (see above)
*	caumeslasal has quit (Ping timeout: 240 seconds)
*	bmeynell (~bmeynell@142-197-108-175.res.bhn.net) has joined
*	hphuoc25 has quit (Remote host closed the connection)
*	bmeynell has quit (Remote host closed the connection)
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<mniip>	oh yes
<mniip>	direct sum spaces are product objects
<mniip>	and tensor products are exponentials!
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
*	oisdk (~textual@83.136.43.51) has joined
*	danthemyth has quit (Ping timeout: 248 seconds)
*	jao has quit (Ping timeout: 240 seconds)
*	insitu (~user@110.170.9.109.rev.sfr.net) has joined
*	twandy has quit (Client Quit)
*	bsmt has quit (Quit: lolbye)
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
*	henriksod has quit (Quit: henriksod)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	bsmt (~bsmt@host-174-45-104-119.bzm-mt.client.bresnan.net) has joined
*	iqubic (~iqubic@2601:602:8a00:1bd7::4c09) has joined
*	twandy has quit (Client Quit)
<jared-w>	tensor products are exponentials?
<jared-w>	So many things make sense now :p
*	nshepperd has quit (Quit: WeeChat 1.9)
*	a3Dman has quit (Ping timeout: 240 seconds)
*	caumeslasal (~Thunderbi@mar92-10-82-239-65-141.fbx.proxad.net) has joined
*	nshepperd (~nshepperd@gateway/vpn/privateinternetaccess/nshepperd) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<iqubic>	Like what?
*	Welkin has quit (Quit: leaving)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	crobbins (~crobbins@2600:1700:6391:1c20:e9a2:9c89:f0bb:7f7c) has joined
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	cyborg-one (~cyborg-on@62.16.17.205) has joined
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
*	djapo has quit (Quit: leaving)
*	stef204 (~stef204@unaffiliated/stef-204/x-384198) has joined
*	MitchellSalad has quit (Quit: WeeChat 1.4)
<dminuoso>	Mmm. Interesting, so there's other natural transformations than >>= id! Found about maybeToList :)
*	MitchellSalad (~MitchellS@ec2-34-205-225-169.compute-1.amazonaws.com) has joined
*	twandy has quit (Client Quit)
*	crobbins has quit (Ping timeout: 246 seconds)
*	theelous3_ (~theelous3@unaffiliated/theelous3) has joined
*	ltielen has quit (Quit: WeeChat 1.9)
*	jollygood2 has quit (Quit: http://www.okay.uz/ (Session timeout))
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	twandy has quit (Client Quit)
*	ga2arch (50b42bcd@gateway/web/freenode/ip.80.180.43.205) has joined
*	Whitesquall has quit (Ping timeout: 240 seconds)
*	insitu has quit (Ping timeout: 240 seconds)
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
<ga2arch>	hi, i'm trying to get a better understanding of this code http://lpaste.net/1291693641697329152, i don't understand how the third instance recurses
*	osa1 has quit (Ping timeout: 248 seconds)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
*	valentinbuza has quit (Ping timeout: 240 seconds)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	afarmer (~afarmer@94.119.64.4) has joined
*	soniku has quit (Ping timeout: 240 seconds)
*	ds has quit ()
*	project2501a1 (~project25@185.65.134.79) has joined
*	elpfen has quit (Quit: Lost terminal)
*	apo (~apo@2001:41d0:8:684e::3) has joined
*	raichoo has quit (Ping timeout: 240 seconds)
<apo>	hey
*	twandy has quit (Client Quit)
<apo>	does nomeata still hang out in here?
*	caumeslasal has quit (Ping timeout: 248 seconds)
<hexagoxel>	ga2arch: it doesn't recurse in the sense "inj = let f = Inr . f in f" only in the sense that it redirects to the (f :>: g) instance.
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<hexagoxel>	eh, the f :<: g instance I mean.
<ga2arch>	hexagoxel: mmm, how does the redirect work? 
<geekosaur>	the second inj is referencing a different instance than the first
<c_wraith>	apo: I can't say as I recall him saying anything recently.  He's still active on the mailing lists
<geekosaur>	by the types
<apo>	c_wraith: Well, as long as he still joins occasionally, I should be able to catch him
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<ga2arch>	geekosaur: mmm still confused :|
<geekosaur>	nomeata was last in here 18 Aug, according to my logs
<geekosaur>	for about half an hour
<hexagoxel>	inj :: f a -> (h :+: g) a; inj = Inr . (inj :: f a -> g a)
<apo>	geekosaur: oh, dang.
<apo>	thanks for checking :)
*	caumeslasal (~Thunderbi@mar92-10-82-239-65-141.fbx.proxad.net) has joined
<ga2arch>	hexagoxel: thanks, i'm getting there i think
*	twandy has quit (Client Quit)
*	dsantiago has quit (Quit: Computer has gone to sleep.)
*	conal (~conal@client-7-151.visitor-network.oxuni.org.uk) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	sleffy has quit (Ping timeout: 240 seconds)
<ga2arch>	hexagoxel geekosaur: i'm retarded, got it now, thanks 
<geekosaur>	ga2arch, basically you know the first one from the instance definition; you can derive the second by the fact that you applied Inr to its result to get the type from the first
*	Sampuka has quit (Ping timeout: 246 seconds)
*	caumeslasal has quit (Ping timeout: 252 seconds)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	thc202 has quit (Ping timeout: 240 seconds)
*	jared--w (~jared-w@138.68.44.28) has joined
*	albertus1 has quit (Quit: Leaving.)
*	caumeslasal (~Thunderbi@mar92-10-82-239-65-141.fbx.proxad.net) has joined
*	tarantoga (~tarantoga@x590e70d0.dyn.telefonica.de) has joined
*	conal has quit (Ping timeout: 248 seconds)
*	hackagebot Villefort 0.1.1.13, throttle-io-stream 0.2.0.0, tsuntsun 0.2.0.0
*	hackagebot  → https://hackage.haskell.org/packages/recent
*	jared-w has quit (Quit: ZNC - 1.6.0 - http://znc.in)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	richardmar (~richardma@ool-4577f25c.dyn.optonline.net) has joined
<richardmar>	hey boys
*	jared--w is now known as jared-w
*	Bhootrk_ has quit (Quit: Leaving)
*	ga2arch has quit (Quit: Page closed)
<ignamv>	is there agreement on what constitutes readable Haskell?
*	Bhootrk_ (~Bhootrk_@118.189.203.83) has joined
*	Bhootrk_ has quit (Max SendQ exceeded)
<hpc>	in the sense of consensus, or a list of rules, or a linter?
<jared-w>	ignamv: if you can send the code to 3 people and only 2 of them disagree with how you wrote it, it's readable :p
*	zzq (~zzq@46.120.114.167) has joined
<MarcelineVQ>	jared-w: I had to read that twice, pretty clever though
<hpc>	as the supreme court so hilariously put it, you'll know it when you see it
*	jfo has quit (Quit: Page closed)
*	augur (~augur@noisebridge130.static.monkeybrains.net) has joined
<ignamv>	haha
<ignamv>	dirty
*	`Guest00000 has quit (Ping timeout: 240 seconds)
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	twandy has quit (Read error: Connection reset by peer)
<ignamv>	any guidelines though?
*	twandy1 is now known as twandy
<hpc>	the most consistent guideline i can think of is "make it look like what it does"
<iqubic>	ignamv: use top level type signatures always.
<MarcelineVQ>	ignamv: oh sure, good ones too  https://github.com/tibbe/haskell-style-guide/blob/master/haskell-style.md
<hpc>	which is admittedly vague
<ignamv>	hpc: like this? http://blog.aerojockey.com/post/iocccsim
*	mizu_no_oto (~textual@c-24-60-15-130.hsd1.ma.comcast.net) has joined
*	djapo (~archie@unaffiliated/djapo) has joined
<ignamv>	argh, I pressed a shortcut with focus on the wrong window and now my PC is launching ze missiles
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	meijiJAPAN (~Mutter@178.241.201.129) has joined
<ignamv>	MarcelineVQ: thanks
<monochrom>	Use your own sense of aesthetics. Go with your heart.
*	mizu_no_oto has quit (Client Quit)
<hpc>	a contrived example might be, if part of your algorithm is printing a newline, use putStr "\n" instead of putStrLn ""
<hpc>	this goes beyond just haskell
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
*	heebo (~user@13.aa.089f.ip4.static.sl-reverse.com) has joined
*	infinity0 has quit (Ping timeout: 240 seconds)
*	infinity0 (~infinity0@freenet/developer/infinity0) has joined
*	duog has quit (Remote host closed the connection)
<monochrom>	Eliminate XY problems.
*	meijiJAPAN has quit (Client Quit)
*	twandy has quit (Client Quit)
*	heebo has quit (Remote host closed the connection)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	richardmar has quit (Quit: Lost terminal)
*	heebo (~user@13.aa.089f.ip4.static.sl-reverse.com) has joined
<hpc>	it's really hard to clarify any further, i keep arriving at "readable code is code you can read"
*	erisco (~erisco@198-84-159-71.cpe.teksavvy.com) has joined
<hpc>	other than to list classes of mistake and say "avoid these"
<monochrom>	I think that the most important cause of unreadable code is XY problems, not petty things such as indentation style or pointfree vs pointful.
<monochrom>	Debug your mind, not your code.
<Tuplanolla>	Haskell always becomes a mess, so the best thing you can do is a consistent mess.
<MarcelineVQ>	readable code is code that when you lpaste it and your error to ask what you did wrong, people can answer you
*	twandy has quit (Client Quit)
*	amar_ (~amarpotgh@tmo-097-76.customers.d1-online.com) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	amar_ is now known as Guest50010
*	heebo has quit (Remote host closed the connection)
*	chaosmasttter has quit (Ping timeout: 246 seconds)
*	iqubic has quit (Remote host closed the connection)
*	OnkelTem has quit (Ping timeout: 240 seconds)
*	Yuras has quit (Ping timeout: 248 seconds)
*	`Guest00000 (~user@37.113.172.119) has joined
*	marr (~ccc@159-205-229-96.adsl.inetia.pl) has joined
*	amir___ (b283f7d8@gateway/web/freenode/ip.178.131.247.216) has joined
*	caumeslasal has quit (Ping timeout: 252 seconds)
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
*	Ralith_ (~ralith@c-24-56-225-47.customer.broadstripe.net) has joined
*	meijiJAPAN (~Mutter@178.241.201.129) has joined
<meijiJAPAN>	 Is there any book for functional implementations of data structures and algorithms 
*	zcourts_ (~zcourts@185.92.25.82) has joined
<erisco>	meijiJAPAN, yeah
<hpc>	https://www.cs.cmu.edu/~rwh/theses/okasaki.pdf
<erisco>	that one
<osfameron>	I'm surprised that's still the only one people ever mention though
<hpc>	it's a good book
<osfameron>	okasaki is good but it's dense and hard to read if you haven't got a maths/cs backgound
*	amir___ has quit (Client Quit)
<osfameron>	yeah, it's great.  I'm just surprised there isn't a mid-market equivalent
<osfameron>	or one that covers more/different data-structures
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<eikke>	cocreature: makes sense, thanks
<hpc>	there probably is, it's just lacking the reputation
<hpc>	i imagine it's similar to how if you ask about a book for writing compilers, everyone suggests the dragon book
<monochrom>	Not enough demand. Plus for most programmers they just need to know "use Data.Map" and "use Data.HashMap".
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
*	zcourts has quit (Ping timeout: 240 seconds)
<monochrom>	Ha but I'll suggest the tiger book.
<monochrom>	Although, as more years go by, the tiger book suffers the same old problem.
*	afarmer has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
<hpc>	there's only one solution
<hpc>	we have to stop advancing computer science :P
*	herr_jth has quit ()
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<Tuplanolla>	There are many ways to a Pyrrhic victory.
<Tuplanolla>	Say nothing of substance and you will never be wrong.
*	ericdwhite has quit (Remote host closed the connection)
<monochrom>	Like this? http://www.vex.net/~trebla/humour/tautologies.html
*	meijiJAPAN has quit (Quit: Mutter: www.mutterirc.com)
<jared-w>	Nobody's going to mention the great Pearls of Functional Algorithm Design?
*	epsilonhalbe has quit (Quit: Leaving.)
<ignamv>	aaand hackage is down
*	twandy has quit (Client Quit)
*	dsantiago (~dsantiago@cpe-104-175-193-69.socal.res.rr.com) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<jared-w>	(of course it's got a slight bit of a reputation for being, ahem, mathy)
*	Guest50010 has quit (Ping timeout: 240 seconds)
<epta>	@hackage base
<lambdabot>	http://hackage.haskell.org/package/base
<bennofs>	ignamv: works for me
*	meijiJAPAN (~Mutter@178.241.201.129) has joined
<monochrom>	Oh damn I still have to read Pearls!
<epta>	ignamv: can confirm there was a temporary glitch with 503 response
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
*	coot____________ has quit (Quit: coot____________)
*	fizbin has quit (Quit: Leaving.)
*	Jeanne-Kamikaze (~Jeanne-Ka@2601:647:4300:f30f:dc29:de55:7143:2279) has joined
<monochrom>	Bought it for myself to celebrate finishing my thesis. Read chapter 1. Since then sitting on the bookshelf along with all the other decorative textbooks such as John Mitchell's Foundations for Programming Languages!
*	eacameron (~eacameron@dsl-50-5-80-133.fuse.net) has joined
<Tuplanolla>	We need Perils of Functional Algorithm Design to balance it out.
*	meijiJAPAN has quit (Client Quit)
*	sepp2k has quit (Quit: Leaving.)
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	simukis has quit (Quit: simukis)
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
<monochrom>	But Pearls tends to be a life-long collection of cute little pieces rather than a systematic textbook.
*	Lazersmoke (~Lazersmok@c-73-45-78-140.hsd1.il.comcast.net) has joined
*	stef204 has quit (Quit: WeeChat 1.9)
*	mizu_no_oto (~textual@c-24-60-15-130.hsd1.ma.comcast.net) has joined
<Lazersmoke>	Is there way to add haddock documentation to individual constructor fields? Like `data Stuff = Things A B C` and I want to document the A B and C individually
<monochrom>	Yes, see http://haskell-haddock.readthedocs.io/en/latest/index.html
*	twandy has quit (Client Quit)
<monochrom>	Err I guess no, unless you switch to the record syntax.
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<Lazersmoke>	ok
*	meijiJAPAN (~Mutter@178.241.201.129) has joined
*	hiratara has quit (Ping timeout: 255 seconds)
<ignamv>	yep, it's up
<Lazersmoke>	I just tried GADTs and they didn't work either :(
*	eacameron has quit (Remote host closed the connection)
*	dan_f (~dan@24.148.32.207) has joined
<ignamv>	anyone know of a shapefile library that reads the actual shapes?
<monochrom>	It is also record syntax if it's GADTs.
<ignamv>	the package "shapefile" just gives you the bytes for each shape entry
*	hiratara (~hiratara@240f:7:4708:1:64c1:459e:e8b7:3556) has joined
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<eikke>	Is there any way to get the above to work, assuming I can't change A, B or C's definitions, but can change M? http://lpaste.net/358190
*	nitros_ has quit (Quit: WeeChat 1.9)
*	mizu_no_oto has quit (Quit: Computer has gone to sleep.)
<eikke>	I'm aware how instance selection works so I know why this doesn't work, but I'd love to find some kind of work-around :)
*	mizu_no_oto (~textual@c-24-60-15-130.hsd1.ma.comcast.net) has joined
*	twandy has quit (Client Quit)
*	cloudhead (~cloudhead@ip5f5bd3e7.dynamic.kabel-deutschland.de) has joined
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
*	hexfive has quit (Quit: WeeChat 1.9)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	iiqof[m] (iiqofmatri@gateway/shell/matrix.org/x-aimdghenznhfqsmv) has joined
*	chao-tic (~chao@218.101.54.122) has joined
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	hexfive (~beknowly@50.35.82.88) has joined
*	meijiJAPAN has quit (Quit: Mutter: www.mutterirc.com)
<Lazersmoke>	does anyone have any advice on what to do about this module? It has a whole bunch of similar `data` definitions in it, with one or two support functions each. I don't really want to use records/lenes because I think it would clutter the namespace. Should I make one module for each type? https://github.com/Lazersmoke/civskell/blob/master/src/Civskell/Packet/Serverbound.hs#L171
*	hexfive has quit (Client Quit)
*	hexfive (~beknowly@50.35.82.88) has joined
*	twandy has quit (Client Quit)
*	SkyPatrol (~SkyPatrol@dsl51B6F885.fixip.t-online.hu) has joined
*	fizbin (~Adium@pool-96-235-144-253.cmdnnj.east.verizon.net) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	SkyPatrol_ has quit (Ping timeout: 240 seconds)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	iiqof[m] (iiqofmatri@gateway/shell/matrix.org/x-aimdghenznhfqsmv) has left ("User left")
*	halogenandtoast (~matthew-m@132.69.30.125.dy.iij4u.or.jp) has joined
<epta>	what is 'takeWhile' analogue in trifecta?
*	fizbin has quit (Client Quit)
<pavonia>	Lazersmoke: Have you considered using TH?
*	omilu (~omilu@iceland.sdf.org) has joined
<stevenxl>	hi folks
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<Lazersmoke>	I have, but idk how far that will really get me, since they don't all use Generics for serialization
<Lazersmoke>	so I'd have to write so many special cases that it would cancel out the benefit I get from TH
*	halogenandtoast has quit (Ping timeout: 240 seconds)
*	sleffy (~sleffy@c-24-7-67-0.hsd1.ca.comcast.net) has joined
*	setre has quit (Quit: ZNC 1.6.3+deb1 - http://znc.in)
*	hackagebot data-fix 0.0.7, th-typegraph 1.0.2, throttle-io-stream 0.2.0.1
*	hackagebot  → https://hackage.haskell.org/packages/recent
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	zoey has quit (Quit: Leaving)
*	Miroboru has quit (Read error: Connection reset by peer)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	a3Dman has quit (Ping timeout: 240 seconds)
<jared-w>	Lazersmoke: is there any reason you can't use Generics for serialization everywhere in the module so that TH is useful?
<Lazersmoke>	I could kludge it a little more and make that happen, but most of the information is not the same between different types. For instance, the handler functions are all unique
*	twandy has quit (Client Quit)
*	JagaJaga has quit (Ping timeout: 252 seconds)
*	heebo (~user@cpc96302-lewi18-2-0-cust642.2-4.cable.virginm.net) has joined
<Lazersmoke>	I think I'm just gonna put everything in its own module, and put all of that plus an export aggregator thingy in another package later (was planning on doing that for some unrelated stuff anyway)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	eacameron (~eacameron@dsl-50-5-80-133.fuse.net) has joined
*	conal (~conal@client-7-151.visitor-network.oxuni.org.uk) has joined
<jared-w>	That doesn't sound too bad. It's a shame there's no way to have multiple modules per file
*	jedws (~jedws@2001:8003:3582:aa00:890f:cdfd:f901:adf2) has joined
*	Dr_Lambda (~lambda@143.176.214.136) has joined
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has joined
*	sphinxo (~sphinxo@host-212-139-72-55.static.as9105.net) has joined
<dminuoso>	Mmm, so the composition (natural transformation) of monads is constrained to "from functor f to f"? I mean I can't just `join [Just3]` 
*	fizbin (~Adium@pool-96-235-144-253.cmdnnj.east.verizon.net) has joined
*	conal has quit (Ping timeout: 248 seconds)
*	theelous3_ is now known as theelous3
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
<Cale>	dminuoso: I'm not sure what the first part means, but you can't join [Just 3], indeed
<Cale>	:t join
<lambdabot>	Monad m => m (m a) -> m a
<Cale>	Has to be the same monad.
<Tuplanolla>	The composition of monads usually means something else, dminuoso.
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<monochrom>	The problem with "express in your own words to confuse the hell of yourself"
*	dsantiago has quit (Quit: Computer has gone to sleep.)
<Tuplanolla>	Take `newtype Jist a = Jist [Just a]` for example. Is `Jist` a monad?
*	twandy has quit (Ping timeout: 248 seconds)
*	twandy1 is now known as twandy
<Cale>	Tuplanolla: What type constructor is Just?
*	heebo has quit (Remote host closed the connection)
*	danthemyth has quit (Ping timeout: 260 seconds)
<monochrom>	+1
<Tuplanolla>	Pfft...
*	eacameron has quit (Remote host closed the connection)
*	nickolay has quit (Ping timeout: 255 seconds)
*	hiratara has quit (Quit: ZNC - http://znc.in)
<Tuplanolla>	I meant to write `newtype Mist a = Mist [Maybe a]`.
<monochrom>	That's better. Was wondering "what does jist mean?" too.
*	eacameron (~eacameron@dsl-50-5-80-133.fuse.net) has joined
*	hiratara (~hiratara@240f:7:4708:1:717c:9ac6:2d90:4a99) has joined
<monochrom>	Hrm that's going to be a difficult question.
*	twandy has quit (Client Quit)
*	xinming has quit (Ping timeout: 240 seconds)
*	Dr_Lambda (~lambda@143.176.214.136) has left
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<Tuplanolla>	In my experience accidentally writing jist is more common than correctly writing gist.
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<koz_>	Tuplanolla: English's semi-phonetic nature strikes again!
<DigitalKiwi>	are you someone that pronounces gif like the peanut butter?
<jared-w>	DigitalKiwi: you mean "wrong"? :p
<DigitalKiwi>	your words
<DigitalKiwi>	they hurt
<koz_>	jared-w: I'm confused.
<dminuoso>	Cale, Im still a bit stuck on some details of "monads are monoids in the category of endofunctors". The thing that Im not entirely clear on, is that group operation of the monoid.
<hpc>	someone needs to make a photoshop now of "peanut buttery cat"
*	systemfa_ (~rcyr@unaffiliated/rcyr) has joined
<orzo>	How do I write an instance for type-level naturals?  I'm getting Illegal type synonym family application in instance when I use (n+1)
<dminuoso>	Cale, I mean if I can't do join [Just 3], then it seems like the monoid operation is constrained to only some functor compositions
<Eduard_Munteanu>	dminuoso, unit is the unit and join does the "multiplication"
*	sfcg has quit (Remote host closed the connection)
<orzo>	GHC.TypeLits doesn't seem to havea Succ operator
<Cale>	dminuoso: Well, okay, so in the monoidal category (Set, ×, 1)
*	gugah (~gugah@181.28.219.193) has joined
*	gugah has quit (Max SendQ exceeded)
<Cale>	dminuoso: You have that a monoid comes equipped with a multiplication map: M × M -> M
<jared-w>	koz_: There are two ways to pronounce the file extension .gif--with a hard g or a soft g. I'm joking that only the hard 'g' is a valid pronounciation of 'gif' (even though, ironically, the creator of the format insists the soft 'g' is the correct way to pronounce it)
*	gugah (~gugah@181.28.219.193) has joined
*	twandy has quit (Client Quit)
<koz_>	jared-w: Hard g is like 'leg', while soft g is like 'germ'?
*	Welkin (~Welkin@107-147-90-29.res.bhn.net) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<jared-w>	precisely
*	systemfault has quit (Ping timeout: 240 seconds)
<Tuplanolla>	Then there's the rally driver g, which is like k, jared-w.
*	BartAdv has quit (Quit: Connection closed for inactivity)
<Eduard_Munteanu>	I thought it was the other way around.
*	mayhew (~mayhew@142.167.222.89) has joined
<koz_>	jared-w: So what's the peanut butter thing about?
<hpc>	there's a company that makes peanut butter called "jif"
*	desperek has quit (Quit: died)
<monochrom>	I propose the new naming scheme "the gift g and the gist g".
<koz_>	hpc: Ah, I see.
<Cale>	In the monoidal category (End(C), . , id), i.e. endofunctors on C with natural transformations between them, with the tensor product being functor composition (which importantly is a bifunctor on this category), and the unit being the identity functor
*	jao (~jao@pdpc/supporter/professional/jao) has joined
<hpc>	(also the cat comment was because of giffycat
<hpc>	)
<Cale>	You have that a monoid object M is equipped with a natural transformation ("multiplication")  M . M -> M
<koz_>	The only 'Jif' I'm familiar with: https://en.wikipedia.org/wiki/Cif#Name
<Cale>	right?
<hpc>	or gfycat or however it's spelled
<koz_>	(although it also used to be called Vim, for extra confusion)
<DigitalKiwi>	http://imgur.com/a/VAKh0
<Cale>	This natural transformation has, for each object X in C, a component at X, which is a map M (M X) -> M X
*	systemfa_ has quit (Read error: Connection reset by peer)
*	zero_byte has quit (Ping timeout: 252 seconds)
<hpc>	koz_: that's hilarious
<koz_>	DigitalKiwi: Consider me enlightened.
<Cale>	In Haskell, we would render that as a polymorphic function M (M a) -> M a
<Cale>	which is exactly join
*	twandy has quit (Client Quit)
*	reactormonk (~tass@p4FE1B55B.dip0.t-ipconnect.de) has joined
<Cale>	dminuoso: Does that help?
<monochrom>	"Use Vim to clean your windows!"
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<hpc>	let's see emacs do that
<jared-w>	M-x windex ;)
<koz_>	monochrom: A 'Vim is not Emacs' joke seems... dammit hpc.
<DigitalKiwi>	that's a jif gif
*	systemfault (~rcyr@unaffiliated/rcyr) has joined
*	`Guest00000 has quit (Ping timeout: 260 seconds)
*	`Guest00000 (~user@37.113.172.119) has joined
*	oisdk has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	twandy has quit (Client Quit)
*	wroathe (~Mutter@2601:445:480:7d0:dcd:a4e0:dd32:bac3) has joined
*	wroathe has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	ajmccluskey has quit ()
<monochrom>	https://emacsconference.com/about-emacs/
*	whoisxy (~whoisxy@5.42.130.254) has joined
<koz_>	monochrom: Is it Confusing Names Day or something?
<DigitalKiwi>	monochrom can we make a thing where we say gift like jift and gist like jist so they are the same g?
*	Jeanne-Kamikaze has quit (Quit: Leaving)
<DigitalKiwi>	simplifies things, really, it's for the good of all
<Eduard_Munteanu>	It's RSI injury awareness day. :P
*	MoarSpaceFi (~Forgot_my@71-32-236-66.slkc.qwest.net) has joined
*	peterbecich has quit (Read error: Connection reset by peer)
<MarcelineVQ>	gist is like jist already
*	takle has quit (Remote host closed the connection)
<DigitalKiwi>	also I need a citation on that the creator of gif pronounces it the way I do thing...cause that is one battle I want to win
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	a3Dman has quit (Ping timeout: 240 seconds)
<dminuoso>	Cale, well here's the thing I dont get: The natural transformation η: M x M -> M means for every a,b out of M, there exists a mapping from (a,b) 
<koz_>	DigitalKiwi: On a somewhat-related note, is your name the demonym, the fruit or the bird?
*	bennofs has quit (Ping timeout: 246 seconds)
<dminuoso>	Cale, so I guess the question is: What is this set limited to?
*	takle (~takle@host86-166-243-7.range86-166.btcentralplus.com) has joined
<DigitalKiwi>	[17:50:15]  <phrik>	Digitized, chirping, fruit with citizenship, ftw! lolque? http://i.imgur.com/AT40oPm.jpg
<koz_>	Well, that just explains everything! :P
*	rickerbh (~rickerbh@14-203-105-198.static.tpgi.com.au) has joined
*	systemfault has quit (Quit: Bye!)
<DigitalKiwi>	all and none at the same time, I'm not even from NZ >.>
<koz_>	DigitalKiwi: Not many people are. :P
<Eduard_Munteanu>	dminuoso, you mean mu
<dminuoso>	Eduard_Munteanu, uh yes.
<DigitalKiwi>	too bad they're like the friendly version of australians
<dminuoso>	Or. No
<koz_>	DigitalKiwi: I'm from NZ, so thanks! :)
*	twandy has quit (Client Quit)
<Eduard_Munteanu>	dminuoso, eta is 1 -> M
*	`Guest00000 has quit (Ping timeout: 248 seconds)
*	twandy (~Thunderbi@69.36.49.34) has joined
*	systemfault (~rcyr@unaffiliated/rcyr) has joined
*	`Guest00000 (~user@37.113.172.119) has joined
*	twandy has quit (Client Quit)
*	dsantiago (~dsantiago@cpe-104-175-193-69.socal.res.rr.com) has joined
*	forgottenone (~forgotten@176.40.57.105) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	soitgoes has quit (Ping timeout: 264 seconds)
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	sfcg (~sfcg@79.97.176.188) has joined
*	twandy has quit (Client Quit)
*	eacameron has quit (Remote host closed the connection)
<Cale>	dminuoso: I'm not sure I understand the question. There's another map (actually usually the one you wrote there is called μ and the other one is η) for the unit, and then they satisfy some laws.
*	sfcg has quit (Remote host closed the connection)
<Cale>	Oh, also, that's not a natural transformation in that case
<Cale>	It's just a function
<Cale>	dminuoso: You wrote ×, so you must be talking about Set monoids.
*	milesrout (~milesrout@unaffiliated/milesrout) has joined
<Cale>	In the case of the category of endofunctors and natural transformations, × gets replaced by functor composition, so pairs aren't around.
*	jellowj has quit (Ping timeout: 260 seconds)
<dminuoso>	Cale, for a monoid (S, ., 1), the monoid operation is defined as .: S x S -> S right?
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	conal (~conal@client-7-151.visitor-network.oxuni.org.uk) has joined
<milesrout>	data Pair a = (a, a); Free Pair = BinaryTree. Free [] = RoseTree. Free Maybe ~ Maybe. Free Tree ~ Tree
<milesrout>	is that right?
*	nighty- has quit (Quit: Disappears in a puff of smoke)
*	sfcg (~sfcg@79.97.176.188) has joined
*	zero_byte (~zer0@ip-89-103-110-138.net.upcbroadband.cz) has joined
*	marvin2 has quit ()
*	jellowj (~yellow-ja@dbn234.neoplus.adsl.tpnet.pl) has joined
<milesrout>	Free Maybe = Pure x | Free Nothing | Free (Just (Pure x)) | Free (Just (Free Nothing)) | ..., so it's either something, or nothing, so it's basically just Maybe...?
*	twandy has quit (Read error: Connection reset by peer)
*	jedws has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<milesrout>	plus the let x = Free (Just x) in x case?
*	mizu_no_oto has quit (Quit: Computer has gone to sleep.)
*	conal has quit (Ping timeout: 260 seconds)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<Cale>	dminuoso: We're talking about *Set* monoids now?
*	alveric (~LordAlver@i577A65F5.versanet.de) has joined
<Cale>	dminuoso: yes
*	preyalone has quit (Quit: Connection closed for inactivity)
<dminuoso>	Cale, wait a second. So in the world of haskell, that set is implicitly reduced to just one element?
<Cale>	dminuoso: The "a monad is a monoid in the category of endofunctors" thing is using a vastly more general notion of what the word "monoid" means.
<Cale>	https://en.wikipedia.org/wiki/Monoid_(category_theory) -- specifically, this one
*	alveric4 has quit (Ping timeout: 255 seconds)
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	mizu_no_oto (~textual@c-24-60-15-130.hsd1.ma.comcast.net) has joined
<Cale>	It's so called, because if you pick the category of sets, and for the tensor product ⊗ you pick Cartesian product, and for 1 you pick a one element set, then you get something equivalent to the original definition of a monoid.
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
<Cale>	But when we're talking about monads, those aren't the choices we make
*	twanvl has quit (Ping timeout: 260 seconds)
<Cale>	Instead of the category of sets and functions, we choose the category of endofunctors on whatever category C it is that we're interested in, and the natural transformations between them
<Cale>	Instead of the Cartesian product, we choose ⊗ to be composition of functors
<Cale>	and instead of a one-element set, 1 becomes the identity functor
*	lambda-11235 (~lambda-11@70.41.58.147) has joined
<Cale>	and then out falls the definition of a monad
*	zcourts (~zcourts@162.229-30-62.static.virginmediabusiness.co.uk) has joined
<c_wraith>	Yeah, the important thing to know about "monoid in the category of endofunctors" is that it's a restatement of the definition that only makes sense if you already know category theory.
<Cale>	haha, yeah, that's one way to put it
*	twandy has quit (Client Quit)
*	conal (~conal@client-7-151.visitor-network.oxuni.org.uk) has joined
*	ziyourenxiang has quit (Ping timeout: 252 seconds)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<Cale>	I'm assuming that dminuoso is trying to learn some category theory, and is not just interested in learning about monads in Haskell.
<Welkin>	and category theory is *not* required (or even all that helpful) in understanding and being able to use haskell
<Cale>	(If not, this whole thing might as well be considered offtopic)
<dminuoso>	Cale, monads I have understood rather early actually.
*	zcourts has quit (Remote host closed the connection)
*	zcourts (~zcourts@162.229-30-62.static.virginmediabusiness.co.uk) has joined
<Welkin>	haskell monads are easy, but people think they are some special thing that is heavy in theory
<Cale>	It's somewhat helpful, but it's not worth its time cost to learn if you're only interested in Haskell. As far as applications are concerned, category theory becomes more and more worthwhile the more other mathematics you're interested in.
<Welkin>	even though it's just an interface with >>= and join
<Welkin>	er
<Welkin>	>>= and return
<Cale>	But it's also quite nice for its own sake too.
*	zcourts_ has quit (Ping timeout: 252 seconds)
<hpc>	it's even less than that now
*	zcourts has quit (Remote host closed the connection)
<hpc>	the entirety of Monad can be summed up in join, since return is always pure
<Profpatsch>	Cheatsheet for the Dhall Configuration language
<Profpatsch>	https://github.com/Profpatsch/blog/blob/master/notes/dhall-cheatsheet.md
<Profpatsch>	non-turing-complete, typed, functional, interplolation/templating
<Profpatsch>	Would be happy about feedback. The cheatsheet should give a good overview if one already knows Haskell.
*	zcourts (~zcourts@162.229-30-62.static.virginmediabusiness.co.uk) has joined
<Cale>	hpc: Well, you need to define it somehow.
<Profpatsch>	(Dhall is by Gabriel Gonzalez)
*	mizu_no_oto has quit (Quit: Computer has gone to sleep.)
<Cale>	hpc: You could say (>>=) and Applicative
<Cale>	though that's a bit redundant
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<Cale>	You'll get (<*>) for free from (>>=) and return also :)
*	conal has quit (Ping timeout: 248 seconds)
<Cale>	Usually, I prefer just to write a Monad instance and then use it to get Functor and Applicative
*	scottj (~s@unaffiliated/scottj) has left
<dminuoso>	Cale, oh. I think I may have been conflating "a monoidial category" and a "monoid"
<dminuoso>	Which might explain exactly the confusion I have been experiencing for a while
<Welkin>	Cale: you can only do that in haskell though because of liftM, ap, and pure
<Welkin>	in purescript you can't do this, because liftM, ap, and return don't exist
<c_wraith>	You could define them to use as helpers.
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<c_wraith>	much like Traversable provides foldMapDefault and fmapDefault as helpers in the module.  (in case you don't want to derive those definitions, I guess?)
<dminuoso>	Cale, oh yeah. Thanks a lot for your patience and that last link on monoid. The term is truly overloaded in math it seems. :(
*	SkyPatrol_ (~SkyPatrol@netacc-gpn-7-138-113.pool.telenor.hu) has joined
*	sfcg has quit (Remote host closed the connection)
*	twandy has quit (Client Quit)
<dminuoso>	Cale, so monads are monoid *objects* of the monoidal *category* of endofunctors?
*	SkyPatrol has quit (Ping timeout: 240 seconds)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	mizu_no_oto (~textual@c-24-60-15-130.hsd1.ma.comcast.net) has joined
*	cyborg-one has quit (Quit: cyborg-one)
<dminuoso>	I definitely need a book on this.
<paf31>	Welkin: ap exists https://pursuit.purescript.org/packages/purescript-prelude/3.1.0/docs/Control.Monad#v:ap
*	markus1199 (~markus118@p4FDC0141.dip0.t-ipconnect.de) has joined
<paf31>	liftM is liftM1
*	kipras is now known as kipras`away
*	kipras`away is now known as kipras
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
**** ENDING LOGGING AT Sun Sep  3 16:32:00 2017

**** BEGIN LOGGING AT Sun Sep  3 17:59:08 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	acidjnk (~acidjnk22@p4FFBD86B.dip0.t-ipconnect.de) has joined
*	twandy has quit (Client Quit)
*	rcat has quit (Remote host closed the connection)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	MoarSpaceFi has quit (Ping timeout: 240 seconds)
*	twandy has quit (Client Quit)
*	jellowj has quit (Ping timeout: 252 seconds)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	acarrico has quit (Ping timeout: 240 seconds)
*	Destol has quit (Quit: leaving)
*	danthemyth has quit (Remote host closed the connection)
*	acarrico (~acarrico@pppoe-68-142-58-22.gmavt.net) has joined
<crucify_me>	https://ptpb.pw/w-zU   hi again, the constant function looks like it takes more than two arguments in the ghci examples. but isn't it defined to take just 2?
<c_wraith>	> const id () 5
<lambdabot>	 5
<c_wraith>	crucify_me: any function with a sufficiently polymorphic return type can return a function
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<c_wraith>	> const const () const () id 5
<lambdabot>	 error:
<lambdabot>	     • No instance for (Typeable a0)
<lambdabot>	         arising from a use of ‘show_M326319284077136244216352’
<c_wraith>	heh, whoops
<c_wraith>	> const const () const const () id 5
<lambdabot>	 error:
<lambdabot>	     • Couldn't match expected type ‘Integer -> t’ with actual type ‘()’
<lambdabot>	     • The function ‘const’ is applied to 7 arguments,
<c_wraith>	Hmm.  I should give up now.
<crucify_me>	sorry I don't see what you're doing. 
<erisco>	crucify_me, all functions take exactly one argument
*	plutoniix has quit (Quit: Leaving)
*	twandy has quit (Client Quit)
<crucify_me>	actually yeah erisco that I see...
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<crucify_me>	so here's the thing...
<erisco>	so, the mystery can be reduced to: why does const take two arguments if all functions just take one argument?
<crucify_me>	that I know the answer to
<crucify_me>	because
<DigitalKiwi>	higher functions?
*	dfeuer (~dfeuer@wikimedia/Dfeuer) has joined
<crucify_me>	const id 6 is all const takes there. it *resolves* to id
<erisco>	reduces to, yes
*	Guest50103 has quit (Changing host)
*	Guest50103 (~nitrix@haskell/developer/nitrix) has joined
*	Guest50103 is now known as nitrix
<c_wraith>	crucify_me: but then how do you apply that function to an argument?
<c_wraith>	crucify_me: (whitespace!)
*	Ralith__ (~ralith@c-24-56-225-47.customer.broadstripe.net) has joined
*	twandy has quit (Client Quit)
<crucify_me>	right, it reduces to id, then whitespace, then you get 5
<erisco>	const x  reduces to the function  \y -> x
*	vaibhavsagar (~vaibhavsa@42.61.209.77) has joined
<erisco>	(\y -> x) z  reduces to  x
<erisco>	hence  const x z  reduces to x
<erisco>	const x z a  reduces to  x a
*	Ralith_ has quit (Ping timeout: 260 seconds)
<crucify_me>	thanks hold on please
<erisco>	adding parentheses may help
<crucify_me>	erisco there's an example there with the parens
<c_wraith>	:t \f z t -> foldr (\c g x -> x : g (f c x)) (:[]) t -- let's just admit this was sort of hard to write the first time.
<lambdabot>	Foldable t => (t3 -> t2 -> t2) -> t1 -> t t3 -> t2 -> [t2]
<erisco>	I mean that adding parens to what I just said may help
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<erisco>	(const x) z  reduces to  x;  ((const x) z) a  reduces to  x a
*	AxelAlex (~AxelAlex@dynamic-addr-130-13.resnet.rochester.edu) has joined
<c_wraith>	Err.  I have no idea where that t1 snuck in from
<erisco>	the latter is evident by the former
<crucify_me>	wha?
*	nlis has quit (Remote host closed the connection)
<crucify_me>	let me ask some questions about the beginning of the paste, where ....
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<erisco>	if  x reduces to y  then  x a reduces to y a
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
<crucify_me>	all 3 of these functions are combinators.
*	a3Dman has quit (Ping timeout: 240 seconds)
*	hackagebot wai-secure-cookies 0.1.0.2 – <i>Added by alaminium, Mon Sep 4 00:18:43 UTC 2017.</i> – https://hackage.haskell.org/package/wai-secure-cookies
<crucify_me>	so is there something more grand going on in this example, that will help me understand combinators and their opposites(?) closures
<crucify_me>	?
<erisco>	which example?
<crucify_me>	https://ptpb.pw/w-zU
*	Welkin has quit (Quit: leaving)
<crucify_me>	the whole thing with const id = flip const
*	twandy has quit (Client Quit)
*	Big_G (~Big_G@75-165-48-101.tukw.qwest.net) has joined
<erisco>	what particular thing do you not understand?
*	tromp (~tromp@ip-217-103-3-94.ip.prioritytelecom.net) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<erisco>	I don't know any grand reason for their equivalence other than you can show it by their definitions
<crucify_me>	so, what exactly does the constant func do?
<erisco>	it throws away the second argument and keeps the first
<crucify_me>	like I know pi is a constant
*	jle` just now realizes how weird of a name 'direct sum' is
*	louispan (~textual@203.38.203.134) has joined
<Cale>	crucify_me: A constant function is one which gives the same result no matter which argument is supplied
<jle`>	( eschnett, mniip )
<erisco>	ah, well it constructs constant functions
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<erisco>	you are familiar with lines, yes? y=mx+b ?
*	a3Dman (~3Dman@156.222.116.81) has joined
*	a3Dman has quit (Changing host)
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
<crucify_me>	essentially
*	MP2E has quit (Quit: reboot)
<erisco>	well, const lets you make all the flat (horizontal) lines
<erisco>	the ones which remain constant as x varies
*	tromp has quit (Ping timeout: 260 seconds)
*	MP2E (~cray@ip68-224-146-82.lv.lv.cox.net) has joined
<erisco>	so,  const 2  is the horizontal line at y=2,  and generally  const x is the horizontal line at y=x
<crucify_me>	right, y doesn't change
<erisco>	that's right
*	forgottenone (~forgotten@176.40.57.105) has joined
*	Guest5326 has quit (Ping timeout: 252 seconds)
<erisco>	lines are a specialisation, since const doesn't depend on theory to talk about lines, but it is a valid application of it
*	twandy has quit (Read error: Connection reset by peer)
<erisco>	generally speaking it just constructs the constant functions
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<crucify_me>	thanks I feel its easy, but I think I'm also trying to see what links these 3 functions together, the common thread that makes them "combinators"
<crucify_me>	erisco, 
<crucify_me>	Cale
<crucify_me>	is it just coincidence that these 3 are combinators?
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	theelous3 has quit (Ping timeout: 260 seconds)
<erisco>	crucify_me, well you said at the top they are combinators because they have no free variables
*	andyhuzhill has quit (Ping timeout: 248 seconds)
*	a3Dman has quit (Ping timeout: 260 seconds)
*	darjeeling_ (~darjeelin@115.215.40.70) has joined
*	dddddd has quit (Read error: Connection reset by peer)
<erisco>	that is a necessary and sufficient condition
*	kvda (~kvda@unaffiliated/kvda) has joined
*	twandy has quit (Client Quit)
*	ystael (~ystael@209.6.53.93) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<erisco>	but "combinator" might also be used in a nontechnical sense
<crucify_me>	I was reading about that. I think its technical in this context
<erisco>	so, just an operator that puts two things together into a like object
<erisco>	in lambda calculus yes, it is techincal
<crucify_me>	then there's the y-combinator, which I don't understnad
*	fresheyeball (~isaac@h88.129.189.173.dynamic.ip.windstream.net) has joined
*	Youmu (uid129469@gateway/web/irccloud.com/x-kcldraqgvspwvayr) has joined
<fresheyeball>	hey out there
<erisco>	it is important but I haven't spent the time to study it
<erisco>	you should figure it out and teach it to me sometime :)
<fresheyeball>	I have a sqlite db with a column of type timestamp
<fresheyeball>	the date times are stored as unix time
<crucify_me>	also , at the bottom of the paste, where it says const id is a terrible way to express the concept. word erisco will do !
<fresheyeball>	I'm using the sqlite-simple library and can't get it to parse
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	kuttifunk1 (~Thunderbi@host-188-174-201-62.customer.m-online.net) has joined
<erisco>	nothing wrong with const id that I can see
<DigitalKiwi>	dibblego help we need timedate help
*	kuttifunk has quit (Ping timeout: 240 seconds)
*	kuttifunk1 is now known as kuttifunk
<dibblego>	u wot m8?
<DigitalKiwi>	this person is having time problems! we need a link
<erisco>	const id  is the constant function of id
<Axman6>	when is their problem???
<DigitalKiwi>	UTC NOW 
<Axman6>	oh, I can't help for 10 hours then, until they catch up!
<erisco>	but if a human is more likely to think about the problem as "I want the second argument" then maybe this is a convoluted process
<dibblego>	https://gist.github.com/tonymorris/90522094bb964fd0d7bb42acd43ff4fb#times
<crucify_me>	the constant function of id ?  
<erisco>	if instead they're likely to be thinking about constant functions then const id is better
<erisco>	since flip const doesn't make constant functions
*	louispan has quit (Quit: louispan)
<erisco>	yes, same as the constant function of 3 and so forth
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	ali_bush has quit (Remote host closed the connection)
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
*	louispan (~textual@203.38.203.134) has joined
*	andyhuzhill (~Thunderbi@14.23.45.178) has joined
*	mou has quit (Quit: WeeChat 1.4)
<erisco>	using const as "I want the first argument" is a bit strange but common
<erisco>	more deliberate might be  curry fst
<erisco>	then the second argument is  curry snd
<crucify_me>	its sort of trippy, this
<crucify_me>	just pure logic
*	twandy has quit (Client Quit)
<crucify_me>	thanks.. I'm going to sleep on it
<erisco>	variables are not unlogic
*	halogenandtoast (~matthew-m@132.69.30.125.dy.iij4u.or.jp) has joined
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<erisco>	they're just cretinous warts
*	cranej (~cranej@42.120.74.200) has joined
<crucify_me>	lovely, why?
<nisstyre>	programming is a total sham
<nisstyre>	variables are definitely warts
*	takle (~takle@host86-166-243-7.range86-166.btcentralplus.com) has joined
*	cranej has quit (Client Quit)
<crucify_me>	funny
<erisco>	I am using hyperbole, but first of all they're horribly complicated to explain relative to the rest of the system
<erisco>	definitely easy to get wrong
*	cranej (~cranej@42.120.74.200) has joined
*	argent0 has quit (Ping timeout: 255 seconds)
*	sigmundv__ has quit (Ping timeout: 252 seconds)
<erisco>	secondly, they can be a symptom of… poor design
<erisco>	not that @pl is a design genius either
*	mathieu (~Topolo@185.79.221.206) has joined
<crucify_me>	>const id 6 5
<erisco>	you've probably been advised not to use explicit recursion. why? because we have functions that do that already
*	twandy has quit (Client Quit)
<erisco>	in a similar vein, why use variables if we have functions which do the appropriate plumbing already
*	halogenandtoast has quit (Ping timeout: 240 seconds)
*	plutoniix (~q@118.174.194.115) has joined
*	mizu_no_oto_work has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<crucify_me>	erisco, how do we invoke lambdabot here?
*	ali_bush (~ali_bush@gentoo/developer/alibush) has joined
<erisco>	> const id 6 5
<lambdabot>	 5
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<nisstyre>	erisco: how would you implement binary search without explicit recursion?
*	lev1athan (~lev1athan@185.16.85.56) has joined
*	MP2E has quit (Quit: leaving)
<Axman6>	fix
<nisstyre>	just curious
*	takle has quit (Ping timeout: 240 seconds)
*	lev1athan has quit (Quit: leaving)
<crucify_me>	> const id 6 5
<lambdabot>	 5
<erisco>	well, like @pl is not a design genius, neither is fix ;)
*	lev1athan (~lev1athan@185.16.85.56) has joined
<crucify_me>	well this is how I finally got it:
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
<crucify_me>	> const (id 6) 5
<lambdabot>	 6
*	ali_bush has quit (Read error: Connection reset by peer)
<crucify_me>	so not rocket science
*	twandy has quit (Client Quit)
<crucify_me>	thanks gotta go I'm turning into a cretinous wart.
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<crucify_me>	thanks alot
*	louispan has quit (Quit: louispan)
*	ali_bush (~ali_bush@2407:7000:8141:cf00::2) has joined
*	ali_bush has quit (Changing host)
*	ali_bush (~ali_bush@gentoo/developer/alibush) has joined
<eschnett>	is there (un)currying for arrows? i’m looking for the signature   Arrow a => a b (a c d) -> a (b, c) d
*	reactormonk has quit (Ping timeout: 248 seconds)
<eschnett>	`app` seems related, but has the other arrow in the first argument.
*	mathieu has quit (Quit: mathieu)
Python interface unloaded
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Sun Sep  3 18:54:13 2017

**** BEGIN LOGGING AT Mon Sep  4 12:05:32 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<sqooq>	cocreature, I kind of wanted to make a terminal program
<cocreature>	sqooq: not sure how that’s related to default options
<sqooq>	only problem is that usually the instrument is created interactively in ghci
*	IlanGodik (uid40361@gateway/web/irccloud.com/x-ikepcpfsikzlwvoa) has joined
<sqooq>	cocreature, like you call the program with two necessary parameters, the input and output file, but  you can alter the other options, for example instrument to use, tempo, etc.
*	JeanCarloMachado (~jean@177.34.74.251) has joined
*	pera (~pera@unaffiliated/pera) has joined
*	JeanCarloMachado has quit (Client Quit)
<cocreature>	sqooq: can you be a bit more specific? what problem are you currently having?
*	twandy has quit (Client Quit)
*	JeanCarloMachado (~jean@177.34.74.251) has joined
<crucify_me>	hello I'm still confused about sumptin'  ..  if we have this const id = flip const  .. when would you ever use that (in a very simple case)?
<sqooq>	I want it to be like (my program is called gould) : gould input.txt output.wav -i instr1 -t 80
*	JeanCarloMachado has quit (Client Quit)
*	JeanCarloMachado (~jean@177.34.74.251) has joined
<sqooq>	cocreature, only thing is that "instr1" is a haskell function using csound expression.
<sqooq>	and it's quite comfortable to build that instrument in ghci
*	takle (~takle@host109-153-108-68.range109-153.btcentralplus.com) has joined
<sqooq>	yeah nvm maybe a terminal executable isn't the right path
*	jao (~jao@pdpc/supporter/professional/jao) has joined
<geekosaur>	could just make that a haskell expression via hint or whatever
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<geekosaur>	also I think a terminal program would be the hard way. run it in a terminal, go steal chunks from:
<geekosaur>	@hackage ghci-ng
<lambdabot>	http://hackage.haskell.org/package/ghci-ng
<geekosaur>	which is a standalone ghci used as a testbed for ghci improvements
<sqooq>	the instrument can be done in a file too
<cocreature>	depending on how restricted these expressions are, making a custom parser might also be a reasonable option
<geekosaur>	("standalone" meaning you don't have to build all of ghc to change it)
<sqooq>	honestly if the instrument is going to be complex, that's probably going to be the case
*	twandy has quit (Client Quit)
<sqooq>	cocreature, well yeah my idea is to use getargs and figure something out from there
*	coot____________ has quit (Quit: coot____________)
<geekosaur>	so, the hint package lets you evaluate arbitrary Haskell expressions
<cocreature>	sqooq: I highly recommend using a library such as "optparse-applicative" for parsing cli args instead of using "getArgs"
<geekosaur>	if you also need sandboxing, consider the MuEval package oinstead (it's what lambdabot uses)
<sqooq>	cocreature, noted, thank you
<sqooq>	geekosaur, i'm trying to consider users too
<geekosaur>	if you're considering users, you're building a GUI and letting that deal with e.g. defaults
<sqooq>	kek who am I kidding, I'm not going to have any users
<geekosaur>	and yes, the usual way to do defaults for this kind of thing is a record with the defaults and record updates for overrides
<sqooq>	maybe I should alter my program to do midi with pitchbends instead
*	Mon_Ouie has quit (Ping timeout: 240 seconds)
*	mlehmk has quit ()
*	staafl_ (~staafl@95-43-31-54.ip.btc-net.bg) has joined
<sqooq>	geekosaur: ok
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<sqooq>	problem with that, is that my function changes depending on the default
<sqooq>	for example if the user doesn't include a line representation, then I have to omit that entirely from the final function.
<crucify_me>	I mean, what is the concept behind " const id " or " flip const " ? (I read a comment that 'const id' was a "terrible way to express the concept")
<geekosaur>	sqooq, so the default is id
<sqooq>	geekosaur, sorry, no like within the function definition itself
<sqooq>	it's basically a bunch of composed functions, and one section of that composition has to be removed
<geekosaur>	yes, and?
<geekosaur>	functions are first class...
*	Natch (~Natch@h-155-122.A444.priv.bahnhof.se) has joined
<geekosaur>	so you have a record of functions, at the end you compose them together, at the beginning they're all id
*	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has joined
<geekosaur>	or other suitable default
<crucify_me>	sorry moved that to beginners channel
<sqooq>	i'm missing something
*	ashpokemonZ has quit (Ping timeout: 246 seconds)
<geekosaur>	it would be easier to explain if you provided something to start with, so I can match it; a generic example might not help you much
<geekosaur>	@paste
<lambdabot>	Haskell pastebin: http://lpaste.net/
<sqooq>	my code is here
<sqooq>	https://github.com/Cypress-the-Kinaesthetician/Goulds-Mark
<sqooq>	go to src/Parser
*	twandy has quit (Client Quit)
<sqooq>	actually hold on
<pikajude>	i've just created a program that's like stylish-haskell for cabal files
<pikajude>	would anyone be interested in trying it out
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	quobo has quit (Quit: Connection closed for inactivity)
*	cloudhead (~cloudhead@ip5f5bd3e7.dynamic.kabel-deutschland.de) has joined
<geekosaur>	https://github.com/Cypress-the-Kinaesthetician/Goulds-Mark/blob/master/src/Parser.hs#L226 is this what you want to make changeable?
<sqooq>	geekosaur, i would have to rework things. I lied it's not as simple as removing a composition but I can make it that way.
<sqooq>	yes
<geekosaur>	although, seems llike housekeeping finally reached this part of the building so I may vanish abruptly :/
<geekosaur>	("just a minute please" is not a thing...)
<sqooq>	that's fine
*	samrat has quit (Ping timeout: 252 seconds)
<sqooq>	right now it's like in testing form
<sqooq>	really i would have to switch out quite a few function
*	Destol (~Destol@108.63.167.16) has joined
*	meadowlark (~meadowlar@unaffiliated/meadowlark) has joined
*	sfcg (~sfcg@79.97.176.188) has joined
*	sfcg has quit (Remote host closed the connection)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	sfcg (~sfcg@8.25.196.26) has joined
*	hackagebot has quit (Read error: error:1408F119:SSL routines:SSL3_GET_RECORD:decryption failed or bad record mac)
*	hackagebot (~hackagebo@octavia.lambda.xyz) has joined
<iqubic>	Bottom is weird.
<iqubic>	> fix id
<lambdabot>	 mueval-core: Time limit exceeded
<iqubic>	> fix (id 5)
<lambdabot>	 error:
<lambdabot>	     • Ambiguous type variable ‘a0’ arising from a use of ‘show_M713643997305...
<lambdabot>	       prevents the constraint ‘(Show a0)’ from being solved.
<iqubic>	> fix id 5
<lambdabot>	 mueval-core: Time limit exceeded
<iqubic>	Fix is a funny beast.
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	Mon_Ouie has quit (Ping timeout: 240 seconds)
*	jakub_ (~jakub@171.15.broadband2.iol.cz) has joined
*	twandy has quit (Client Quit)
<orzo>	just think of it as a looping control structure
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	decached has quit (Ping timeout: 246 seconds)
<c_wraith>	In fact, think of it as *the* looping control structure.
<c_wraith>	It's an abstraction of general recursion.
*	dsantiago (~dsantiago@cpe-23-242-86-141.socal.res.rr.com) has joined
<orzo>	it was years ago, but once improved performance by using fix rather than simple recursion
<c_wraith>	> fix (\x loop -> if x == 0 then 1 else x * loop (x - 1)) 5
<lambdabot>	 error:
<lambdabot>	     • Occurs check: cannot construct the infinite type: t ~ t0 -> t
<lambdabot>	       Expected type: t0 -> t
<orzo>	so ghc, at least at the time, seems to prefer it
<orzo>	c_wraith, arguments are reversed
<iqubic>	orzo: How does one use fix as a looping construct.
<c_wraith>	> fix (\loop  x-> if x == 0 then 1 else x * loop (x - 1)) 5
<lambdabot>	 120
<c_wraith>	orzo: yeah, I figured it out
<c_wraith>	iqubic: like that
*	caumeslasal (~Thunderbi@mar92-10-82-239-65-141.fbx.proxad.net) has joined
<iqubic>	How does that work?
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<jakub_>	how are instances selected in haskell? at compile time? how does someone debug the reasons why some instances are / aren't picked?
<orzo>	don't give the compiler much choice
<c_wraith>	iqubic: The lambda represent an "open" version of factorial.  That is, instead of being recursive, it just hands off to some function passed as its first argument
<orzo>	avoid overlapping instances
<Philonous>	jakub_, They are selected at compile time, yes. 
<c_wraith>	jakub_: don't use overlapping or incoherent instances.
<iqubic>	jakub_: What issues are you having? Can I see the code?
*	twandy has quit (Ping timeout: 260 seconds)
*	twandy1 is now known as twandy
<iqubic>	but c_wraith, how does the recursion happen?
*	sigmundv__ (~sigmundv@31.200.141.195.threembb.ie) has joined
<c_wraith>	iqubic: fix "closes" the definition, but passing the function to itself
<iqubic>	I see.
<c_wraith>	*by
<iqubic>	And how does fix terminate the computation?
<jakub_>	iqubic: i will have to make a gist of it, its rather complicated and i doubt most part are relevant to the problem, i will come back with code later :)
<c_wraith>	It doesn't.  The lambda does that by not recursing.
*	vlatkoB has quit (Remote host closed the connection)
<iqubic>	Oh, I see.
*	twandy has quit (Client Quit)
<iqubic>	@src fix
<lambdabot>	fix f = let x = f x in x
*	emmanuel_erc has quit (Remote host closed the connection)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	quobo (uid178934@gateway/web/irccloud.com/x-bdltkcjsyknngwra) has joined
<iqubic>	OH, I see how that works.
<iqubic>	Why does the loop argument have to come first?
<orzo>	because of the way currying works
<c_wraith>	:t (\loop  x-> if x == 0 then 1 else x * loop (x - 1))
<lambdabot>	(Num t, Eq t) => (t -> t) -> t -> t
<c_wraith>	iqubic: that's how you make the types line up :)
<orzo>	a two argument function is actually a single-argument function that returns a function
*	robotroll (~robotroll@unaffiliated/robotroll) has joined
*	BlueRavenGT (~BlueRaven@8-22-13-219.utopiafiber.net) has joined
<iqubic>	orzo: I see that.
<orzo>	so fix accepts a single argument function
<c_wraith>	iqubic: you unify (a -> a) with ((t -> t) -> (t -> t)), and get fix :: ((t -> t) -> (t -> t)) -> (t -> t)
<orzo>	if you give it a two-argument lambada, you're using currying
*	monochrom (trebla@216.138.220.146) has joined
*	robotroll has quit (Read error: Connection reset by peer)
*	albertus1 (~seb@x55b4bb70.dyn.telefonica.de) has joined
<c_wraith>	orzo: the only way I can ever imagine fix being a performance win is if your general-recursion version missed tying a knot that the fix definition does tie, so used more memory
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	augur has quit (Remote host closed the connection)
*	Guest52771 has quit (Remote host closed the connection)
*	augur (~augur@c-73-71-242-163.hsd1.ca.comcast.net) has joined
*	bs0d has quit (Quit: Leaving)
<c_wraith>	Hmm.  that's not fully true.  since you pass non-recursive things to fix, the optimizer can be more aggressive with them without the loop-breaker nonsense.  That's also an avenue for better optimization, potentially
*	LnL has quit (Ping timeout: 255 seconds)
*	decached (~decached@cpe-198-255-143-137.stny.res.rr.com) has joined
<pgiarrusso>	c_wraith: that can actually matter a lot
<orzo>	shrug, it's usually not hard to compare a fix-based version, so just keep it in mind when optimizing
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<pgiarrusso>	I forget details/source, but I've had GHC completely optimize away an interpreter (for a given source program), but only once some recursion was replaced via fix
*	ltielen (~ltielen@ptr-3z2lko2bunnpt1ahjk9.18120a2.ip6.access.telenet.be) has joined
*	t7 (~chatzilla@host86-138-8-152.range86-138.btcentralplus.com) has joined
<c_wraith>	that sounds like a ridiculous amount of inlining/simplification.  That also sounds pretty cool.
<monochrom>	Tomorrow's news headline all over Hacker News: GHC -O2 optimizes away all of GHCi. >:)
*	xaviergmail (~xavier@24-54-43-73.si.cgocable.ca) has joined
*	connrs has quit (Ping timeout: 246 seconds)
*	augur has quit (Ping timeout: 260 seconds)
*	bossin (4c40f3be@gateway/web/cgi-irc/kiwiirc.com/ip.76.64.243.190) has joined
*	LnL (~L0CKnL0aD@78-23-24-36.access.telenet.be) has joined
*	xaviergmail has quit (Client Quit)
*	connrs (~connrs@conners.plus.com) has joined
<pgiarrusso>	well, GHC *does* remove interpretative overhead, doesn't it :-)
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	cdg (~cdg@162-226-219-152.lightspeed.tukrga.sbcglobal.net) has joined
*	bossin (4c40f3be@gateway/web/cgi-irc/kiwiirc.com/ip.76.64.243.190) has left
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
<pgiarrusso>	it was a pretty academic example, but GHC still acted as a (Jones-)optimal partial evaluator on that interpreter, which was fun :-)
*	Lazersmoke (~Lazersmok@c-73-45-78-140.hsd1.il.comcast.net) has joined
<Lazersmoke>	is there a way to make haddock link to the documentation for the unit type () ? I tried '()' and it just left it with the single quotes in the generated docs
*	dsantiago has quit (Quit: Computer has gone to sleep.)
*	halogenandtoast (~matthew-m@132.69.30.125.dy.iij4u.or.jp) has joined
*	inhortte has quit (Quit: Leaving.)
<c_wraith>	Lazersmoke: haddock only really documents definitions, and () doesn't have a definition in Haskell source, because it's syntactically special.
*	takle has quit (Remote host closed the connection)
*	amar_ (~amarpotgh@p57967C29.dip0.t-ipconnect.de) has joined
<Lazersmoke>	rip
<pikajude>	it's data () = ()
*	amar_ is now known as Guest79700
*	jbalint has quit (Ping timeout: 264 seconds)
*	takle (~takle@host109-153-108-68.range109-153.btcentralplus.com) has joined
<monochrom>	https://mail.haskell.org/pipermail/haskell-cafe/2013-April/107775.html
<Lazersmoke>	[()](https://www.youtube.com/watch?v=dQw4w9WgXcQ)
*	twandy1 (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<Lazersmoke>	:P
*	twandy has quit (Read error: Connection reset by peer)
*	twandy1 is now known as twandy
*	ChanServ gives channel operator status to monochrom
*	Lazersmoke (~Lazersmok@c-73-45-78-140.hsd1.il.comcast.net) has left (requested by monochrom (Lazersmoke))
*	monochrom removes channel operator status from monochrom
*	jao has quit (Ping timeout: 260 seconds)
*	cdg has quit (Ping timeout: 240 seconds)
<Tuplanolla>	I recognize that heat differential.
*	takle has quit (Read error: No route to host)
*	Lazersmoke (~Lazersmok@c-73-45-78-140.hsd1.il.comcast.net) has joined
*	halogenandtoast has quit (Ping timeout: 248 seconds)
*	twandy has quit (Client Quit)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	zen_ (2d1fb5c8@gateway/web/cgi-irc/kiwiirc.com/ip.45.31.181.200) has joined
**** ENDING LOGGING AT Mon Sep  4 12:55:57 2017

**** BEGIN LOGGING AT Mon Sep  4 13:19:52 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<kuribas>	hm, okey
<cocreature>	if you’re interested in matching the behavior of an external program, then sure test against it
<monochrom>	Also handcode some wrong byte sequences and see if the decoder successfully flag them as erroneous.
<dsal>	quickcheck is super nice for this sort of thing.
<kuribas>	then the tests can only be run when the user has the external program.
<cocreature>	well nobody is forced to run your tests
*	sleffy has quit (Ping timeout: 248 seconds)
<zen_>	as cocreature said, if you're trying to test against microsoft's standards then use their validator
<zen_>	that seems totally reasonable
*	dmj` (sid72307@gateway/web/irccloud.com/x-mmvuaxfdqwtexifw) has joined
<dsal>	Being able to run a battery against the reference implementation is nice.
*	hackebeilchen has quit (Read error: Connection reset by peer)
*	dkov has quit (Quit: dkov)
<kuribas>	right, I can separate tests which require the external program, and ones which don't.
<dsal>	I had a CRC thing to do and just had quickcheck generate me 1000 inputs and exported those to my other implementation and harvested the values and pulled them back in.  That's fine for something so simple and static.
<zen_>	^ and validate whether the program is available before running
*	ericdwhite (~ericdwhit@host86-181-34-104.range86-181.btcentralplus.com) has joined
*	Theophane has quit (Remote host closed the connection)
<kuribas>	dsal: yes sure.  But truetype is hardly simple...
<kuribas>	dsal: Microsoft and Apple don't even agree on many points.
<kuribas>	dsal: which is why fonts are often distributed separately for Apple and Microsoft.
<zen_>	are you implementing a TT parser?
<kuribas>	zen_: yeah.  Well, opentype
*	dgpratt (sid193493@gateway/web/irccloud.com/x-rbyctmcqbturertf) has joined
<zen_>	cool!
*	`Guest00000 has quit (Ping timeout: 240 seconds)
*	`Guest00000 (~user@37.113.156.61) has joined
<kuribas>	zen_: I want to make a compiler from metafont to opentype variable fonts.
<kuribas>	zen_: or a metafont DSL in haskell.
*	AxelAlex has quit (Quit: AxelAlex)
<zen_>	I didn't know about metafont
*	osa1 has quit (Ping timeout: 240 seconds)
<zen_>	is it widely used?
<kuribas>	zen_: not really
<geekosaur>	tex/latex, basically
*	tobhe has quit (Ping timeout: 248 seconds)
<kuribas>	zen_: the TeX font, and also the fonts from lilypond
<geekosaur>	although it's vaguely useful as a common vector font source format that can be translated to other formats
<zen_>	still seems like a fun challenge
<kuribas>	geekosaur: well, currently metafont can only generate bitmaps.
<kuribas>	currently meaning the last 40 years :)
<kuribas>	zen_: yeah
*	coot____________ (~coot@188.146.162.0.nat.umts.dynamic.t-mobile.pl) has joined
<geekosaur>	mm, I am remembering things that generated truetype from metafont, and not simply as bitmaps reencoded
<kuribas>	geekosaur: well, there are programs that trace the bitmaps generated from metafont, and programs that actually use metapost, which doesn't implement the full metafont language.
<kuribas>	geekosaur: the autotraced font have artifacts, and need to be cleaned up.
*	JuanDaugherty (~jdaughert@98.4.124.117) has joined
<kuribas>	but metafont uses just bezier curves under the hood, so it can be done.
<kuribas>	Just nobody did it.
*	theelous3 (~theelous3@unaffiliated/theelous3) has joined
*	ericdwhite has quit (Remote host closed the connection)
*	pera has quit (Ping timeout: 240 seconds)
*	ericdwhite (~ericdwhit@host86-181-34-104.range86-181.btcentralplus.com) has joined
*	kuribas has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
*	jao (~jao@pdpc/supporter/professional/jao) has joined
*	tsaka_ (~torstein@84-52-234.108.3p.ntebredband.no) has joined
<orzo>	anyone have experience with GHC.TypeLits naturals?
<orzo>	i find them pretty hard to use
*	pandeiro has quit (Ping timeout: 246 seconds)
*	ericdwhite has quit (Ping timeout: 248 seconds)
<orzo>	Typically, with type-level naturals, people define recursive code over the peano structure
*	Youmu has quit (Quit: Connection closed for inactivity)
*	danvet has quit (Ping timeout: 252 seconds)
<orzo>	i don't know how to do the equivelent with the + and - type functions
<orzo>	if it's possible, i'd really like to see how it's done
*	Tops2 has quit (Read error: Connection reset by peer)
*	eacameron has quit (Remote host closed the connection)
<orzo>	I could always roll my own, but i really like being able to use numeric literals in the types
<jle`>	orzo: GHC.TypeLits are just types for literals
<jle`>	like literal ints
<jle`>	there's a type for the 0 literal, the 1 litera, the 3 literal, etc.
<jle`>	there is no internal structure
<jle`>	it's basically like data Nat = 0 | 1 | 2 | 3 | 4 | ...
<jle`>	(just like for Int, for instance)
<jle`>	like for Int, ghc provides +/-/* as primitives of Int's public API
<jle`>	and it's the same case for Nat
<orzo>	is there a way to add the structure using extra foo while still using the literals?
<jle`>	that's a different type
<orzo>	maybe i could make a mapping to peano types
<orzo>	and use the literal in the exported type
<jle`>	yeah, similar to how you'd do it at the value level
<jle`>	you can make a value-level peano type, and define an Int -> MyPeano function
*	Denommus (~user@unaffiliated/denommus) has joined
<jle`>	you can do the same thing at the type leve -- create a type-level peano, and write a Nat -> MyPeano type family
<geekosaur>	orzo, did you notice https://github.com/konn/ghc-typelits-presburger#readme ?
<jle`>	but yes first you should consider if you "really want" peano nats
<jle`>	usually you don't
<jle`>	peano nats are a tool to solve certain problems, they aren't usually a goal in and of themselves
*	oisdk (~textual@83.136.43.133) has joined
<jle`>	"i find them pretty hard to use" => "can i turn them into peano nats" seems like a funny way of thinking
*	eacameron (~eacameron@dsl-50-5-80-133.fuse.net) has joined
<orzo>	uh, i'm having to repeat a bunch of code, i have to do something for 0, and then something else for 1 2 and 3, and i'd rather not have to repeat the 1 2 and 3 cases
<orzo>	seems like peano is what i'd want
<EvanR>	not to mention 4
<jle`>	well, what problem are you actually trying to solve?
<orzo>	well, i don't actually need 4
<orzo>	but if i did, then yeah, even more peano
<EvanR>	then... youre talking about Fin 4, not Nat
<EvanR>	0 1 2 and 3
*	katyucha_ is now known as katyucha
<jle`>	my "XY problem" senses are tingling
<orzo>	I'm doing onion routing, the number of cryptographic wraps is indicated in the type.  Theoretically 4 makes sense, but i'm going up to 3 layers tops
*	ackpacket (~ackpacket@unaffiliated/ackpacket) has joined
*	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has joined
*	mzf has quit (Ping timeout: 260 seconds)
<orzo>	i think nat is a better fit than Fin 4
*	dsantiago (~dsantiago@cpe-104-175-193-69.socal.res.rr.com) has joined
<jle`>	if you are using things to model some sort of inductive structure (like successive wrapping), peano nats might make sense
<orzo>	yes
<jle`>	you can provide type synonyms for 0/1/2/3/4
*	unK_ (~drunK@178-37-179-218.adsl.inetia.pl) has joined
*	davr0s (~textual@host86-142-61-82.range86-142.btcentralplus.com) has joined
<jle`>	you can write a Nat -> MyPeano type family as well, but GHC can't be used to prove properties about your Nat -> MyPeano
<jle`>	it's basically 'FromInteger'
*	rickerbh (~rickerbh@27-32-1-82.static.tpgi.com.au) has joined
<jle`>	in fact, the singletons library exports a promoted Num class with FromInteger
*	`Guest00000 has quit (Ping timeout: 240 seconds)
<jle`>	'FromInteger' meaning from Nat, of course, heh
*	alex`` has quit (Quit: WeeChat 1.9)
<jle`>	and you can use 'FromInteger 3', if you really really wanted to re-use Nat literals
*	tomphp (~tomphp@cpc73822-dals21-2-0-cust404.20-2.cable.virginm.net) has joined
<jle`>	but if you really only are using 0/1/2/3, you can probably do just as well by exporting type synonyms for Z, S Z, S (S Z), and S (S (S Z))
*	SpinTensor has quit (Quit: WeeChat 1.9)
*	`Guest00000 (~user@37.113.156.61) has joined
*	emilypi has quit (Ping timeout: 260 seconds)
<jle`>	type-level literals are not polymorphic in the sense that value-level numeric literals are; you just have to manually fromInteger things if you want to use them to describe your custom type.
*	Rodya_ has quit (Remote host closed the connection)
<orzo>	I can't make synonyms that are the actual literals 0, 1, 2, 3, can I?
*	rickerbh has quit (Client Quit)
*	emilypi (~emilypi@pool-100-33-104-88.nycmny.fios.verizon.net) has joined
*	Rodya_ (~Rodya_@2601:46:4001:e0b4:1d83:686d:41da:2c74) has joined
<orzo>	You're saying One, Two, Three, or something
*	BrAsS_mOnKeY is now known as g2
<orzo>	file:///usr/share/doc/libghc-vec-doc/html/Data-Vec-Nat.html#t:N1
<orzo>	oops
<orzo>	sorry
*	mcbears (~user@c-67-180-86-120.hsd1.ca.comcast.net) has joined
*	true-asset has quit ()
<orzo>	anyway, you're suggesting what Data.Vec.Nat does
*	Guest79700 has quit (Ping timeout: 260 seconds)
*	argent0 (~aner@186.133.132.26) has joined
*	Beetstra (~Beetstra@h5-152-210-244.host.redstation.co.uk) has joined
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Mon Sep  4 14:01:03 2017

**** BEGIN LOGGING AT Tue Sep  5 12:41:06 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	dan_f_ has quit (Quit: dan_f_)
*	Destol has quit (Quit: leaving)
*	dan_f_ (~dan@24.148.32.207) has joined
*	Deide (~Deide@2.220.50.147) has joined
*	dan_f_ is now known as dan_f
*	Psybur has quit (Ping timeout: 240 seconds)
*	Rodya_ has quit (Remote host closed the connection)
*	Rodya_ (~Rodya_@c-71-224-101-129.hsd1.pa.comcast.net) has joined
*	dfeuer (~dfeuer@wikimedia/Dfeuer) has joined
*	Infinisil has quit (Quit: leaving)
<orzo>	i have a type that involves two peano numbers that sum to a constant (3)
*	sellout- (~Adium@65-128-67-246.hlrn.qwest.net) has joined
*	Xal has quit (Ping timeout: 248 seconds)
<orzo>	i tried making a ThreeMinus type function, but it was unable to infer that S (ThreeMinus (S n)) and ThreeMinus n are the same
<orzo>	What's a better way?
*	nickolay_ has quit (Remote host closed the connection)
*	Xal (~Xal@S010664777dabacc3.vw.shawcable.net) has joined
*	robotroll (~robotroll@unaffiliated/robotroll) has joined
*	buff3r has quit (Quit: leaving)
*	Guest887 has quit (Remote host closed the connection)
<sqooq>	Hey I need to implement a gui interface where there's a graph presented and one can draw points on it with the mouse, where do I start to do something like that?
*	kipras is now known as kipras`away
*	exarkun has quit (Ping timeout: 240 seconds)
<sqooq>	is that considered gui or graphics?
*	Dembel has quit (Quit: WeeChat 0.4.2)
<tdammers>	both
*	exarkun (~exarkun@vtelinet-66-220-238-250.vermontel.net) has joined
<mniip>	it's also user interface
*	LesterLee (~Lester@aftr-88-217-181-220.dynamic.mnet-online.de) has joined
<mniip>	also UI and interface as well
<tdammers>	and a graphical interface, let's not forget that
<tdammers>	:P
*	hackebeilchen1 has quit (Read error: Connection reset by peer)
<mniip>	not a user though
<maerwald>	sqooq: gtk+ canvas with cairo and diagrams
<Gurkenglas>	A graph as nodes connected by edges, or as a curve on graph paper? gloss is easy.
<sqooq>	as a curve I think
<sqooq>	y axis and time axis
<mniip>	maerwald, can cairo draw fast enough to provide an interactive interface?
<sqooq>	cartesian
*	drewbert has quit (Remote host closed the connection)
*	kipras`away is now known as kipras
<eikke>	are there any guarantees in which haskell thread a ctrl-c exception will be delivered?
*	drewbert (~drewbert@24-113-123-50.wavecable.com) has joined
<maerwald>	mniip: whole of gtk depends on it?
*	coot____________ (~coot@188.146.162.0.nat.umts.dynamic.t-mobile.pl) has joined
*	kus_ubuntui686 has quit (Remote host closed the connection)
*	quobo has quit (Quit: Connection closed for inactivity)
*	theelous3 has quit (Ping timeout: 252 seconds)
*	eschnett has quit (Quit: eschnett)
<thoughtpolice>	eikke: Main thread, according to the docs https://hackage.haskell.org/package/base-4.10.0.0/docs/Control-Exception.html#t:AsyncException
<mniip>	hmm, perhaps my experience with cairo has been hindered by other software in the way
*	Infinisil (~infinisil@xdsl-31-165-62-80.adslplus.ch) has joined
<Gurkenglas>	sqooq, you may be able to learn from the Chart library
*	sfcg (~sfcg@79.97.176.188) has joined
*	forgottenone (~forgotten@176.234.122.239) has joined
*	mkoenig has quit (Ping timeout: 248 seconds)
*	mkoenig_ (~mkoenig@93.115.89.214) has joined
<Gurkenglas>	Maybe you can use Chart to make the plot, and use http://hackage.haskell.org/package/Chart-gtk-1.8.2/docs/Graphics-Rendering-Chart-Gtk.html#v:createRenderableWindow to get a Window that'll tell you when and where it's clicked
<sqooq>	Gurkenglas: Yes, that seems like the right track
<sqooq>	thanks
*	xClueless (~xClueless@host86-163-64-22.range86-163.btcentralplus.com) has joined
*	cdg (~cdg@157.166.173.4) has joined
*	cdg_ (~cdg@157.166.173.4) has joined
*	XorSwap has quit (Remote host closed the connection)
*	mayhew (~mayhew@142.167.222.89) has joined
*	Nd-69-M (~nend@109.72.55.120) has joined
*	Destol (~Destol@public-254-17.nat.utoronto.ca) has joined
<LesterLee>	Hi, I'm lost in lens operators. I want to add a SecurityRequirement to every GET-Operation of a Swagger object. My attempt: line 58 of http://lpaste.net/495376949485502464
*	cdg has quit (Ping timeout: 260 seconds)
<LesterLee>	I think I understand the issue (get returns a Maybe Operation not a Operation), but find myself unable to specify that I want leave each Nothing unchanged.
*	raichoo has quit (Quit: leaving)
*	amar_ (~amarpotgh@p5796792B.dip0.t-ipconnect.de) has joined
<Gurkenglas>	LesterLee, replace get with _Just . get
*	amar_ is now known as Guest73367
<eikke>	thoughtpolice: thanks
*	drewbert has quit (Remote host closed the connection)
*	drewbert (~drewbert@24-113-123-50.wavecable.com) has joined
<Gurkenglas>	By the way, you can do "paths . traverse . _Just . get . security"
<dsal>	I'm having a moment of stupid -- how do you make a function to add (a,a) ?
<LesterLee>	Gurkenglas: sry afk, brb :/
<Gurkenglas>	:t \(x,y) (z,w) -> (x+z, y+w) -- dsal
<lambdabot>	(Num t, Num t1) => (t1, t) -> (t1, t) -> (t1, t)
*	Youmu has quit (Quit: Connection closed for inactivity)
<Gurkenglas>	dsal, the NumInstances package lets you just do (x,y) + (z,w)
<dsal>	Gurkenglas: Sorry, I get that -- I mean I want to make (a,a) applicable to +.  Seems like some combination of • and uncurry would do it, but that's not it.
<Gurkenglas>	:t uncurry (+)
<lambdabot>	Num c => (c, c) -> c
<dsal>	oh.  ha.
<dsal>	I was putting a . in there and really confusing myself.
<dsal>	Thanks.  That seems really obvious.
<Gurkenglas>	LesterLee, or "paths . each . _Just . get . security" if you prefer
*	davr0s (~textual@host86-142-61-82.range86-142.btcentralplus.com) has joined
*	Thunderfunk has quit (Ping timeout: 240 seconds)
<Gurkenglas>	You can even replace _Just with traverse.
<mniip>	Gurkenglas, this is the future - literally just writing code in english
<Gurkenglas>	LesterLee, compare with if that Maybe had been []
*	asmyers has quit (Ping timeout: 240 seconds)
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
*	hackagebot has quit (Read error: error:1408F119:SSL routines:SSL3_GET_RECORD:decryption failed or bad record mac)
*	hackagebot (~hackagebo@octavia.lambda.xyz) has joined
*	peterbecich has quit (Ping timeout: 260 seconds)
*	Yuras has quit (Read error: Connection reset by peer)
*	tsmish (~tsmish@77.43.219.246) has joined
*	Thunderfunk (~Thunderfu@31.131.65.175) has joined
<Gurkenglas>	Oh wait, it's "paths . each . get . _Just . security", was confused by the position of the ^ in the paste :P
<Gurkenglas>	If you like english you can turn that _Just into each.
*	goodboy has quit (Ping timeout: 248 seconds)
*	soniku has quit (Ping timeout: 255 seconds)
*	BlueRavenGT (~BlueRaven@8-22-13-219.utopiafiber.net) has joined
*	pgiarrusso__ (~pgiarruss@151.97.64.34) has joined
*	fr33domlover1 is now known as fr33domlover
*	pgiarrusso_ has quit (Ping timeout: 240 seconds)
<sqooq>	I upgraded stack but it's still using the older version
*	kuribas has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
*	XorSwap (~XorSwap@wnpgmb016qw-ds01-58-40.dynamic.bellmts.net) has joined
<sqooq>	.local/bin is in my environmental vairiables already
<sqooq>	and stack is in there
*	ortmage has quit (Ping timeout: 246 seconds)
*	ryanpcmcquen (sid124388@gateway/web/irccloud.com/x-wxcuvgshbzzueqmk) has left
<MarcelineVQ>	enrionment variables?
<sqooq>	ye
<MarcelineVQ>	What do you mean by that?
<sqooq>	my PATH
<MarcelineVQ>	ah good, is it at the front of your path?
<sqooq>	yes
<geekosaur>	hash -r
<MarcelineVQ>	what does  which stack  say?
*	SpinTensor has quit (Quit: WeeChat 1.9)
<geekosaur>	if you already ran stack and it was found at one place in $PATH, that will be remembered; if a new one is added later, even if it is earlier in $PATH, it will not be used
<MarcelineVQ>	and have you tried it in a new terminal
*	twanvl (~twanvl@92.110.121.28) has joined
<geekosaur>	"which" often does not show you this!
<sqooq>	it says .local/bin
<geekosaur>	use "type"
<sqooq>	type stack?
<geekosaur>	yes
<sqooq>	It shows the right location
<sqooq>	hmm let me try again
<sqooq>	O
<MarcelineVQ>	and what does  stack --version  say?
<sqooq>	it's updated now
<sqooq>	nvm
<sqooq>	Guess it took a bit to kick in idk
<geekosaur>	did you do the hash -r I suggested?
<geekosaur>	that resets the remembered locations of things
<sqooq>	o
<sqooq>	yes
<sqooq>	i did lol
<MarcelineVQ>	I've never ran into that but now I know to look for it, thanks geekosaur 
<sqooq>	"In the dependencies for gould-0.2.1:     chart must match -any, but the stack configuration has no specified version     chart-gtk must match -any, but the stack configuration has no specified version"
<sqooq>	wat
<shapr>	what's the difference between hash -r and rehash?
<MarcelineVQ>	sqooq: put plainly stackage doesn't currently have gould
<MarcelineVQ>	https://docs.haskellstack.org/en/stable/GUIDE/
<Cale>	sqooq: That means that chart and chart-gtk are not available from any of the sources that stack is configured to use.
<MarcelineVQ>	er chart sorry
*	drewbert has quit (Remote host closed the connection)
<sqooq>	but it's in hackage
*	sm has which aliased to type -a
<sqooq>	and csound-expression worked
*	drewbert (~drewbert@24-113-123-50.wavecable.com) has joined
<MarcelineVQ>	however it might have Chart
<geekosaur>	shapr, they're the same. "rehash" is how csh (which introduced the idea) did it, "hash -r" is how ksh did it]
<sm>	one of bash's fearsome arsenal of foot guns
<geekosaur>	various shells may support one or the other or both
<shapr>	geekosaur: neat, I learned something new!
<geekosaur>	and "hash -r" is the one blessed by POSIX
<sm>	slightly related, would anybody recommend using oil shell ?
<shapr>	what's type?
*	harfangk has quit (Ping timeout: 240 seconds)
<Xe>	the action of inputting things with a keyboard
<sm>	shapr: a built in command, like /usr/bin/which but knows about shell aliases etc.
<sqooq>	o it is a capital C
<shapr>	oh neat
<geekosaur>	shows what the shell knows about something: builtin, alias, function, hashed executable, exeuctable found on $PATH (and here it is in the latter two cases)
<geekosaur>	in shells that can autoload functions it may show you where it was autoloaded from
<shapr>	ohh
<Infinisil>	sm: Have heard lots about oil shell with the blog posts, but I won't use any new shell unless it has significant benefits
<shapr>	I like my heavily customized zsh
<geekosaur>	it is required by POSIX to show state like whether it's been hashed, so in general it's the best bet to see where your current shell thinks some command came from
*	Sampuka has quit (Ping timeout: 260 seconds)
<shapr>	nifty
*	Swizec has quit (Quit: Computer has gone to sleep.)
*	Swizec (~swizec@199.21.86.210) has joined
<sm>	Infinisil: I just discovered those posts, going to start at the beginning
<shapr>	zsh has whence, neat
*	ubsan has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	ortmage (ortmage@nat/google/x-dcaychxdaxvlxpda) has joined
*	DataComputist (uid228606@gateway/web/irccloud.com/x-bqdocnnqovoekpca) has joined
<LesterLee>	Gurkenglas: Thanks for the suggestions! (That looks nice! :)) Sadly ghc is not yet convinced: http://lpaste.net/495376949485502464
<Infinisil>	shapr: What's the difference to which?
*	afarmer has quit (Ping timeout: 240 seconds)
*	forgottenone has quit (Quit: Konversation terminated!)
*	iAmerikan has quit (Ping timeout: 252 seconds)
*	Swizec has quit (Ping timeout: 240 seconds)
<shapr>	Infinisil: which is a separate binary, whence is built into zsh
<shapr>	oh well, maybe not
<Gurkenglas>	LesterLee, oh for some reason I expected paths to be a list. Use traverse instead of each
*	xClueless has quit (Quit: Leaving)
<shapr>	Infinisil: I don't know
*	beanbagula (~bean_bag@2a00:23c5:4b04:9200:146f:8ee1:4e09:9ee2) has joined
*	Jesin has quit (Quit: Leaving)
*	SenzaVita (~androirc@46.198.141.26) has joined
<SenzaVita>	Hi
*	SenzaVita has quit (Remote host closed the connection)
<shapr>	uhh
<shapr>	bye?
<shapr>	I've seen people get frustrated with Haskell, but that was INSTANT
<geekosaur>	it will depend on the shell. whence and which came from different unix development origins, type was created by POSIX. type *must* be a shell builtin; traditionally BSD which was an external command and "whence" was built into some shells. these days' your best bet is to check your shell's documentation
<LesterLee>	Gurkenglas: Awesome, that did it - thanks! :) http://lpaste.net/495376949485502464
*	sepp2k has quit (Ping timeout: 240 seconds)
*	geekosaur wonders if that was another Italian bot probe (the "ciao"/"!list" bit which seems to be happening a bit more often than usual the past couple days; some users seem confused about how to use it though so you get other behaviors...)
*	Infinisil has quit (Ping timeout: 260 seconds)
*	iAmerikan (~dwshrewt@unaffiliated/iamerikan) has joined
<Gurkenglas>	Do we have the thing yet that lets you use @Foo to not need "Proxy :: Proxy Foo"?
*	ystael has quit (Ping timeout: 255 seconds)
*	zero_byte (~zer0@ip-89-103-110-138.net.upcbroadband.cz) has joined
*	iqubic (~iqubic@c-24-17-229-56.hsd1.wa.comcast.net) has joined
*	MP2E (~cray@ip68-224-146-82.lv.lv.cox.net) has joined
<lyxia>	TypeApplications?
<lyxia>	We have that since 8.0
*	jollygood2 (~bc815bf3@217.29.117.252) has joined
*	ericdwhite has quit (Remote host closed the connection)
*	danvet has quit (Ping timeout: 252 seconds)
*	pfurla (~textual@38.86.167.91) has joined
*	inhortte has quit (Quit: Leaving.)
*	vBm1 has quit ()
*	Eartaker (~Eartaker@89.238.178.75) has joined
*	goodboy (~goodboy@toroon0335w-lp130-01-142-112-179-8.dsl.bell.ca) has joined
*	danthemy_ has quit (Remote host closed the connection)
*	tsaka_ (~torstein@84-52-234.108.3p.ntebredband.no) has joined
*	Guest73367 has quit (Ping timeout: 248 seconds)
*	danthemyth (~danthemyt@50-246-66-201-static.hfc.comcastbusiness.net) has joined
*	kuwze (ad4c64cb@gateway/web/freenode/ip.173.76.100.203) has joined
*	cpennington has quit (Remote host closed the connection)
*	iAmerikan has quit (Ping timeout: 248 seconds)
*	whoisxy (~whoisxy@46.254.251.34) has joined
*	egis has quit (Quit: Leaving)
*	tobloron_ (~toblorone@162.246.216.202) has joined
<nshepperd_>	Some people just aren't used to a response to their messages taking longer than 30 seconds, and assume the room is empty
<mud>	Is there an instance of Floating somewhere that's arbitrary precision in some way? Or at least possible to get more precise values than Double can give?
<sm>	Decimal
*	toblorone has quit (Ping timeout: 240 seconds)
<mud>	Ah, thanks
<ClaudiusMaximus>	any library to solve matrix system A x = b over Rational?
*	toblorone (~toblorone@162.246.216.28) has joined
*	robotroll has quit (Read error: Connection reset by peer)
<mud>	sm: Hm, doesn't actually appear to be an instance of Floating
<ClaudiusMaximus>	mud: there's 'compensated' for double-double style arithmetic, and 'rounded' which binds to mpfr (though i don't think rounded is on hackage, there are a couple of pull requests on github to bring it up to date)
*	daishi has quit (Read error: Connection reset by peer)
*	caasih has quit (Ping timeout: 246 seconds)
<sm>	mud: I'm not sure, then
*	caasih (~caasihuan@106.186.125.58) has joined
<mud>	ClaudiusMaximus: Thanks, I'll peek at those
<mud>	sm: Thanks anyway
*	tobloro__ (~toblorone@162.246.216.202) has joined
*	tobloron_ has quit (Read error: Connection reset by peer)
*	ninja_in1 has quit (Quit: WeeChat 1.8)
<alpounet>	mud: https://hackage.haskell.org/package/numbers-3000.2.0.1/docs/Data-Number-CReal.html might be close to what you want?
**** ENDING LOGGING AT Tue Sep  5 14:09:10 2017

**** BEGIN LOGGING AT Tue Sep  5 18:28:30 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
<boj>	so is this an efficiency problem? i still have no clue what you are having trouble actually doing
*	Channel #haskell url: http://www.haskell.org/
<andromeda-galaxy>	boj, erisco: so the problem is that when we see a matching pair of keywords we need to hang onto the parse result of the data which is going to be of some type 'a' and properly combine it with the parse results of the other pieces of data from the file which are of disparate types
*	pera has quit (Ping timeout: 252 seconds)
<andromeda-galaxy>	boj: okay so lets say I'm writing an applicative instance for this thing
*	mek42 (~quassel@2604:6000:1418:c11c:8f84:49f7:3537:7a26) has joined
<andromeda-galaxy>	and I'm writing (<*>)
<andromeda-galaxy>	f <*> x say
<andromeda-galaxy>	then the obvious thing to do is to basically say parse (f <*> x) string = (parse f string) (parse x string)
<erisco>	okay, so this is like parsing XML tags
<erisco>	what is the need of this thing with Applicative?
*	gaze__ (~textual@c-67-161-12-206.hsd1.ca.comcast.net) has joined
<boj>	i assume that was a path towards dialing the explanation back from 11 to a 3
<andromeda-galaxy>	combining together the "actions" (C generator + obj "parser") that compute data
<andromeda-galaxy>	so that for example I can write dealWithAlignment <$> figureOutAlignment <*> theRawData
<erisco>	this problem is too big to fit into my head
*	mac10688 has quit (Remote host closed the connection)
<boj>	well, if erisco doesn't get it i definitely don't
*	chaoyi (~chaoyi@pool-72-88-209-93.nwrknj.fios.verizon.net) has joined
*	mac10688 (~mac10688@c-24-21-116-24.hsd1.or.comcast.net) has joined
<andromeda-galaxy>	erisco, boj: we can reduce the problem from composing these generators+parsers to composing just parsers, would that help?
*	toblorone (~toblorone@162.246.216.28) has joined
<boj>	andromeda-galaxy: maybe take a deep breath and distill your problem down to 1 to 2 lines, maybe an lpaste
<erisco>	if you want to focus on just the parsing problem, that is more manageable
<andromeda-galaxy>	yeah
<erisco>	am I right that it is like parsing XML tags?
<ClaudiusMaximus>	there are some parser/printer pairs out there in research-land, probably some of them use Applicative
*	kuttifunk1 (~Thunderbi@host-188-174-199-223.customer.m-online.net) has joined
<andromeda-galaxy>	erisco: maybe? except that there's no nesting and the each tag might have different delimiters
<erisco>	what do you mean by tags having different delimiters? I thought tags were delimiters
<ClaudiusMaximus>	eg http://www.staff.science.uu.nl/~swier004/publications/2017-tyde-a.pdf
*	kuttifunk has quit (Ping timeout: 248 seconds)
*	kuttifunk1 is now known as kuttifunk
<andromeda-galaxy>	oh okay I misunderstood you
<andromeda-galaxy>	then the differences are: no nesting, no delimiters around tags (no '<', '>') and the possible tags are known aot
<andromeda-galaxy>	or, not aot, but while building/before running the parser
*	tobloron_ has quit (Ping timeout: 248 seconds)
<erisco>	what have you tried to parse these tags thus far?
<andromeda-galaxy>	ClaudiusMaximus: this is dead easy to do using standard applicative parsing techniques but those aren't efficient
*	toblorone has quit (Remote host closed the connection)
<andromeda-galaxy>	erisco: well the obvoius and relatively easy implementation is to just scan the string once for each kind of tag that we want to get the value out of
<andromeda-galaxy>	that makes it easy because your parser for f <*> x is just (parse f) (parse x) and you can just let each of the subparsers do its own scan
*	toblorone (~toblorone@162.246.216.28) has joined
<c_wraith>	andromeda-galaxy: what's the basis of your claim that applicative parsers aren't efficient?
<andromeda-galaxy>	the problem is that I would rather lift all the scans up to the top so that they can be fused into one scan via Aho-Corasick
*	neoncontrails has quit (Read error: Connection reset by peer)
*	akamaus has quit (Ping timeout: 246 seconds)
*	dfeuer (~dfeuer@wikimedia/Dfeuer) has joined
*	neoncontrails (~neoncontr@wsip-98-186-230-186.sd.sd.cox.net) has joined
<andromeda-galaxy>	c_wraith: not that they aren't efficient in general, but that they can be beaten in this case. this particular case comes down to lots of basically (string a <|> string b <|> string c <|> char) kinds of parsers where the standard applicative parsing techniques will run a string comparsion once for each option once on every charactor
<erisco>	eh, I took a few second look at this algorithm and it seems to me to throw the needles into a trie
<andromeda-galaxy>	erisco: so implementing the algorithm isn't the hard part, the hard part is what to do when you find a needle
<erisco>	I don't see the importance of this unless your tags are very long
<erisco>	what have you tried?
*	akamaus (~akamaus@ppp91-79-53-141.pppoe.mtu-net.ru) has joined
<andromeda-galaxy>	oh so I'm not trying to do it this way because there are actual performance problems with the other way
*	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has joined
*	beemo has quit (Ping timeout: 260 seconds)
*	tsmish has quit (Quit: Lost terminal)
<andromeda-galaxy>	I'm trying to do it this way because I'm doing this project for fun and want to do everything the "right" way
<erisco>	lesson one: the right way is the simple way.
*	Youmu (uid129469@gateway/web/irccloud.com/x-wiuuiefmuiwxsthx) has joined
<andromeda-galaxy>	oh sure I agree in lots of cases
*	toblorone has quit (Ping timeout: 260 seconds)
<andromeda-galaxy>	in this case I'm interested in the challenge of doing it neatly with a better but weirder algorithm
<erisco>	have you done it neatly with a less weird algorithm?
<c_wraith>	andromeda-galaxy: write your own parser library that builds a data structure reifying the parser and analyze that to derive your target algorithm.
<c_wraith>	andromeda-galaxy: that's a thing you can do with Applicative, and the main advantage of Applicative over Monad - the structure is statically available.
<andromeda-galaxy>	erisco: yes, with standard applicative parsing techniques
*	iomotoko (~iomotoko@unaffiliated/iomotoko) has joined
<andromeda-galaxy>	c_wraith: yeah, I know - that's what I'm trying to do now, and why I've been talking about Applicative instead of Monad
<erisco>	c_wraith, what do you suggest for reification? I got stuck with the technique I tried
<c_wraith>	I'm lazy and would use a free Applicative.
<c_wraith>	Someone else has already done the work.
<andromeda-galaxy>	oh right, I also know how to do this if we have existentialquantification, rankntypes, any/unsafecoerce, etc. but this has to be in vanilla H98
*	brunocaad has quit (Ping timeout: 260 seconds)
<erisco>	andromeda-galaxy, I would figure out if there is a known class of grammars this falls into
*	danthemyth has quit (Ping timeout: 260 seconds)
<erisco>	andromeda-galaxy, because then I can focus on implementing combinators for this class of grammars and be less confused with unnecessary detail of this particular problem
<andromeda-galaxy>	the difficulty is in putting the functons being fmapped over things into the reified structure/using them in the string matcher loop, because they return arbitrary types
<andromeda-galaxy>	erisco: I did try to look into that a bit, but I couldn't figure out an obvious way to generalize the grammar
<erisco>	you just look at the class of grammars and see "yes, all the grammars I am interested in are in this class"
*	pparkkin has quit (Remote host closed the connection)
<andromeda-galaxy>	afaict all the grammars that I'm interested in are sub-regular in the chomsky hierarchy
<erisco>	okay, and so dig around and see what you can find
<andromeda-galaxy>	using an overly powerful class of grammar like regular languages leads to not being able to work as efficiently
<erisco>	or alternatively, figure out a construction for your grammars
*	Johannes13__ (~Johannes1@unaffiliated/johannes13) has joined
<andromeda-galaxy>	no I mean the bottom of the standard hierarchy of grammars is way to high for this particular problem
<erisco>	Haskell is definitely not the place to start with this problem
<Cale>	Why not?
<erisco>	because it is going to add unnecessary noise
*	taki has quit (Quit: Leaving)
*	neoncontrails has quit (Remote host closed the connection)
<erisco>	if regular languages are too much then, again, dig around for even simpler ones
*	neoncontrails (~neoncontr@wsip-98-186-230-186.sd.sd.cox.net) has joined
<erisco>	I don't know any myself but I am sure there is something to find
<erisco>	alternatively, figure out a construction for your grammars
<Cale>	Well, if you're suggesting the right place to begin is pure mathematics, I might agree :)
<erisco>	yes, I am
<andromeda-galaxy>	the language class is only "languages" that are recognizable purely by looking up constant substrings
*	jellowj has quit (Ping timeout: 260 seconds)
<andromeda-galaxy>	the math formulation is completely trivial and doesn't shine any light on the haskell problem at all
<Cale>	Sometimes Bird-style equational reasoning about programs can produce good results
<erisco>	the problem you described to me does not suggest only grammars of constants
<erisco>	you said there were tags which delimited blocks of text
*	Johannes13 has quit (Ping timeout: 240 seconds)
<andromeda-galaxy>	oh sure but now we're talking about math and they're reducable to the same easily: since we know the tags we're interested in we only need to look up the indices of all of them, and at that point we know that the string is a member of the language. To construct which member of the language we can just run arbitrary functions on the string and those indices
<erisco>	the point is to make clear what simple things you need for your program to work, and then you worry about implementing this in Haskell
<erisco>	at least then you're directed in what you need to do
<erisco>	so problems with reification and type systems and so forth must serve this ideal you already have defined
*	halogenandtoast (~matthew-m@122x220x193x90.ap122.ftth.ucom.ne.jp) has joined
<andromeda-galaxy>	I already basically have that though. I know what the parsing algorithm should look like and what the grammar construction should look like
*	neoncontrails has quit (Ping timeout: 248 seconds)
*	banc has quit (Quit: ZNC - http://znc.in)
*	perrier-jouet (~perrier-j@gateway/vpn/privateinternetaccess/perrier-jouet) has joined
*	hucksy (~hucksy@p4FD1F92D.dip0.t-ipconnect.de) has joined
*	keith_asdf has quit (Remote host closed the connection)
*	peterbecich (~peterbeci@47.37.164.78) has joined
*	cdg (~cdg@2600:1700:3120:40e0:5cb6:8380:8cf3:1ce1) has joined
*	mj_k (~mj_k@59.10.109.21) has joined
*	hucksy_ has quit (Ping timeout: 240 seconds)
<erisco>	well, how do you construct a grammar in your language then
<erisco>	a grammar for your languages
*	a3Dman has quit (Ping timeout: 240 seconds)
*	cranej (~cranej@42.120.74.200) has joined
<andromeda-galaxy>	applicatives
*	brynedwardz (~bryn@109.76.5.35) has joined
*	vtomole has quit (Ping timeout: 260 seconds)
*	brynedwards has quit (Disconnected by services)
*	brynedwardz is now known as brynedwards
<erisco>	that seems weaksauce to me
<erisco>	if you look up how to construct regular grammars then you will see it is precise and clear
*	twoolie (~twoolie@101.166.213.164) has joined
<erisco>	I am not sure how "applicatives" is a sufficient description
*	Thunderfunk has quit (Read error: Connection reset by peer)
*	Thunderfunk (~Thunderfu@31.131.65.175) has joined
<c_wraith>	You won't really be able to reify this without existentials using Applicative.
*	cdg has quit (Ping timeout: 240 seconds)
<c_wraith>	The nature of Applicative composition is that intermediate type information is lost.
<andromeda-galaxy>	c_wraith: thank you. that is what I've been trying to get at during this whole thing
<andromeda-galaxy>	that is precisely what was wrong
<c_wraith>	So just create a tree.
*	jeltsch has quit (Quit: jeltsch)
<andromeda-galaxy>	I was looking for solutions
<andromeda-galaxy>	ah right
<andromeda-galaxy>	so that's the obvious way to do it
*	neoncontrails (~neoncontr@2602:306:31a7:a1a0:6dea:b9cd:7602:9fed) has joined
<c_wraith>	Yes, the obvious solution is usually the good one.
<andromeda-galaxy>	not quite here though
<andromeda-galaxy>	the tree has the same problem that we can't run the optimized string matcher
<c_wraith>	I'd just use existentials.  They work.
<c_wraith>	You can if you build the right tree.
<andromeda-galaxy>	re: existentials: they don't exist in nch98 though
<andromeda-galaxy>	re: the right tree: how?
<c_wraith>	However you need to.
*	banc (~master@217.151.98.163) has joined
<andromeda-galaxy>	don't you end up losing the type information again inside the scanner function?
<andromeda-galaxy>	the type of the produced data depends on the keyword that we just scanned is the problem
*	pera (~pera@unaffiliated/pera) has joined
<c_wraith>	so get rid of the typed intermediate representation
<c_wraith>	If you refuse to use language extensions that let you type it, you can't type it.
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	ystael (~ystael@209.6.53.93) has joined
<andromeda-galaxy>	I'd love to use them but I'm working on a project that I /think/ wants to remain compatible with nhc98
*	eklavya (~eklavya@2405:205:138e:ea3d:d0ed:e927:f3af:c2ae) has joined
*	unyu has quit (Ping timeout: 260 seconds)
*	emilypi has quit (Ping timeout: 248 seconds)
<andromeda-galaxy>	how do you get rid of the typed intermediate representation without using Data.Dynamic or GHC.Prim.Any/unsafeCoerce?
*	systemfault (~rcyr@unaffiliated/rcyr) has joined
*	mrkgnao (~mrkgnao@115.187.56.122) has joined
*	nykros (c9b10560@gateway/web/freenode/ip.201.177.5.96) has joined
*	ystael has quit (Ping timeout: 240 seconds)
<c_wraith>	I mean, it sounds like the intermediate representation you actually want is slices of the input, anyway.
<andromeda-galaxy>	yeah, but you can't get the slices of input while building the tree - only after you've finished - since the input-slicing algorithm needs to consider all the leaves of the tree
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
*	hackagebot has quit (Read error: error:1408F119:SSL routines:SSL3_GET_RECORD:decryption failed or bad record mac)
<c_wraith>	I had envisioned those as independent phases. phase 1: grammar tree. phase 2: anything that actually handles input.
*	hackagebot (~hackagebo@2a00:dcc0:eda:88:245:71:269a:892d) has joined
<andromeda-galaxy>	oh yeah exactly
<andromeda-galaxy>	but you can't build the grammar tree out of slices of input if you don't have the input until phase 2
<c_wraith>	was the entire point here to build a self-modifying data structure?
*	louispan has quit (Quit: louispan)
<c_wraith>	I was operating on the assumption that reading the rules and using them were independent
<andromeda-galaxy>	no. I think I must have misunderstood what you said
<c_wraith>	but if the rules impact how further rules are parsed, you're in a world of trouble.
*	emilypi (~emilypi@pool-100-33-104-88.nycmny.fios.verizon.net) has joined
<andromeda-galaxy>	when you said that the intermediate representation should be slices of input I thought you were talking about the representation of the grammar tree
<andromeda-galaxy>	rules do not impact how further rules are parsed
*	eacameron has quit (Ping timeout: 248 seconds)
*	beerdrop has quit (Ping timeout: 248 seconds)
<c_wraith>	So let me back way up here.  Why doesn't something as simple as [(Input, [Input] -> Output)] work as your rule representation?
<andromeda-galaxy>	what do the elements of that tuple represent?
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Tue Sep  5 19:30:04 2017

**** BEGIN LOGGING AT Wed Sep  6 18:50:46 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:46:51 2017)
*	Channel #haskell url: http://www.haskell.org/
<erisco>	it seems buried and strewn about
*	Johannes13__ (~Johannes1@unaffiliated/johannes13) has joined
*	quobo has quit (Quit: Connection closed for inactivity)
*	iAmerikan (~dwshrewt@unaffiliated/iamerikan) has joined
*	I331846 (~I331846@113.200.157.163) has joined
*	I331846 has quit (Client Quit)
*	rashub (~rashub@113.200.157.163) has joined
*	Johannes13 has quit (Ping timeout: 240 seconds)
*	exarkun has quit (Ping timeout: 240 seconds)
*	exarkun (~exarkun@vtelinet-66-220-238-250.vermontel.net) has joined
*	connrs (~connrs@conners.plus.com) has joined
*	Bhootrk_ has quit (Quit: Leaving)
*	iAmerikan has quit (Ping timeout: 252 seconds)
*	JeanCarloMachado has quit (Read error: Connection reset by peer)
*	Psybur (~broseph@pool-108-44-203-65.clppva.fios.verizon.net) has joined
*	banc has quit (Quit: ZNC - http://znc.in)
*	Big_G (~Big_G@75-165-48-101.tukw.qwest.net) has joined
*	unyu has quit (Remote host closed the connection)
*	juhp (~juhp@redhat/juhp) has joined
*	connrs has quit (Ping timeout: 240 seconds)
*	fresheyeball has quit (Ping timeout: 248 seconds)
*	hucksy_ (~hucksy@p4FD1F8D7.dip0.t-ipconnect.de) has joined
*	hexfive (~beknowly@50.35.82.88) has joined
*	unyu (~pyon@unaffiliated/pyon) has joined
*	connrs (~connrs@conners.plus.com) has joined
*	hucksy has quit (Ping timeout: 248 seconds)
*	connrs has quit (Ping timeout: 248 seconds)
*	heebo has quit (Ping timeout: 264 seconds)
*	jeltsch has quit (Quit: jeltsch)
*	sdothum_ (~znc@108.63.142.95) has joined
*	mj_k (~mj_k@59.10.109.21) has joined
*	tromp (~tromp@ip-217-103-3-94.ip.prioritytelecom.net) has joined
*	safe (~safe@unaffiliated/safe) has joined
*	connrs (~connrs@conners.plus.com) has joined
*	sdothum has quit (Ping timeout: 240 seconds)
*	banc (~master@217.151.98.163) has joined
*	connrs has quit (Ping timeout: 240 seconds)
*	tromp has quit (Ping timeout: 240 seconds)
*	Psybur has quit (Ping timeout: 240 seconds)
*	Guest36961 has quit (Remote host closed the connection)
*	cjwelborn has quit (Remote host closed the connection)
*	_ja has quit (Ping timeout: 260 seconds)
*	Goplat (~goplat@reactos/developer/Goplat) has joined
*	peterbecich has quit (Ping timeout: 260 seconds)
*	BartAdv has quit (Quit: Connection closed for inactivity)
*	acowley is now known as acowley_away
*	Gurkenglas has quit (Ping timeout: 240 seconds)
*	knudLeopold has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	MoarSpaceFi (~Forgot_my@65.126.126.193) has joined
*	jchia1 (~jchia@116.192.24.142) has joined
*	amarp (~amarpotgh@p57967DBF.dip0.t-ipconnect.de) has joined
*	jchia has quit (Ping timeout: 260 seconds)
*	rickerbh has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	iAmerikan (~dwshrewt@unaffiliated/iamerikan) has joined
*	mj_k has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	h0pper (~h0pper@249.sub-174-198-10.myvzw.com) has joined
*	amarp has quit (Ping timeout: 240 seconds)
<dsal>	@pl \c -> c^2 <= n
<lambdabot>	(<= n) . (^ 2)
*	Orion3k has quit (Ping timeout: 240 seconds)
*	hololeap (~hololeap@unaffiliated/hololeap) has joined
*	h0pper has quit (Remote host closed the connection)
<hololeap>	if i have something like `i = length [1,2,3,4,5]`, will the compiler shrink this down to just a static "5" in the executable, or will it always have to span the whole list?
<monochrom>	I don't know. Do you know how to read core? It can tell you.
<hololeap>	core?
<hololeap>	what is core?
<lyxia>	it's the intermediate language GHC uses to optimize your programs
<monochrom>	This refers to GHC's intermediate language. You can obtain some by "ghc -O -ddump-simpl -dsuppress-all"
*	iAmerikan has quit (Ping timeout: 248 seconds)
<hololeap>	ok, i'll check it out
*	iomotoko (~iomotoko@unaffiliated/iomotoko) has joined
*	dddddd has quit (Remote host closed the connection)
<geekosaur>	hololeap, in general ghc does not do compile time evaluation, only compile time replacement (via RULES). since RULES are type driven and literals do not have distinct types from computed values, it cannot know to apply a RULE to reduce it at compile time
*	revprez has quit (Quit: Lost terminal)
*	rickerbh (~rickerbh@14-203-105-198.static.tpgi.com.au) has joined
*	knudLeopold (~knudLeopo@gateway/vpn/privateinternetaccess/knudleopold) has joined
*	abe (~abe@c-24-11-14-152.hsd1.ut.comcast.net) has joined
*	Orion3k (~Orion3k@47-51-33-228.static.mtpk.ca.charter.com) has joined
*	Thunderfunk has quit (Ping timeout: 240 seconds)
*	Thunderfunk (~Thunderfu@31.131.65.175) has joined
*	abe has quit (Client Quit)
*	xtreak (~xtreak@42.111.168.31) has joined
*	mizu_no_oto has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	rickerbh has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	Orion3k has quit (Ping timeout: 260 seconds)
*	peterbecich (~peterbeci@47.37.164.78) has joined
*	connrs (~connrs@conners.plus.com) has joined
*	Orion3k (~Orion3k@47-51-33-228.static.mtpk.ca.charter.com) has joined
<hololeap>	geeokosaur, could you please give me a simple example of a rule that it uses?
<hololeap>	just for reference
*	darjeeling_ (~darjeelin@115.215.43.56) has joined
<geekosaur>	not off the top of my head. thing is, RULES are not wired in, they are pragmas in library source.
*	xtreak has quit (Client Quit)
*	jchia (~jchia@116.192.25.115) has joined
<geekosaur>	there is not a lot wired in at this level. hypothetically they could be, but as ghc is currently designed it would be difficult to do so
*	cpennington (~cpenningt@pool-108-7-186-67.bstnma.fios.verizon.net) has joined
*	jchia1 has quit (Ping timeout: 240 seconds)
*	revprez (~revprez@pool-108-20-156-103.bstnma.fios.verizon.net) has joined
<monochrom>	Data.List probably has a lot of them.
*	armyriad has quit (Read error: Connection reset by peer)
<geekosaur>	I'm not sure it dfoes these days
*	rickerbh (~rickerbh@14-203-105-198.static.tpgi.com.au) has joined
<geekosaur>	GHC.OldList likely does
*	armyriad (~armyriad@gateway/vpn/privateinternetaccess/armyriad) has joined
<geekosaur>	(Data.List is mostly reexports of Data.Foldable at this point)
*	revprez has quit (Client Quit)
*	revprez (~revprez@pool-108-20-156-103.bstnma.fios.verizon.net) has joined
<dfeuer>	A lot of the list rules are in GHC.Base and GHC.List, IIRC.
<dfeuer>	Some are in Data.OldList.
<dfeuer>	Probably.
*	jchia1 (~jchia@116.192.25.95) has joined
*	dsantiago has quit (Ping timeout: 260 seconds)
*	connrs has quit (Ping timeout: 248 seconds)
*	fingerzam has quit (Ping timeout: 240 seconds)
*	`Guest00000 has quit (Ping timeout: 240 seconds)
*	fingerzam (sid193798@gateway/web/irccloud.com/x-mtrcxdinabdreqyy) has joined
*	jchia has quit (Ping timeout: 240 seconds)
<andromeda-galaxy>	hmm, I wonder what the nicest safe way to write partition :: (a -> Either b c) -> [a] -> ([b],[c]) is...
*	twandy (~Thunderbi@69.36.49.34) has joined
*	dsantiago (~dsantiago@cpe-104-175-193-69.socal.res.rr.com) has joined
<jle`>	probably using pattern matching
<geekosaur>	:t Data.Either.partitionEithers
<lambdabot>	[Either a b] -> ([a], [b])
<glguy>	:t \f xs -> partitionEithers (map f xs)
<lambdabot>	(a1 -> Either a b) -> [a1] -> ([a], [b])
*	`Guest00000 (~user@37.113.176.12) has joined
*	soLucien has quit (Ping timeout: 240 seconds)
**** ENDING LOGGING AT Wed Sep  6 19:57:19 2017

**** BEGIN LOGGING AT Thu Sep  7 11:25:21 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	caumeslasal has quit (Ping timeout: 248 seconds)
*	hackagebot has quit (Read error: error:1408F119:SSL routines:SSL3_GET_RECORD:decryption failed or bad record mac)
*	hackagebot (~hackagebo@2a00:dcc0:eda:88:245:71:269a:892d) has joined
*	shafox has quit (Quit: This computer has gone to sleep)
*	quobo (uid178934@gateway/web/irccloud.com/x-wjyepkjgifpbivps) has joined
*	JuanMiguel has quit (Quit: This computer has gone to sleep)
**** ENDING LOGGING AT Thu Sep  7 11:28:00 2017

**** BEGIN LOGGING AT Thu Sep  7 11:58:17 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	burkaman has quit (Client Quit)
<Psybur>	Can anyone tell me what ".~" means in the second code block in https://github.com/timbod7/haskell-chart/wiki/example-2 ?
<Psybur>	Is it something to do with lens?
<Psybur>	Oh and what does ".=" do?
*	urdh (~urdh@unaffiliated/urdh) has joined
*	nicktest (604313de@gateway/web/cgi-irc/kiwiirc.com/ip.96.67.19.222) has joined
<mizu_no_oto>	Psybur: https://hackage.haskell.org/package/lens
*	nicktest has quit (Client Quit)
<Psybur>	Damn looks like I finally have to learn lens. Been putting it off. Looks scary :D
<phadej>	dejavu, someone asked exactly same question yesterday (or day before)
<monochrom>	Or you can postpone learning Chart.
*	albertus1 (~seb@ip-109-45-3-52.web.vodafone.de) has joined
<mizu_no_oto>	Simon P.J.'s lens talk is pretty good
<phadej>	monochrom: could you be more supportive?
<monochrom>	Why is everyone asking about it anyway?
<hexagoxel>	or you can learn exactly these to operators and move on.
<Psybur>	monochrom, do you mean just blindly try to copy the Chart examples or use a different library?
<monochrom>	No.
<hexagoxel>	*two
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
<monochrom>	Use a different library.
<Psybur>	monochrom, any recommendations?
<c_wraith>	Psybur, those are both "set this value" operations. the latter implicitly works on the state in MonadState
<monochrom>	I don't have one.
*	crownose (~weechat@2a02:8010:6173:0:2ab2:bdff:fe2b:c456) has joined
*	castlelore has quit (Ping timeout: 248 seconds)
*	cschneid_ (~cschneid@2603:300b:901:300:4197:dd08:6079:15d) has joined
*	C0_c0ax_ has quit (Ping timeout: 248 seconds)
*	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined
*	connrs has quit (Ping timeout: 248 seconds)
*	mek42 has quit (Ping timeout: 246 seconds)
*	chlong_ has quit (Ping timeout: 240 seconds)
*	biglama has quit (Remote host closed the connection)
*	zv (~zv@unaffiliated/zv) has joined
<monochrom>	For the record: What phadej really means is: "could you be more supportive for going down a rabbit hole, aka depth-first search?"
*	emilypi (~emilypi@pool-100-33-104-88.nycmny.fios.verizon.net) has joined
<monochrom>	The answer is no, because I believe that depth-first search is the cause of XY problems. I am supportive for breadth-first search.
*	chlong_ (~chlong|go@71.181.74.172) has joined
*	terrorjack has quit (Quit: Connection closed for inactivity)
<mizu_no_oto>	Psybur: do you understand, at a basic level, what lenses are for?
*	oish (~charlie@159.22.169.217.in-addr.arpa) has joined
<Psybur>	mizu_no_oto, manipulating nested data structures I believe
*	sleffy (~sleffy@c-24-7-67-0.hsd1.ca.comcast.net) has joined
<mizu_no_oto>	More or less, yeah.
*	takle (~takle@host109-153-108-68.range109-153.btcentralplus.com) has joined
<mizu_no_oto>	originally, lenses were composable getters and setters.
*	connrs (~connrs@conners.plus.com) has joined
*	chlong__ (~chlong|go@71.181.28.233) has joined
*	zzq has quit (Ping timeout: 240 seconds)
<mizu_no_oto>	the 'lens' library is built off of the observation that you don't need separate getters and setters, but can use a modifier as a getter or setter.
*	chlong_ has quit (Ping timeout: 248 seconds)
*	saurabhn_ has quit (Remote host closed the connection)
*	a3Dman has quit (Ping timeout: 240 seconds)
*	zzq (~zzq@37.26.147.158) has joined
*	soLucien (~soLucien@130.225.188.33) has joined
*	takle has quit (Ping timeout: 255 seconds)
*	bennofs (~benno@217-68-187-120.dynamic.primacom.net) has joined
*	jlanglois (jlanglois@nat/yahoo/x-aucrzdvacgegkfis) has joined
*	jellowj has quit (Ping timeout: 260 seconds)
*	sfcg (~sfcg@79.97.176.188) has joined
*	rcat (~us3r@51.15.69.111) has joined
*	bergey has quit (Ping timeout: 240 seconds)
*	crobbins (~crobbins@2600:1700:6391:1c20:99f9:9016:aa95:c3ac) has joined
*	egis has quit (Quit: Leaving)
*	crosleyt has quit (Ping timeout: 264 seconds)
*	aglorei1 has quit (Ping timeout: 268 seconds)
*	muesli4 (~muesli4@p200300E6ABC29892496A8555A03D7BB8.dip0.t-ipconnect.de) has joined
*	sellout- (~Adium@65-128-95-202.hlrn.qwest.net) has joined
*	alex`` (~alex@2a01cb000bb310000e31f98b4cdf4eae.ipv6.abo.wanadoo.fr) has joined
*	alex`` is now known as alexherbo2
*	alexherbo2 is now known as alex``
*	Dembel (~Dembel@31.132.180.188) has joined
*	aglorei1 (~aglorei@gateway/tor-sasl/aglorei) has joined
<hexagoxel>	Psybur: Chart also exports the record fields, so you can translate the example to be lens-free, too.
*	heebo has quit (Ping timeout: 248 seconds)
*	soLucien has quit (Ping timeout: 246 seconds)
*	crosleyt (~troy@209-217-208-226.northland.net) has joined
*	heebo (~user@host-92-15-229-61.as43234.net) has joined
*	Itkovian has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	herr_jth (~HerrJth@ip5f5bf4db.dynamic.kabel-deutschland.de) has joined
<drdo>	Hmm, got an "Illegal instruction" when running something compiled in a different machine
*	lambda-11235 (~lambda-11@70.41.58.147) has joined
*	FreeBirdLjj has quit (Remote host closed the connection)
<drdo>	Same architecture but different cpus, is there some sort of compat mode I need to enable in ghc?
*	FreeBirdLjj (~freebirdl@180.159.174.81) has joined
*	chlong__ has quit (Read error: Connection reset by peer)
<hexagoxel>	Psybur: roughly like this: http://lpaste.net/358274
*	bergey (~user@pool-96-246-43-125.nycmny.fios.verizon.net) has joined
*	ubsan has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	hackagebot has quit (Read error: error:1408F119:SSL routines:SSL3_GET_RECORD:decryption failed or bad record mac)
*	chlong_ (~chlong|go@pool-71-168-103-125.cncdnh.east.myfairpoint.net) has joined
*	hackagebot (~hackagebo@2a00:dcc0:eda:88:245:71:269a:892d) has joined
<Psybur>	hexagoxel, thanks
*	Dembel has quit (Read error: Connection reset by peer)
*	oish has quit (Ping timeout: 248 seconds)
*	mattyw has quit (Ping timeout: 252 seconds)
*	NinjaTrappeur has quit (Ping timeout: 246 seconds)
*	oisdk (~textual@83.136.43.132) has joined
*	mattyw (~mattyw@gateway/vpn/privateinternetaccess/mattyw) has joined
*	FreeBirdLjj has quit (Ping timeout: 248 seconds)
*	heebo has quit (Ping timeout: 240 seconds)
*	iomotoko has quit (Ping timeout: 240 seconds)
*	NinjaTrappeur (~ninja@2001:41d0:2:2f1e::1) has joined
*	dsub has quit (Quit: Lost terminal)
*	chlong_ has quit (Ping timeout: 248 seconds)
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	chlong_ (~chlong|go@71.181.103.243) has joined
*	oish (~charlie@159.22.169.217.in-addr.arpa) has joined
*	ziocroc (~ziocroc@151.74.52.127) has joined
*	jellowj (~yellow-ja@epp147.neoplus.adsl.tpnet.pl) has joined
*	heebo (~user@host-92-15-229-61.as43234.net) has joined
*	tromp (~tromp@ip-217-103-3-94.ip.prioritytelecom.net) has joined
*	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined
*	heebo has quit (Ping timeout: 255 seconds)
*	tromp has quit (Ping timeout: 260 seconds)
*	pja has quit (Quit: pja)
*	Psybur has quit (Ping timeout: 248 seconds)
*	heebo (~user@host-92-15-229-61.as43234.net) has joined
*	cyborg-one (~cyborg-on@37.203.8.40) has joined
*	cmr has quit (Quit: FIN)
*	chlong__ (~chlong|go@71.181.119.51) has joined
**** ENDING LOGGING AT Thu Sep  7 12:42:31 2017

**** BEGIN LOGGING AT Thu Sep  7 19:13:33 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	alveric3 has quit (Ping timeout: 240 seconds)
*	jmcarthur has quit (Ping timeout: 252 seconds)
<tomasino>	how's things tonight? much chat-itude?
<orzo>	I'm translating C code that multiplies two 64 bit numbers to obtain 128 bits as a pair of 64-bit words
*	Wizek has quit (Quit: Connection closed for inactivity)
<orzo>	should i use Integer?
<orzo>	or do something similar in haskell
*	Fylwind has quit (Quit: ZNC 1.6.5 - http://znc.in)
<Hafydd>	Why are you translating C code into Haskell?
<orzo>	why not
*	Fylwind (~Fylwind@unaffiliated/fylwind) has joined
<orzo>	its a good way to grok c code
<Hafydd>	You can just run the C program right away.
<Hafydd>	And the Haskell you obtain by translating it literally will probably be horrible.
<orzo>	eh
<orzo>	you've never done this
<Hafydd>	I would recommend using Integer, anyway, unless there is some special performance need.
<Axman6>	orzo: there are ptimitives for that in GHC.Prim IIRC
*	alveric3 (~LordAlver@i577B9F35.versanet.de) has joined
<Hafydd>	In which case you could use a 128-bit integer type, perahaps.
*	Achylles has quit (Quit: Leaving)
*	rdes (~ryan@c-73-16-127-221.hsd1.me.comcast.net) has joined
*	iqubic (~iqubic@2601:602:8a00:1bd7::4c09) has joined
<Axman6>	orzo: hmm, this is related, but not what I thought was there: https://hackage.haskell.org/package/ghc-prim-0.5.1.0/docs/GHC-Prim.html#v:mulIntMayOflo-35-
<dumptruckman>	How can I add a debug print to a function?
<Axman6>	(I was thinking of addIntC# whcih returns the any carry value of an add, useful for big int implementations)
<orzo>	well i've got unsigned numbers
<Axman6>	dumptruckman: that's generally not a good idea, but can be done, can you explain why you want that?
<dumptruckman>	just to figure out why this function isn't working
<dumptruckman>	it's not for the final version
<Axman6>	dumptruckman: Look at Debug.Trace
*	rickerbh has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<Axman6>	orzo: timesWord2# might be what you want (but would need testing since there's no docs)
<dumptruckman>	Ah, thanks
<Axman6>	Anyone have a preferred library for parsing HTML and extracting links?
<tomasino>	BTW, there's a bunch of bots rampaging around freenode spamming racist stuff in channels. They may come this way in a bit.
<tomasino>	#vim just got bombarded
*	plutoniix has quit (Quit: Leaving)
*	louispan has quit (Quit: louispan)
*	XorSwap has quit (Quit: Leaving)
*	XorSwap (~XorSwap@kite.riseup.net) has joined
*	rickerbh (~rickerbh@14-203-105-198.static.tpgi.com.au) has joined
*	earthy has quit (Ping timeout: 240 seconds)
<alx741>	tomasino: I think #vim is one out of very few victims
*	earthy (~arthurvl@c34040f1.ftth.concepts.nl) has joined
<tomasino>	hope so! I just don't get why people bother
*	LysergicDreams has quit (Ping timeout: 248 seconds)
*	alx741 has quit (Quit: alx741)
*	alx741 (~alx741@190.152.50.171) has joined
*	Arcaelyx (~Arcaelyx@pool-100-35-184-196.nwrknj.fios.verizon.net) has joined
*	ensyde (~ensyde@2602:306:3b9e:b750:81af:df57:a051:baa3) has joined
<orzo>	Axman6: trying to test your suggestion, but I don't know how to make a literal of Word#.  I tried 1# but ghci says type error and infered Int#
*	alx741 has quit (Client Quit)
*	alx741 (~alx741@190.152.50.171) has joined
*	cyborg-one has quit (Quit: cyborg-one)
*	gehmehgeh has quit (Ping timeout: 268 seconds)
*	eklavya (~eklavya@2405:205:1480:e9a9:7539:f7db:879c:6b53) has joined
<geekosaur>	I don't think there is such a thing? at that level it's the operations that know whether something is a Word or an Int
<geekosaur>	not the types, because Int# is a hardware word and the hardware doesn't have types
*	joebetz (~Joseph_Be@c-73-176-149-193.hsd1.il.comcast.net) has joined
*	dsantiago has quit (Quit: Computer has gone to sleep.)
*	steeze has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
<monochrom>	Dear friends, is there one extension that implies both RankNTypes and ExistentialQuantification?
<dumptruckman>	the same bots were spamming on other networks a while back too
*	pera has quit (Quit: leaving)
<MarcelineVQ>	monochrom: ^^;  just -fglasgow-exts afaik
<MarcelineVQ>	which isn't an extension of course, but just in case it matters
<monochrom>	Ah excellent, PolymorphicComponents is deprecated and is aliased to RankNTypes.
*	alveric3 has quit (Ping timeout: 260 seconds)
<crucify_me>	thanks all .. happy to report I understand this now:   gg f a c = f a  
*	safe (~safe@unaffiliated/safe) has joined
*	alveric3 (~LordAlver@i577B9F35.versanet.de) has joined
<iqubic>	How does that work?
*	geekosaur has quit (Excess Flood)
<monochrom>	I'm going to write out both RankNTypes and ExistentialQuantification. -fglasgow-exts is too much a sledgehammer.
<MarcelineVQ>	it surely is
<monochrom>	Don't worry! So far I'm only using five: RankNTypes, ExistentialQuantification, DataKinds, KindSignatures, TypeFamilies
<orzo>	timesWord2# seems to be it.
*	geekosaur (allbery@dreamshell.ttuttle.net) has joined
*	texasmynsted_ has quit (Quit: ZNC - http://znc.in)
*	texasmynsted (~texasmyns@c-76-122-222-203.hsd1.tn.comcast.net) has joined
*	rickerbh has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
Python interface unloaded
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Thu Sep  7 19:45:21 2017

**** BEGIN LOGGING AT Fri Sep  8 10:51:25 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	louispan (~textual@14-203-219-236.static.tpgi.com.au) has joined
Python interface unloaded
**** ENDING LOGGING AT Fri Sep  8 10:52:29 2017

**** BEGIN LOGGING AT Fri Sep  8 19:55:26 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	ericsagnes has quit (Ping timeout: 260 seconds)
*	soLucien has quit (Ping timeout: 240 seconds)
Python interface unloaded
**** ENDING LOGGING AT Fri Sep  8 19:59:07 2017

**** BEGIN LOGGING AT Sat Sep  9 10:57:18 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	Myrl-saki (~myrl@unaffiliated/myrl) has joined
<Rembane>	I want to create somekind of storage data type in memory where I can lookup records in different ways, by for instance on their title or uuid, and I want to be able to update the records and let the changes update everywhere. Can you give me some directions?
<Welkin>	Rembane: Acid state?
<Welkin>	https://hackage.haskell.org/package/acid-state
*	codrinb has quit (Ping timeout: 248 seconds)
*	fancyremarker has quit ()
<Rembane>	Welkin: Thank you, I'll look into it.
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
*	coot___________ (~coot@188.146.166.152.nat.umts.dynamic.t-mobile.pl) has joined
*	ianandrich has quit (Ping timeout: 252 seconds)
*	tromp has quit (Remote host closed the connection)
*	codrinb (~codrinb@94.177.40.42) has joined
*	plakband (~jmc@541A357D.cm-5-3a.dynamic.ziggo.nl) has joined
*	codrinb has quit (Ping timeout: 240 seconds)
*	Maqs1 (~Maqs@185.103.96.135) has joined
*	OnkelTem has quit (Ping timeout: 248 seconds)
*	codrinb (~codrinb@94.177.40.42) has joined
*	BartAdv has quit (Quit: Connection closed for inactivity)
*	conal (~conal@185.145.156.43) has joined
*	BirchSoft (~BirchSoft@2a02:908:d72:1320:3210:b3ff:fee9:33b4) has joined
<erisco>	Could not deduce: (rmap :$ (rmap :$ r1)) ~ (rmap :$ (rmap :$ r1))
<erisco>	now this is reminding me of Idris
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
<c_wraith>	erisco: you're probably being bitten by non-injectivity somewhere
<erisco>	but that particular complaint looks absurd
*	pera has quit (Ping timeout: 260 seconds)
*	conal has quit (Ping timeout: 248 seconds)
<c_wraith>	I've managed to get messages about not being able to convert forall a. a -> a to forall b. b -> b
*	conal (~conal@23.226.128.35) has joined
<c_wraith>	But that requires enabling -XImpredicativeTypes, and they're known to be broken...
*	codrinb has quit (Ping timeout: 260 seconds)
*	safe (~safe@unaffiliated/safe) has joined
<erisco>	I don't know how to clearly explain what I am trying to do
<erisco>	that is probably the first reason I can't solve it
*	soniku has quit (Ping timeout: 252 seconds)
*	codrinb (~codrinb@94.177.40.42) has joined
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Sat Sep  9 11:24:04 2017

**** BEGIN LOGGING AT Sat Sep  9 11:38:53 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<erisco>	I can have  F b a -> a -> b  which would be for <*> but I don't see this happening generally
<crucify_me>	<< see moniker
*	codrinb (~codrinb@94.177.40.42) has joined
**** BEGIN LOGGING AT Sat Sep  9 12:14:20 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:12 2017)
*	Channel #haskell url: http://www.haskell.org/
*	trigone (c2d63e8a@gateway/web/freenode/ip.194.214.62.138) has joined
Python interface unloaded
**** ENDING LOGGING AT Sat Sep  9 12:15:37 2017

**** BEGIN LOGGING AT Sat Sep  9 12:15:48 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<trigone>	hi! say i have two IO handles for two files. i truncated file B and i'd like to copy the end of file A (from the current position onwards) right at the end of file B. what's the easiest and fastest method?
<trigone>	(binary files, if it makes a difference)
*	conal has quit (Quit: Computer has gone to sleep.)
*	conal (~conal@client-7-151.visitor-network.oxuni.org.uk) has joined
*	soLucien has quit (Ping timeout: 240 seconds)
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Sat Sep  9 12:17:23 2017

**** BEGIN LOGGING AT Sat Sep  9 12:17:36 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:12 2017)
*	Channel #haskell url: http://www.haskell.org/
<dmwit>	hGetContents hA >>= hPutStr hB
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Sat Sep  9 12:17:40 2017

**** BEGIN LOGGING AT Mon Sep 11 11:18:07 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:46:51 2017)
*	Channel #haskell url: http://www.haskell.org/
*	Infinisil (~infinisil@178.197.225.52) has joined
<StrangeLoop>	Hi. So I wrote a small program for simulating a riffle shuffle. It works but I feel its kinda clunky. Would it be terribly imposing to paste it and ask you to have a look and tell me what you'd have done differently? I really don't feel that I applied the basic Haskell toolbox properly
*	codrinb has quit (Ping timeout: 260 seconds)
<jle`>	StrangeLoop: just paste it and the people who care would read it
<jle`>	and if they don't, they won't :)
<jle`>	it's not too much noise and it's not like you're forcing everyone to help you :)
<jle`>	a lto of poeple here would be happy to
<hc>	So basically I'll use "addFinalizer" from the System.Mem.Weak package?
<hc>	That sounds easy enough :)
*	purplelambda has quit (Remote host closed the connection)
<StrangeLoop>	OK, so here it is. I am especially displeased with the way I incorporated randomness: http://lpaste.net/7901426131583107072
*	Infinisi1 has quit (Ping timeout: 240 seconds)
<jle`>	handling randomness there looks fine to me, as a simple way to start off
<monochrom>	hc: But how do you obtain the ThreadId?
<jle`>	StrangeLoop: be aware that the convention is to have functions that regurn (g -> (a, g))'s
<jle`>	s/the/a
<jle`>	so taking your 'g' as the last argument is a common convention when working with seeds/state like that
<hc>	monochrom: forkIO
<ski>	StrangeLoop : the type ascriptions in `values' and `suits' are redundant
*	freeman42x[m] (~freeman42@5.149.170.122) has joined
<jle`>	StrangeLoop: it's that way because there are a lot of higher-order functions and combinators that can take advantage of that particular argument order
<hc>	The purpose of the thread is to close idle network connections.. It's a connection pool I'm managing
<jle`>	and so it makes it a bit more convenient to use it with those hof's/combinators
<monochrom>	Oh, you are the author of newSession and you can do this in its code.
<hc>	precisely
*	XorSwap has quit (Ping timeout: 246 seconds)
*	twanvl (~twanvl@92.110.121.28) has joined
<ski>	(the brackets around `RandomGen g' are also redundant)
<monochrom>	OK yeah I didn't know that.
*	gawen (~gawen@movzbl.root.sx) has joined
<hc>	I should have mentioned that.. sorry
<jle`>	StrangeLoop: you don't use any of such combinators at this moment so it's not too bad either way; just letting you know in case you do one day decide to take advantage of them
<[exa]>	StrangeLoop: you might want to have data Card = Card Suit Deck explicitly (it looks nicer)
<[exa]>	StrangeLoop: also, for capturing randomness there's a nice tutorial somewhere that teaches you to write a StateM-like monad, so that you don't have to pass the 'g' around yourself
*	freeman42y[m] has quit (Ping timeout: 248 seconds)
*	conal has quit (Quit: Computer has gone to sleep.)
*	codrinb (~codrinb@94.177.40.42) has joined
*	gxt (~gxt@2a02:908:a30:e5a0:1459:bf5:763:25a7) has joined
<StrangeLoop>	passing that g around was a real hassle, and made the code considerably more clumsy
<StrangeLoop>	So if that's avoidable I'm all ears :)
<[exa]>	StrangeLoop: (in fact the code almost looks like if you just inlined the StateM into that :] ) Lemme find the tutorial
*	pond (~pondpremt@dhcp-18-111-55-159.dyn.mit.edu) has joined
<StrangeLoop>	Other than that you'd say that code is fine, for a first program?
*	purplelambda (~purplelam@c83-251-30-225.bredband.comhem.se) has joined
<StrangeLoop>	I'm trying to evaluate myself here :P
<jle`>	passing g this way is fine for a simple start and it wouldn't be too bad to see it in production code
<jle`>	the main issue is that you might accidentally pass in the wrong 'g'
<ski>	possibly better to get in the habit of using `newStdGen' rather than `getStdGen', if you're going to use `StdGen'
<jle`>	and the type system wouldn't check this
<[exa]>	StrangeLoop: this is probably good: https://en.wikibooks.org/wiki/Haskell/Understanding_monads/State#Introducing_State
<jle`>	*wouldn't catch this
<[exa]>	StrangeLoop: are you new into monads?
<StrangeLoop>	I read LYAH about a a year and a half ago and made some toy programs, and then I forgot all about it, and now I'm repeating
<jle`>	State is a nice abstraction for this because (1) it handles passing g's properly so you can't accidentally mess up and pass the wrong one or re-use them and (2) it allows you to use the many useful combinators in the Control.Monad module
*	newbie57 has quit (Ping timeout: 248 seconds)
<[exa]>	yes
<jle`>	like replicateM :: Int -> Rand g a -> Rand g [a]
<jle`>	for taking something that samples once and turning it into something that samples 'n' times
<StrangeLoop>	Oh I need that
<jle`>	but at this point the complexity is low enough that you won't gain too much
<jle`>	it's when you build more complex code that this would become useful
*	peterbecich has quit (Ping timeout: 260 seconds)
<StrangeLoop>	I think what I like about Haskell is how clean the code is and all this g juggling doesn't feel clean
*	cdg (~cdg@2600:1700:3120:40e0:f07b:aa19:e259:95d3) has joined
<ski>	that's what the `State' monad was invented for
<StrangeLoop>	I'm all for the aesthetics :D
*	codrinb has quit (Ping timeout: 240 seconds)
<StrangeLoop>	ski: "possibly better to get in the habit of using `newStdGen' rather than `getStdGen', if you're going to use `StdGen'" Could you elaborate a bit?
*	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has joined
<[exa]>	if it looks like a program could generate it just right (which it looks like), it's best to generate it by program right.
*	HarveyPwca has quit (Ping timeout: 240 seconds)
*	crobbins_ has quit (Remote host closed the connection)
*	ccomb has quit (Ping timeout: 240 seconds)
*	HarveyPwca (~HarveyPwc@ip-64-134-197-81.public.wayport.net) has joined
*	soniku (~soniku@S01061cabc0a5aeb3.ed.shawcable.net) has joined
<ski>	StrangeLoop : "What the hell are monads?" by Noel Winstanley in 1999-02-17 at <http://www-users.mat.uni.torun.pl/~fly/materialy/fp/haskell-doc/Monads.html> (one of the first monad tutorials) might perhaps be interesting to take a glance at, even considering it's a bit dated (names of some operations are now different)
*	unK_ (~drunK@78.10.133.54) has joined
<StrangeLoop>	Does it have any advantage over "Understanding Monads" from the Wiki?
<ski>	StrangeLoop : `getStdGen' just grabs the global `StdGen' residing in `IO'. if you do it twice, you get the same PRNG state. `newStdGen' calls `split' to split it, so that you get a new one each time
*	pfurla (~textual@38.86.167.91) has joined
*	codrinb (~codrinb@94.177.40.42) has joined
<monochrom>	I still have the much procratinated secret project of translating Wadler's monad tutorial to today's notation.
<ski>	well, it's short and to the (pragmatic) point
*	robotroll has quit (Remote host closed the connection)
<maerwald>	Maybe is a poor way to model failure :>
<monochrom>	Then again since AMP it is no longer a straight translation either.
<maerwald>	so the tutorial starts alread weird
<ski>	not getting lost in analogies about whether to liken monads to spacesuits or burritos
*	royal_screwup21 (5c622177@gateway/web/cgi-irc/kiwiirc.com/ip.92.98.33.119) has joined
*	conal (~conal@104.255.240.10) has joined
*	crobbins_ (~crobbins@2600:1700:6391:1c20::48) has joined
*	soniku has quit (Ping timeout: 246 seconds)
*	pgiarrusso_ (~pgiarruss@5.92.77.76) has joined
<ski>	(not intending to insinuate that the wiki one does that. but a lot of the tutorials found in the wild seem to be preoocupied with such matters, to the detriment of practicalities)
<maerwald>	I find it funny
*	cfricke (~cfricke@unaffiliated/cfricke) has joined
<maerwald>	haskell and monads have been there for so long and there is still widespread confusion about how to explain them :>
*	pgiarrusso has quit (Ping timeout: 260 seconds)
*	codrinb has quit (Ping timeout: 260 seconds)
*	gxt has quit (Ping timeout: 246 seconds)
*	pyon (~pyon@unaffiliated/pyon) has joined
*	freeman42y[m] (~freeman42@83.136.43.150) has joined
<royal_screwup21>	https://thepasteb.in/p/98hRE36WRMyIk super noob question, but why isn't this valid in haskell?
<ski>	@type getStdRandom  -- there's also this one
<lambdabot>	(StdGen -> (a, StdGen)) -> IO a
<ski>	@type getStdRandom . runState
<lambdabot>	State StdGen a -> IO a
*	jdnavarro (~danny@200.111.121.146) has joined
<monochrom>	It is valid in Haskell.
<mnoonan>	royal_screwup21, it is (afaict), but  in "x=x+1", the LHS x is the same as the RHS x. in other words, you wrote a recursive definition.
*	HarveyPwca has quit (Ping timeout: 252 seconds)
<monochrom>	Or rather, it is valid Haskell.
<ski>	`x' is defined to be `x' plus one
*	Infinisi1 (~infinisil@xdsl-31-165-62-80.adslplus.ch) has joined
<ski>	this local variable `x' shadows the parameter `x'. the local variable `x' is the one that's used in `x+y'
*	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined
*	mek42 (~quassel@2604:6000:1418:c11c:75e6:4b83:d07c:d9db) has joined
<monochrom>	In general next time you need to say something more specific than "valid" or "works".
*	freeman42x[m] has quit (Ping timeout: 248 seconds)
<ski>	(and similarly for `y')
<royal_screwup21>	thanks guys! And yeah, I should have rephrased my question :)
*	sphinxo (~sphinxo@213.86.221.35) has joined
<monochrom>	Because as a programmer, even you know how end-users are unhelpful when they just say "your software doesn't work" without saying what they tried and what they observed.
*	codrinb (~codrinb@94.177.40.42) has joined
*	Enigmagic (~enigmo@unaffiliated/enigmagic) has joined
*	ski idly considers the case when implementors coincide with end-users
<monochrom>	Programmers should be the ones most sensitive to this. Because they suffer it from end-users all the time.
*	osa1 has quit (Ping timeout: 260 seconds)
<monochrom>	And yet programmers are also the worst offenders of this.
*	JeanCarloMachado has quit (Ping timeout: 252 seconds)
*	HarveyPwca (~HarveyPwc@ip-64-134-197-81.public.wayport.net) has joined
<monochrom>	Is this some kind of revenge psychology?
<tomasmu>	:D
*	Unhammer (~Unhammer@gateway/tor-sasl/unhammer) has joined
*	Luke (~luke@unaffiliated/luke) has joined
*	Infinisil has quit (Ping timeout: 240 seconds)
*	taktoa has quit (Remote host closed the connection)
*	ilyaigpetrov (uid120452@gateway/web/irccloud.com/x-wicbjejksawzkqkr) has joined
*	systemfault (~rcyr@unaffiliated/rcyr) has joined
*	codrinb has quit (Ping timeout: 240 seconds)
*	unyurysohn is now known as unyu
*	mnoonan has quit (Ping timeout: 260 seconds)
<tomasmu>	i'm trying to use getLine or readLn, and sending it to a function that takes (x:xs)
*	pond has quit (Quit: pond)
<monochrom>	Probably it's getLine.
*	conal has quit (Ping timeout: 252 seconds)
*	jay (~jay@117.209.128.168) has joined
<mauke>	>>=
<tomasmu>	with getLine, i'm getting Couldn't match type ‘Char’ with ‘[Char]’  Expected type: [[Char]]  Actual type: String
*	JuanDaugherty (~jdaughert@98.4.124.117) has joined
*	pyon has quit (Ping timeout: 248 seconds)
<tomasmu>	only four data types involved in the error message :P
*	conal (~conal@23.226.128.37) has joined
<mauke>	three
*	jay is now known as Guest20399
<mauke>	String = [Char]
*	crobbins_ has quit (Ping timeout: 252 seconds)
<tomasmu>	oh :)
*	henriksod (~Thunderbi@89.160.47.146) has joined
*	vjacob has quit (Ping timeout: 240 seconds)
<mauke>	your function expects a list of strings
*	ltielen (~ltielen@d54c2eac9.access.telenet.be) has joined
<mauke>	you're giving it a single string (a list of chars)
*	Guest17608 has quit (Ping timeout: 240 seconds)
*	codrinb (~codrinb@94.177.40.42) has joined
*	djapo (~archie@unaffiliated/djapo) has joined
<tomasmu>	oh, so this is where function definition is useful :)
*	locallycompact has quit (Ping timeout: 240 seconds)
<monochrom>	If you use readLn for this, the input format is going to be a bit strange.
*	aarvar (~foewfoiew@50.34.105.170) has left
<StrangeLoop>	Is there a reason to use "liftA2 foo bar baz" rather than "foo <$> bar <*> baz" like I see a lot of tutorials do?
<monochrom>	There is no reason to reject either one.
<mauke>	liftA2 is nicer if you don't have bar/baz at hand
*	codrinb has quit (Ping timeout: 240 seconds)
<mauke>	like quux = liftA2 foo
*	crownose (~weechat@2a02:8010:6173:0:2ab2:bdff:fe2b:c456) has joined
<StrangeLoop>	Ohhh cool
*	peterbecich (~peterbeci@47.37.164.78) has joined
*	eminhi has quit (Quit: leaving)
*	sellout- (~Adium@c-67-188-42-8.hsd1.ca.comcast.net) has joined
*	jellowj has quit (Ping timeout: 240 seconds)
*	davr0s has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
*	vjacob (~vjacob@173.208.58.195) has joined
<tomasmu>	so yeah, i think the function definition was the missing piece of the puzzle
*	pond (~pondpremt@dhcp-18-111-55-159.dyn.mit.edu) has joined
*	jeltsch (~wolfgang@82.131.87.29.cable.starman.ee) has joined
<tomasmu>	thanks mauke for sending me in the right direction :)
*	codrinb (~codrinb@94.177.40.42) has joined
*	Luke has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<tomasmu>	and monochrom for getLine =)
*	caumeslasal (~Thunderbi@mar92-10-82-239-65-141.fbx.proxad.net) has joined
*	JeanCarloMachado (~jean@186.222.2.205) has joined
*	samrat has quit (Ping timeout: 240 seconds)
*	perrier-jouet (~perrier-j@gateway/vpn/privateinternetaccess/perrier-jouet) has joined
*	aarvar (~foewfoiew@50.34.105.170) has joined
*	codrinb has quit (Ping timeout: 246 seconds)
*	qwedfg has quit (Ping timeout: 248 seconds)
*	sellout- has quit (Quit: Leaving.)
*	neoncont_ (~neoncontr@2001:579:e09c:101:e0d3:f5ca:9046:a40e) has joined
<tomasmu>	and now when i tried to replicate the issue i failed
<tomasmu>	removed the function definition and it still worked
*	neoncontrails has quit (Ping timeout: 255 seconds)
<tomasmu>	so i think the error lied in having : or ++ in the wrong place?
*	anonymouse22929_ (51938b0e@gateway/web/freenode/ip.81.147.139.14) has joined
*	anonymouse22929 has quit (Ping timeout: 260 seconds)
*	zzq has quit (Ping timeout: 246 seconds)
<tomasmu>	i have no idea, but this is confusing
*	codrinb (~codrinb@94.177.40.42) has joined
*	Guest20399 has quit (Ping timeout: 246 seconds)
*	BartAdv (uid90451@gateway/web/irccloud.com/x-arhqxrtgtcfycbaf) has joined
*	dxld has quit (Ping timeout: 252 seconds)
*	dxld (~dxld@2002:506d:9110:0:be5f:f4ff:fe9b:ef7c) has joined
*	mkali has quit (Quit: mkali)
*	cdg has quit (Remote host closed the connection)
<tomasmu>	i've been doing too much powershell lately, which is implicit and dynamic typed, so everything "just works" :)
*	anonymouse22929_ has quit (Ping timeout: 260 seconds)
*	cdg (~cdg@2600:1700:3120:40e0:f07b:aa19:e259:95d3) has joined
*	codrinb has quit (Ping timeout: 255 seconds)
<jakub>	can I somehow mark an orphan instance so that compiler does not complain?
*	mnoonan (~mnoonan@98.159.213.242) has joined
*	zzq (~zzq@37.26.147.186) has joined
*	neoncontrails (~neoncontr@2001:579:e09c:101:f8e6:27b8:e561:b378) has joined
*	cronokirby (bc3dc504@gateway/web/cgi-irc/kiwiirc.com/ip.188.61.197.4) has joined
*	oish has quit (Ping timeout: 260 seconds)
*	neoncont_ has quit (Ping timeout: 246 seconds)
*	tremon (~aschuring@53541C2B.cm-6-5a.dynamic.ziggo.nl) has joined
*	Saukk has quit (Quit: Leaving)
*	StoneToad has quit (Ping timeout: 248 seconds)
*	cdg has quit (Ping timeout: 246 seconds)
*	JuanDaugherty (~jdaughert@98.4.124.117) has left ("Exeunt")
*	noddy (~self@82.193.222.101) has joined
*	crobbins_ (~crobbins@2600:1700:6391:1c20::48) has joined
*	cronokirby (bc3dc504@gateway/web/cgi-irc/kiwiirc.com/ip.188.61.197.4) has left
*	oish (~charlie@159.22.169.217.in-addr.arpa) has joined
*	StoneToad (~StoneToad@ppp-199-167-119-216.storm.ca) has joined
*	codrinb (~codrinb@94.177.40.42) has joined
<byorgey>	jakub: there is no way to mark a particular instance (see https://ghc.haskell.org/trac/ghc/ticket/602) .  However, you can ignore orphan instance warnings in an entire module with {-# OPTIONS_GHC -fno-warn-orphans #-} .
<jakub>	byorgey: thanks
*	tnecniv (~textual@unaffiliated/jimihendrix) has joined
*	exarkun has quit (Read error: Connection reset by peer)
*	bigos has quit (Ping timeout: 246 seconds)
*	rootmos has quit (Remote host closed the connection)
*	cdg (~cdg@2600:1700:3120:40e0:f07b:aa19:e259:95d3) has joined
*	crobbins_ has quit (Ping timeout: 246 seconds)
*	neoncontrails has quit (Ping timeout: 246 seconds)
*	keep_learning has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
*	danilo_ (~danilo@static-186-121-242-83.acelerate.net) has joined
*	danilo_ has quit (Read error: Connection reset by peer)
*	freeman42x[m] (~freeman42@2a02:8084:e82:4880:f0d4:40b2:5721:7653) has joined
*	keep_learning (96cbd2d5@gateway/web/cgi-irc/kiwiirc.com/ip.150.203.210.213) has joined
*	theelous3 (~theelous3@unaffiliated/theelous3) has joined
*	jellowj (~yellow-ja@dee52.neoplus.adsl.tpnet.pl) has joined
*	rnhmjoj[m] (rnhmjojmax@gateway/shell/matrix.org/x-cyozcfclimezddep) has left ("User left")
*	neoncontrails (~neoncontr@2001:579:e09c:101:4821:9299:4a5f:bff5) has joined
*	toblorone has quit (Remote host closed the connection)
*	caumeslasal has quit (Ping timeout: 248 seconds)
*	freeman42y[m] has quit (Ping timeout: 260 seconds)
*	exarkun (~exarkun@vtelinet-66-220-238-250.vermontel.net) has joined
*	Immune has quit (Read error: Connection reset by peer)
*	steeze has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
*	Immune (~Immune@47.145.46.247) has joined
*	neoncont_ (~neoncontr@2001:579:e09c:101:10c9:8e11:3a3e:4aca) has joined
*	neoncont_ has quit (Remote host closed the connection)
*	neoncontrails has quit (Ping timeout: 246 seconds)
*	Luke (~luke@unaffiliated/luke) has joined
*	whoisxy (~whoisxy@83.137.254.176) has joined
*	brandly has quit (Remote host closed the connection)
*	eklavya has quit (Remote host closed the connection)
*	hackagebot has quit (Read error: error:1408F119:SSL routines:SSL3_GET_RECORD:decryption failed or bad record mac)
*	hackagebot (~hackagebo@2a00:dcc0:eda:88:245:71:269a:892d) has joined
*	steeze (~steeze@63.76.231.82) has joined
*	augur has quit (Remote host closed the connection)
*	cdg has quit (Remote host closed the connection)
*	Unhammer has quit (Remote host closed the connection)
*	joncfoo has quit (Ping timeout: 240 seconds)
*	romanzolotarev[m (romanzolot@gateway/shell/matrix.org/x-fmfiodwwwydvimvq) has joined
*	dsh has quit (Read error: Connection reset by peer)
*	Unhammer (~Unhammer@gateway/tor-sasl/unhammer) has joined
*	henriksod has quit (Ping timeout: 260 seconds)
*	mohsen_ has quit (Quit: WeeChat 1.9)
*	henriksod (~Thunderbi@89.160.47.146) has joined
*	plutoniix has quit (Ping timeout: 240 seconds)
*	plutoniix (~q@node-nke.pool-101-108.dynamic.totbb.net) has joined
*	sellout- (~Adium@c-67-188-42-8.hsd1.ca.comcast.net) has joined
*	conal has quit (Ping timeout: 240 seconds)
*	coot___________ (~coot@188.146.166.152.nat.umts.dynamic.t-mobile.pl) has joined
*	odites (~odites@95.141.37.164) has joined
*	cyborg-one (~cyborg-on@188-115-190-24.broadband.tenet.odessa.ua) has joined
*	codrinb has quit (Ping timeout: 240 seconds)
*	MP2E (~cray@ip68-224-146-82.lv.lv.cox.net) has joined
*	cpup- (~cpup@32.218.115.128) has joined
*	cfricke has quit (Quit: WeeChat 1.9)
*	Guest58799 is now known as baweaver
*	baweaver has quit (Changing host)
*	baweaver (~baweaver@ruby/staff/baweaver) has joined
*	cpup has quit (Ping timeout: 260 seconds)
*	joncfoo (~jonathan@c-67-176-93-55.hsd1.co.comcast.net) has joined
*	danthemyth has quit (Remote host closed the connection)
*	XorSwap (~XorSwap@wnpgmb016qw-ds01-58-40.dynamic.bellmts.net) has joined
*	afarmer has quit (Ping timeout: 252 seconds)
*	cpup (~cpup@32.218.115.128) has joined
*	conal (~conal@23.226.128.37) has joined
*	biglama has quit (Quit: Lost terminal)
*	schoppenhauer has quit (Ping timeout: 248 seconds)
*	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has joined
*	CoderPuppy has quit (Ping timeout: 260 seconds)
*	keep_learning has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
*	amarp (~amarpotgh@p57967E46.dip0.t-ipconnect.de) has joined
*	keep_learning (96cbd2d5@gateway/web/cgi-irc/kiwiirc.com/ip.150.203.210.213) has joined
*	codrinb (~codrinb@94.177.40.42) has joined
*	toblorone (~toblorone@162.246.216.28) has joined
*	qwedfg (~adam@aare146.neoplus.adsl.tpnet.pl) has joined
*	aarvar1 (~foewfoiew@50.34.105.170) has joined
<royal_screwup21>	have a statement within a guard like so: "otherwise = n:(replicate' (n-1) x)". What's the difference between that and "otherwise = n:(replicate' n-1 x)". Doing the latter returned an error https://thepasteb.in/p/oYhl3qR9566tZ  (the function is replicate' n x)
<monochrom>	precedence.
<royal_screwup21>	I guess the more general question is: when should you put parantheses?
<monochrom>	Clearly, "sin x - 1" does not mean "sin (x - 1)".
*	mson has quit (Quit: Connection closed for inactivity)
<royal_screwup21>	ah okay
<monochrom>	Be aware of all operator precedence.
*	aarvar has quit (Ping timeout: 240 seconds)
<royal_screwup21>	thanks monochrom
*	amarp has quit (Ping timeout: 248 seconds)
<StrangeLoop>	Ok. So I'm trying this monadic random thing. The thing is, that it uses mkStdGen. If I want the execution to be random every time I need to use newStdGen, but it is an IO, so either I make everything IO, or I pass a seed around, which kinda contradicts using a state monad to avoid passing the generator around, am I missing something?
*	codrinb has quit (Ping timeout: 240 seconds)
*	aarvar1 is now known as aarvar
*	amarp (~amarpotgh@p57967E46.dip0.t-ipconnect.de) has joined
<Psybur>	In the case of using (++), its better to use foldr than foldl?
<Psybur>	So that you dont iterate over the accumulation each step?
*	pond has quit (Quit: pond)
*	umib0zu (~umib0zu@216.57.91.6) has left
*	sellout- has quit (Quit: Leaving.)
*	keep_learning has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
*	toblorone has quit (Ping timeout: 240 seconds)
*	takle has quit (Remote host closed the connection)
<maerwald>	Psybur: foldl' maybe
*	keep_learning (96cbd2d5@gateway/web/cgi-irc/kiwiirc.com/ip.150.203.210.213) has joined
<maerwald>	or was that (+)
<maerwald>	I'm too drunk to remember
<maerwald>	https://wiki.haskell.org/Foldr_Foldl_Foldl%27
<lyxia>	StrangeLoop: how does passing a seed around contradict using a state monad
*	schoppenhauer (~schoppenh@unaffiliated/schoppenhauer) has joined
*	takle (~takle@88.211.111.206) has joined
<StrangeLoop>	lyxia: I thought the entire point of the state monad is to avoid passing the random generator around. What is the benefit if I still have to pass the seed around?
<Psybur>	So that we get ("dude" ++ ("bro" ++ "sweet")) instead of (("dude" ++ "bro") ++ ("sweet")). The former there will be iteration over "bro" and then "dude" whereas the latter there will be iteration over "dude" and then "dudebro" ?
*	qwedfg has quit (Ping timeout: 248 seconds)
<Psybur>	Since a ++ b means iterate over a until we get to the end then put and the end?
*	codrinb (~codrinb@94.177.40.42) has joined
*	toblorone (~toblorone@162.246.216.28) has joined
<maerwald>	see the conclusion in the wiki article
<Psybur>	*  Since a ++ b means iterate over a until we get to the end then put b at the end
<maerwald>	foldl' has different strictness properties than foldl
<maerwald>	depends on what you are doing
*	quobo has quit (Quit: Connection closed for inactivity)
<lyxia>	StrangeLoop: the point is to not have to pass the generator *explicitly* because it is a source of bugs. You still have to say where the seed comes from.
*	glguy has quit (Ping timeout: 255 seconds)
*	Youmu has quit (Quit: Connection closed for inactivity)
<barrucadu>	StrangeLoop: If all your things are in 'State g' for some random generator 'g', then you create the generator once when you call 'runState'.
*	takle has quit (Ping timeout: 240 seconds)
*	curtis (uid251740@gateway/web/irccloud.com/x-gxwnbzbcmsehlbwf) has joined
<dsal>	@pl (\x -> x * x < n)
<lambdabot>	(< n) . join (*)
*	codrinb has quit (Ping timeout: 240 seconds)
<jared-w>	dsal: why do I get the feeling you're obsessed by point free notation? :p
*	toblorone has quit (Ping timeout: 248 seconds)
<StrangeLoop>	I'm trying to implement a function which takes a list and splits it in a random location, how would you achieve this?
<dsal>	heh.  I'm just looking to see if there's a nice way to do a thing.  I don't like a lot of these, but sometimes I miss something obvious.
*	pavonia has quit (Read error: Connection reset by peer)
*	pavonia (~user@unaffiliated/siracusa) has joined
*	oisdk (~textual@83.136.43.150) has joined
*	curtis is now known as cgag_
*	glguy (~glguy@haskell/developer/glguy) has joined
<jle`>	StrangeLoop: how do you want the splits to be distributed?
<monochrom>	Not obsessed. Just a beginner and getting a feel of what looks good and what looks bad and what it looks like at all.
<StrangeLoop>	jle`: say uniformly
<barrucadu>	Well, I probably wouldn't.  But if I did want such a function I'd use something like :: RandomGen g => [a] -> g -> ([a], g)
<jle`>	StrangeLoop: uniformly in proportion?
<jle`>	lists are kind of a weird data structure for this
<jle`>	but you could do it by picking a random number from 0 to the length, and then splitting at that spot using 'splitAt'
*	anton__ has quit (Quit: Lost terminal)
<jle`>	a better data structure for this sort of operation would be vector/array
*	bmeynell_ (~bmeynell@142-197-108-175.res.bhn.net) has joined
*	ystael has quit (Ping timeout: 248 seconds)
<StrangeLoop>	I want to do splitAt r a where r is chosen uniformly at random from (1..length a)
<jle`>	exactly
*	Flechette (~Sundancer@unaffiliated/sundancertp) has joined
<jle`>	lists are actually really good for splitting according to the geometric distribution
<monochrom>	That doesn't sound very much like riffling, but meh.
*	urodna_ (~urodna@unaffiliated/urodna) has joined
<barrucadu>	splitRandomly [] g = ([], [], g); splitRandomly xs g = let (i, g') = randomR (0, length xs - 1); (before, after) = splitAt i xs in (before, after, g') -- something like that, perhaps?
*	ventonegro has quit (Ping timeout: 246 seconds)
*	sdx23 (~sdx23@unaffiliated/sdx23) has joined
<jle`>	riffling follows the geometric distribution very well so there's that
<barrucadu>	Whoops, pass 'g' to 'randomR' there
*	inhortte has quit (Quit: Leaving.)
*	sa1_ (sid7690@gateway/web/irccloud.com/x-gscrbqbqxkdwyeqf) has joined
*	nbouscal_ (sid60097@gateway/web/irccloud.com/x-htluaqhahaajnqeh) has joined
*	thoradam_ (sid154141@gateway/web/irccloud.com/x-qrlchqsqycsjrenf) has joined
*	mystfox_ (sid36625@gateway/web/irccloud.com/x-qahywlzbcyjdxqro) has joined
*	monad_cat_ (sid157798@gateway/web/irccloud.com/x-gcbtrvlanmgsppqi) has joined
*	gornikm_ (sid133224@gateway/web/irccloud.com/x-ozivblsjfwuhqaph) has joined
*	dgonyeo_ (sid148958@csh/dgonyeo) has joined
*	wavewave_ (sid213670@gateway/web/irccloud.com/x-pdoycuhqwetfqwjg) has joined
*	spinda_ (sid139604@gateway/web/irccloud.com/x-ngtsabiyfdgxbrdy) has joined
*	worch has quit (Ping timeout: 240 seconds)
*	noobst_ (sid201439@gateway/web/irccloud.com/x-uvelbnjpudlfqugb) has joined
*	ryantm_ (uid53768@gateway/web/irccloud.com/x-jkbzlmdoohjcotes) has joined
*	solidsnack_ (sid135249@pdpc/supporter/active/solidsnack) has joined
<monochrom>	My riffling is first splitting at a normally distributed point with the middle as the mean and a very small variance. And then the real random fun begins, the interleaving is randomized.
*	feltnerm_ (sid197554@gateway/web/irccloud.com/x-bawtcxfdnbrcqdjr) has joined
*	bgyss_ (sid11244@gateway/web/irccloud.com/x-bhquvhmrkujwskwb) has joined
*	unyu has quit (Ping timeout: 260 seconds)
*	oldsk00l has quit (Ping timeout: 260 seconds)
<StrangeLoop>	When you say geometric distribution you mean that I should think of the splitting point as the first point where I tossed a tail?
*	jamiecook__ (uid37575@gateway/web/irccloud.com/x-fvxghzvszhzidzpg) has joined
<monochrom>	At least that's how I do it by hand.
*	mkurkov__ (sid23448@gateway/web/irccloud.com/x-telrpxevbtjwiqnj) has joined
*	rotaerk has quit (Ping timeout: 252 seconds)
*	mpickering_ (sid78412@gateway/web/irccloud.com/x-zpuxrooagvkfeoni) has joined
*	zmanian_______ (sid113594@gateway/web/irccloud.com/x-roncdvgyqtxwmhgz) has joined
*	lumimies_ (sid18496@gateway/web/irccloud.com/x-njqxgxdggvuohpvd) has joined
<jle`>	StrangeLoop: yes that's one method to produce a split following the geometric distribution
*	billstclair_ (sid77830@gateway/web/irccloud.com/x-vpghwuixikofdjyl) has joined
*	jml_ (sid162989@gateway/web/irccloud.com/x-mgzfgwptyuiaxpzq) has joined
<jle`>	and lists are a particularly good data structure for this
*	lopex_ (uid4272@gateway/web/irccloud.com/x-wdoigvfzdciquael) has joined
*	adelbertc_ (sid26183@gateway/web/irccloud.com/x-obwpumwkvshlehbv) has joined
<jle`>	like amazingly good
*	freeman42y[m] (~freeman42@83.136.43.77) has joined
*	ocharles_ (sid30093@musicbrainz/user/ocharles) has joined
*	Xorlev_ (sid226@gateway/web/irccloud.com/x-wawdbxfcvqxuuvgi) has joined
*	sclv_ (sid39734@haskell/developer/sclv) has joined
<jle`>	(they are a bad data structure for uniform random splits)
*	OliPicard_ (sid88086@gateway/web/irccloud.com/x-flzhhbzaawltzcyl) has joined
*	PotatoGim_ (sid99505@gateway/web/irccloud.com/x-qdorgnovdfspbtsx) has joined
*	jadrian_ (~jadrian@2001:8a0:f039:a101:eab0:47e4:8e5d:b8c6) has joined
<ltielen>	:q
*	ltielen has quit (Quit: WeeChat 1.9)
<monochrom>	That's neat, jle`
*	`Guest00100 (~user@37.113.180.54) has joined
*	bjobjo_ (~bjobjo@117.51-174-197.customer.lyse.net) has joined
*	Neo__ (~neo@opennic/Neo) has joined
*	xnyhps_ (~xnyhps@2a02:2770:3:0:216:3eff:fe67:3288) has joined
<StrangeLoop>	Anyway, I don't see why choosing the splitting point geometrically is a good model for cutting a deck. I would guess normal distribution around the middle.
*	atomi_ (~atomi@71-83-179-177.dhcp.lnbh.ca.charter.com) has joined
*	idupree2 (~quassel@2604:a880:400:d0::9bb:2001) has joined
*	TRMander1on (~s4315893@2407:2e00:602:306:21ad:f401:ef31:9800) has joined
*	angular_mike___ (sid45533@gateway/web/irccloud.com/x-sjbymsbxnhfporqg) has joined
*	aweinsto1k (~aweinstoc@cpe-67-248-70-212.nycap.res.rr.com) has joined
*	Ferdiran1 (~max@xolus.net) has joined
*	chelfi3 (~chelfi@2001:41d0:8:167f::1) has joined
*	kubrat_ (~val@mail.bogda.co.uk) has joined
*	oldsk00l (~znc@ec2-52-57-49-181.eu-central-1.compute.amazonaws.com) has joined
<jle`>	StrangeLoop: it's good for riffling two halves back together
*	lexi-lambda_ (sid92601@gateway/web/irccloud.com/x-mtbqxuvfhoopkxlp) has joined
<jle`>	you iterate adding between one stack and the other to a final combined stack
*	sivs (~quassel@lurga.iskrembilen.com) has joined
*	unidan (~quassel@2001:41d0:a:21b8::1) has joined
*	lizzie_ (~quassel@2604:a880:1:20::119c:3001) has joined
*	Bigcheese_ (~quassel@unaffiliated/bigcheese) has joined
*	intelux_ (~intelux@2604:180:2:59c::5b32) has joined
<jle`>	and the number of items you pull from either half every time follows the geometric distribution
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
<jle`>	ie, you pick from a random half every time
*	xkapastel_ (uid17782@gateway/web/irccloud.com/x-ymqjkjjljonhhpmm) has joined
*	crobbins_ (~crobbins@2600:1700:6391:1c20::48) has joined
*	tjbp_ (~tom@tjbp.net) has joined
*	lexi-lambda has quit (Disconnected by services)
*	lexi-lambda_ is now known as lexi-lambda
*	freeman42x[m] has quit (Ping timeout: 252 seconds)
*	cranej (~cranej@42.120.74.202) has joined
*	catsup_ (d@ps38852.dreamhost.com) has joined
<StrangeLoop>	jle`: I recently read that empirical data showed that a random coinflip merge is a very good model of how non professional players riffle
<dsal>	Is there a thing that does @pl without having to spam the channel?  :)
*	hexfive has quit (Quit: WeeChat 1.9)
<jle`>	StrangeLoop: indeed :)
<jle`>	huh that's nice to see that there's actual data
*	JeanCarloMachado has quit (Ping timeout: 246 seconds)
<jle`>	dsal: you can pm lambdabot
*	grayhatt3r (~grayhatte@epicwalnutcreek.com) has joined
<jle`>	using /query lambdabot
*	rembo10_ (~rembo10@2a01:4f8:c17:5b49::2) has joined
*	scav_ (~scav@devbugger.com) has joined
*	sdhandsucks (~sam@2001:41c8:51:10d::) has joined
*	GreySunshine_ (~vasanth@2400:8901::f03c:91ff:fe28:26e8) has joined
<dsal>	Oh cool.  Seems obvious.
*	nek0- (~nek0@watch.chelnok.de) has joined
*	hydraz_ (hydraz@coleridge.vehk.de) has joined
*	ystael (~ystael@209.6.50.55) has joined
<jle`>	not obvious!
*	bjs_ (~bjs@lfdfq.com) has joined
*	SexHendrix (NextHendri@2a01:7e00::f03c:91ff:fee0:e785) has joined
*	sanitypassing (~sanitypas@unaffiliated/sanitypassing) has joined
<jle`>	:)
*	cschneid_ (cschneid@2600:3c00::f03c:91ff:fe73:9540) has joined
*	jrpls_ (~jrpls@2001:41d0:a:fee1::1) has joined
*	Frodo1337 (~Ninja3047@valkyria.foobar.network) has joined
*	pmade_ (~ident@mail.pmade.com) has joined
*	sqrt2_ (~ben@unaffiliated/sqrt2) has joined
*	exferenc- (~exference@hexagoxel.de) has joined
*	vikraman (~vh4x0r@gentoo/developer/vikraman) has joined
*	ons1 (~olof@helios.knark.io) has joined
*	dysfigur- (~DANtheBEA@2a05:dfc7:dfc8:1d1::6a47) has joined
*	mstruebing1 (~mstruebin@2a00-1dc0-cafe--298f-12e7.ip.as43289.net) has joined
*	Mindless- (~MindlessD@HSI-KBW-091-089-161-079.hsi2.kabel-badenwuerttemberg.de) has joined
<StrangeLoop>	I recently studied shuffles a bit, so I want to implement them to see the stopping and mixing times in action
*	acfoltzer_ (Adam@2600:3c01::f03c:91ff:fedf:682e) has joined
<Tuplanolla>	You can also install the program separately, dsal.
*	oberste1n (~ober@2605:6400:20:748::ddee:deee) has joined
*	SexHendrix is now known as Guest38905
<dsal>	Obvious as in, "I should've tried that."
*	cdg (~cdg@162-226-219-152.lightspeed.tukrga.sbcglobal.net) has joined
*	Elsi (~Elsi@luwin.ulrar.net) has joined
<Tuplanolla>	@hackage pointfree
*	m00n_ (~m00nsl47r@enterprise.whatbox.ca) has joined
<Tuplanolla>	Serve us, lambdabot.
*	sdhand has quit (Disconnected by services)
*	dxld_ (~dxld@80-109-145-16.cable.dynamic.surfer.at) has joined
*	sdhandsucks is now known as sdhand
*	maerwald_ (~maerwald@mail.hasufell.de) has joined
*	sdhand has quit (Changing host)
*	sdhand (~sam@unaffiliated/kyubiko) has joined
*	langkid1_ (~langkid1@2604:180:0:ce:5f69:7263::) has joined
<StrangeLoop>	I can tell you that the first conclusion is that using randomness in Haskell is significantly harder for me than doing a Markovian analysis of card shuffling methods
*	Unhammer has quit (*.net *.split)
*	gehmehgeh has quit (*.net *.split)
*	LiaoTao has quit (*.net *.split)
*	dxld has quit (*.net *.split)
*	codesoup has quit (*.net *.split)
*	xkapastel has quit (*.net *.split)
*	chaosmasttter has quit (*.net *.split)
*	MindlessDrone has quit (*.net *.split)
*	urodna has quit (*.net *.split)
*	bmeynell has quit (*.net *.split)
*	simukis has quit (*.net *.split)
*	KeyJoo has quit (*.net *.split)
*	jadrian has quit (*.net *.split)
*	whitephoenix has quit (*.net *.split)
*	macrover has quit (*.net *.split)
*	scinawa has quit (*.net *.split)
*	`Guest00000 has quit (*.net *.split)
*	maerwald has quit (*.net *.split)
*	catsup has quit (*.net *.split)
*	pmade has quit (*.net *.split)
*	aweinstock has quit (*.net *.split)
*	rembo10 has quit (*.net *.split)
*	jamiecook_ has quit (*.net *.split)
*	ContessaTP has quit (*.net *.split)
*	Guest41452 has quit (*.net *.split)
*	KENNYNR1[m] has quit (*.net *.split)
*	bennofs[m] has quit (*.net *.split)
*	prot[m] has quit (*.net *.split)
*	s0ra[m] has quit (*.net *.split)
*	cjwelborn has quit (*.net *.split)
*	mimi_vx has quit (*.net *.split)
*	infandum has quit (*.net *.split)
*	sudoreboot[m] has quit (*.net *.split)
*	M-ms has quit (*.net *.split)
*	lambdabot has quit (*.net *.split)
*	sdx32 has quit (*.net *.split)
*	Elsi_ has quit (*.net *.split)
*	bjs has quit (*.net *.split)
*	sanitypa- has quit (*.net *.split)
*	kubrat has quit (*.net *.split)
*	chelfi2 has quit (*.net *.split)
*	sivs_ has quit (*.net *.split)
*	unidan_ has quit (*.net *.split)
*	solidsnack has quit (*.net *.split)
*	Xorlev has quit (*.net *.split)
*	zmanian______ has quit (*.net *.split)
*	lumimies has quit (*.net *.split)
*	spinda has quit (*.net *.split)
*	thoradam has quit (*.net *.split)
*	Neo has quit (*.net *.split)
*	Purlox has quit (*.net *.split)
*	dkellner[m] has quit (*.net *.split)
*	ons has quit (*.net *.split)
*	rimon[m] has quit (*.net *.split)
*	Ninja3047 has quit (*.net *.split)
*	atomi has quit (*.net *.split)
*	intelux has quit (*.net *.split)
*	jrpls has quit (*.net *.split)
*	plll[m] has quit (*.net *.split)
*	CryptoCalsius[m] has quit (*.net *.split)
*	zmre[m] has quit (*.net *.split)
*	dgonyeo has quit (*.net *.split)
*	sqrt2 has quit (*.net *.split)
*	langkid1 has quit (*.net *.split)
*	bjobjo has quit (*.net *.split)
*	tjbp has quit (*.net *.split)
*	idupree has quit (*.net *.split)
*	exferenceBot has quit (*.net *.split)
*	hydraz has quit (*.net *.split)
*	mstruebing has quit (*.net *.split)
*	pacak has quit (*.net *.split)
*	nisstyre has quit (*.net *.split)
*	l_zzie has quit (*.net *.split)
*	ocharles has quit (*.net *.split)
*	sa1 has quit (*.net *.split)
*	mkurkov_ has quit (*.net *.split)
*	mystfox has quit (*.net *.split)
*	feltnerm has quit (*.net *.split)
*	TRManderson has quit (*.net *.split)
*	gornikm has quit (*.net *.split)
*	scav has quit (*.net *.split)
*	Cerise has quit (*.net *.split)
*	nek0 has quit (*.net *.split)
*	jml has quit (*.net *.split)
*	NextHendrix has quit (*.net *.split)
*	wavewave has quit (*.net *.split)
*	ryantm has quit (*.net *.split)
*	mpickering has quit (*.net *.split)
*	angular_mike_ has quit (*.net *.split)
*	OliPicard has quit (*.net *.split)
*	sclv has quit (*.net *.split)
*	bgyss has quit (*.net *.split)
*	Guest291964[m] has quit (*.net *.split)
*	Ferdirand has quit (*.net *.split)
*	fbreitwieser[m] has quit (*.net *.split)
*	ggherdov has quit (*.net *.split)
*	Pilfers has quit (*.net *.split)
*	kwantam1 has quit (*.net *.split)
*	thekyriarchy has quit (*.net *.split)
*	srenatus[m] has quit (*.net *.split)
*	razvanc-r[m] has quit (*.net *.split)
*	Dako300[m] has quit (*.net *.split)
*	gesindel has quit (*.net *.split)
*	lopex has quit (*.net *.split)
*	emerson has quit (*.net *.split)
*	dsm__ has quit (*.net *.split)
*	chriswk has quit (*.net *.split)
*	runde has quit (*.net *.split)
*	dysfigured has quit (*.net *.split)
*	alem0lars has quit (*.net *.split)
*	GreySunshine has quit (*.net *.split)
*	grayhatter has quit (*.net *.split)
*	PotatoGim has quit (*.net *.split)
*	billstclair has quit (*.net *.split)
*	xnyhps has quit (*.net *.split)
*	Bigcheese has quit (*.net *.split)
*	m00n has quit (*.net *.split)
*	cschneid has quit (*.net *.split)
*	oberstein has quit (*.net *.split)
*	noobst has quit (*.net *.split)
*	no-n has quit (*.net *.split)
*	xacktm has quit (*.net *.split)
*	nelll has quit (*.net *.split)
*	nbouscal has quit (*.net *.split)
*	acfoltzer has quit (*.net *.split)
*	monad_cat has quit (*.net *.split)
*	adelbertc has quit (*.net *.split)
*	dumptruckman has quit (*.net *.split)
*	exferenc- is now known as exferenceBot
*	langkid1_ is now known as langkid1
*	grayhatt3r is now known as grayhatter
*	pmade_ is now known as pmade
*	bjs_ is now known as bjs
*	mstruebing1 is now known as mstruebing
*	grayhatter has quit (Changing host)
*	grayhatter (~grayhatte@utox/developer/grayhatter) has joined
*	lumimies_ is now known as lumimies
*	jamiecook__ is now known as jamiecook_
*	thoradam_ is now known as thoradam
*	spinda_ is now known as spinda
*	xkapastel_ is now known as xkapastel
*	solidsnack_ is now known as solidsnack
*	mkurkov__ is now known as mkurkov_
*	danthemyth has quit (Remote host closed the connection)
*	gornikm_ is now known as gornikm
*	mpickering_ is now known as mpickering
*	wavewave_ is now known as wavewave
*	sa1_ is now known as sa1
*	dgonyeo_ is now known as dgonyeo
*	nbouscal_ is now known as nbouscal
*	adelbertc_ is now known as adelbertc
*	jml_ is now known as jml
*	sclv_ is now known as sclv
*	monad_cat_ is now known as monad_cat
*	codesoup (~codesoup@2607:fea8:e2e0:240:5df0:2f95:5e96:59a4) has joined
*	ryantm_ is now known as ryantm
<jle`>	StrangeLoop: if you write coinflip merge in haskell you'll find that it's actually very pleasant if you use lists
*	lopex_ is now known as lopex
*	billstclair_ is now known as billstclair
*	bgyss_ is now known as bgyss
*	Xorlev_ is now known as Xorlev
*	mystfox_ is now known as mystfox
*	OliPicard_ is now known as OliPicard
*	mimi_vx (~mimi_vx@2002:59b1:3a11::1) has joined
*	ocharles_ is now known as ocharles
*	PotatoGim_ is now known as PotatoGim
*	feltnerm_ is now known as feltnerm
*	noobst_ is now known as noobst
*	slackman has quit (Remote host closed the connection)
<jle`>	it's a bit similar to how merge part of merge sort is so fun to write in haskell
<jle`>	(using lists)
*	kuttifunk has quit (Remote host closed the connection)
*	Purlox (~fox@2607:5300:60:14bc::) has joined
*	Bleem_ (~Bleem@2600:380:856d:ea71:e2e8:91d5:9714:2937) has joined
*	kuttifunk (~Thunderbi@host-188-174-198-104.customer.m-online.net) has joined
<StrangeLoop>	jle`: I currently want to get the randomness thing down, then I could have my fun with different data types and shuffling methods
*	Pilfey (Pillfersr@gateway/shell/elitebnc/x-zjmgjuvzwcucjhnt) has joined
*	slackman (~slackman@a5.df.a86c.ip4.static.sl-reverse.com) has joined
*	SiCC has quit (Ping timeout: 260 seconds)
*	owickstrom has quit (Ping timeout: 260 seconds)
*	dfeuer (~dfeuer@wikimedia/Dfeuer) has joined
*	Volt_ (~Volt_@c-68-51-145-60.hsd1.mi.comcast.net) has joined
*	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has joined
*	vaibhavsagar has quit (Ping timeout: 240 seconds)
<Tuplanolla>	If you just want to wrangle indices, I'd expect your type to be `RandomGen g => Vector a -> State g (Vector a)` or `MonadRandom m => Vector a -> m (Vector a)`, StrangeLoop.
*	Bleem has quit (Ping timeout: 248 seconds)
*	cranej has quit (Ping timeout: 252 seconds)
*	guios has quit (Ping timeout: 260 seconds)
*	aaron7 has quit (Ping timeout: 260 seconds)
*	sleepynate has quit (Ping timeout: 240 seconds)
*	ystael has quit (Ping timeout: 240 seconds)
<StrangeLoop>	I think there's something fundamental about how randomness works in Haskell which I am not getting. Something about where the actual obtaining of random values takes place
*	keep_learning has quit (Ping timeout: 240 seconds)
*	dmiles has quit (Ping timeout: 240 seconds)
*	oisdk has quit (Ping timeout: 255 seconds)
*	SiCC (~sicc@192.241.228.24) has joined
*	owickstrom (~owickstro@ec2-52-17-47-197.eu-west-1.compute.amazonaws.com) has joined
*	guios (~gio@s18011586.domainepardefaut.fr) has joined
*	diegoksp (~diegoksp@190.153.194.178) has joined
*	ziocroc (~ziocroc@151.74.95.103) has joined
<jle`>	StrangeLoop: the basic method you're working here is using a PRNG from an initial seed
*	aaron7 (~aaron@178.62.69.194) has joined
<jle`>	(there are other approaches as well)
<jle`>	'State' is just an abstraction that makes this method nicer to use/cleaner and also less error-prone
*	vaibhavsagar (~vaibhavsa@128.199.234.106) has joined
<jle`>	getRandom :: g -> (a, g) is a pure function, so it returns the same 'random value' when given the same initial seed
*	dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) has joined
*	sleepynate (~sleepynat@162.243.79.61) has joined
<jle`>	getRandom is a typeclass method for an instance for 'a', so basically every type is allowed the ability to define how to construct a random value of that type
*	keep_learning (96cbd2d5@gateway/web/cgi-irc/kiwiirc.com/ip.150.203.210.213) has joined
<monochrom>	You need to understand that "random" and "pure function, i.e., deterministic" is at a fundamental conflict.
<jle`>	so if i define my type Foo, i can write a Random instance for Foo, and if i do that, i have to define getRandom, or how it would be possible to make a random value of Foo from an input seed
<monochrom>	And understand that other languages "simplify" it by giving you effectful procedures not functions.
<jle`>	Int, Bool, String, Double, etc. all provide their own methods, and so 'getRandom', as a typeclass method, uses the implementation that each gives
*	nisstyre (wes@2600:3c00::f03c:91ff:fe69:7f3d) has joined
<mlehmk>	but a random function can return another function, which can give a random number once and another function, which can do the same with the next random number...
*	Volt_ has quit (Ping timeout: 246 seconds)
<monochrom>	So that random(6) + random(6) ≠ (\x -> x+x)(random(6))
*	kwantam1 (~kwantam@graviton.stanford.edu) has joined
*	oisdk (~textual@83.136.43.150) has joined
*	KeyJoo (~keyjoo@37.1.34.138) has joined
<mlehmk>	I think this would be a reader monad then
<StrangeLoop>	Man, Haskell is so fun until you try to actually write something
*	scinawa (~scinawa@37.139.16.185) has joined
*	toblorone (~toblorone@162.246.216.28) has joined
<mlehmk>	something that can behave like a list of random numbers, where you can use head and tail
<jle`>	that has been the opposite of my experience :O haskell is fun when you actually start writing real things
<jle`>	cause then you get to reap all of its benefits in real projects
*	pacak (~pacak@2401:7400:e800:359c:62f8:1dff:fec8:da28) has joined
*	gesindel (Pygz76I1Fv@aries.uberspace.de) has joined
<monochrom>	So the logical conclusion is that when you insist on pure functions you have to expose the presence of a PRNG, and that the initial seed has to come from an external source such as IO.
<royal_screwup21>	is this a correct implementation of the "take" function https://thepasteb.in/p/oYhl3qnZjpYtZ It seems to work okay on my ghci console but the implementation on LYAH looks a little different (or maybe it's basically the same - I just have to look harder)
*	KENNYNR1[m] (kennynr1ma@gateway/shell/matrix.org/x-iarjcuumrnwkcxgm) has joined
<StrangeLoop>	Anyway, I get that everything is pseudorandom, and will get the same results every time unless you change the seed, and if you want to change the seed with every run you need IO
*	prot[m] (protmatrix@gateway/shell/matrix.org/x-tdnrdxqayygbqgfk) has joined
*	Guest291964[m] (m291964mat@gateway/shell/matrix.org/x-opddwphqkcljvext) has joined
*	plll[m] (plllmatrix@gateway/shell/matrix.org/x-qufryzzjdhzmnzln) has joined
*	zmre[m] (zmrematrix@gateway/shell/matrix.org/x-pzlijyjemjzuzrtc) has joined
<StrangeLoop>	What I am really not getting, is at which point of the code should I use evalState
<lyxia>	royal_screwup21: take' 1 []
*	CryptoCalsius[m] (cryptocals@gateway/shell/matrix.org/x-oayhmuybcvumhczz) has joined
*	s0ra[m] (s0ramatrix@gateway/shell/matrix.org/x-qmhfvsrgkopupktb) has joined
*	bennofs[m] (bennofsmat@gateway/shell/matrix.org/x-oecigwzrmyoxhkjw) has joined
*	chaosmasttter (~chaosmast@p5B0D2D39.dip0.t-ipconnect.de) has joined
<monochrom>	Also it is a biased to view that Haskell becomes hard as soon as you "actually write something".
*	srenatus[m] (srenatusma@gateway/shell/matrix.org/x-larmaghkebxacpfj) has joined
<jle`>	StrangeLoop: you can think of 'State' as a way to build up a big fat (g -> (a, g)) by composing smaller simpler ones
*	rimon[m] (rimonmatri@gateway/shell/matrix.org/x-ndatotsukvkmnnbh) has joined
<royal_screwup21>	lyxia ah thanks, missed that edge case!
<StrangeLoop>	monochrom: Yeah, it's a survivor bias, I was just kidding
*	sudoreboot[m] (sudoreboot@gateway/shell/matrix.org/x-dtyrsyikqjjrggpg) has joined
*	Dako300[m] (dako300mat@gateway/shell/matrix.org/x-lkvgluearyfjmxql) has joined
*	razvanc-r[m] (razvanc-rm@gateway/shell/matrix.org/x-avgadiithcbynxdn) has joined
<monochrom>	It is biased because it is true for your current project but false for other projects.
*	codrinb (~codrinb@94.177.40.42) has joined
*	dkellner[m] (dkellnerma@gateway/shell/matrix.org/x-ezjiheikjoupbbkp) has joined
*	purplelambda has quit (Remote host closed the connection)
*	M-ms (msmatrixor@gateway/shell/matrix.org/x-jxsdvdwwzmenbplo) has joined
<jle`>	StrangeLoop: if you have a bunch of random actions, you can use State to "sequence" them in a nice way
<monochrom>	Or rather, in this case, the victim bias.
*	thekyriarchy (thekyriarc@gateway/shell/matrix.org/x-qpgnnoojypypcdhu) has joined
<monochrom>	Dead men tell grave tales.
*	Ferdiran1 has quit (Ping timeout: 246 seconds)
<mniip>	royal_screwup21, as it stands your function is a bit too lazy
<StrangeLoop>	monochrom: If you were hinting that I am being a bit of a crybaby, you aren't too far off from the truth I guess
*	fbreitwieser[m] (fbreitwies@gateway/shell/matrix.org/x-lszhdaxvnlrvasns) has joined
<jle`>	StrangeLoop: at the end of the day, once you get the "g -> (a, g)" of your high-level program, then you can evalState :: State g a -> g -> a that
<lyxia>	royal_screwup21: and turn on -Wall
<mniip>	take 3 [] = [_|_, _|_, _|_]
*	whitephoenix (~whitephoe@2600:100f:b026:2506:c952:3754:4640:4879) has joined
*	nisstyre has quit (Changing host)
*	nisstyre (wes@oftn/oswg-member/Nisstyre) has joined
<ski>	> length (take 3 [])
*	mayhew (~mayhew@142.167.222.89) has joined
<jle`>	StrangeLoop: the benefit of State is that you can manipulate (g -> (a, g))'s in a "first class way"; you can combine simple ones to create more complex ones
*	Ferdirand (~max@xolus.net) has joined
<jle`>	using useful combinators
<StrangeLoop>	So the state monad is a fancy way to abstract a composed calculation, whereas evalState is an abstraction of the result of that calculation?
<monochrom>	For a more balanced view, if your project is to code up AVL tree algorithms, Haskell is the easy one, C/Java/PHP are the ones "become hard as soon as you actually write something".
<jle`>	evalState is a part of the API/interface of the State monad
<mniip>	"composed calculation" is vague af
<mniip>	state monad is specific
*	freeman42y[m] has quit (Read error: Connection reset by peer)
<jle`>	StrangeLoop: so if 'State g a' describes a stateful computation, evalState "executes" that stateful computation to create a result :: a
*	pgiarrusso_ has quit (Quit: This computer has gone to sleep)
<royal_screwup21>	mniip thanks for the feedback!
<StrangeLoop>	mniip: vague, abstract, potato, potato
<mauke>	vaguetables
*	castlelore (~castlelor@unaffiliated/castlelore) has joined
*	Wizek has quit (Quit: Connection closed for inactivity)
<mauke>	:t runState
<mauke>	:-(
<monochrom>	I don't think it's healthy to pick on "composed calculation" so early.
<jle`>	using state, you build the (g -> (a, g)) you want at the high level...and you get the ability to build it by composing simpler ones together
<ski>	`evalState' (or `execState' or `runState') is used (typically only once) when you're satisfied with your big `State s'-action, and want to "get out"
*	oish has quit (Ping timeout: 248 seconds)
<mniip>	ha!
<mniip>	my chance to shine
*	codrinb has quit (Ping timeout: 240 seconds)
<StrangeLoop>	I have a functioning code which does not use it but its ugly af
<ski>	  runState :: State s a -> (s -> (a,s))
<mniip>	% :t runState
<yahb>	mniip: runState :: State s a -> s -> (a, s)
*	steeze has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
<ski>	  evalState :: State s a -> (s -> a)
<ski>	  exexState :: State s a -> (s -> s)
<monochrom>	I mean you will have to pick on it eventually. Just not now. Get the code to work first. Then you can pick on semantics.
*	tobloron_ (~toblorone@162.246.216.28) has joined
<monochrom>	It's all empty talk until you have both an example and a counterexample.
<StrangeLoop>	monochrom: I have a working code
<mlehmk>	a reader monad from a list generator would be enough for prng I think
*	leah2 has quit (Ping timeout: 264 seconds)
<mniip>	mlehmk, no?
<mauke>	mlehmk: how do you consume things?
<StrangeLoop>	monochrom: http://lpaste.net/2214921880157028352
<mlehmk>	am I confusing reader and writer?
<mniip>	neither of those work
<barrucadu>	StrangeLoop: Here's how I did it, without using State: https://gist.github.com/barrucadu/8996405669274d6b1567ed3a4c49a9c0
*	steeze (~steeze@63.76.231.82) has joined
<monochrom>	Yeah, but I mean after you convert that into using some State monad.
<mniip>	unless by writer you really mean Writer (Endo s) which is really just state
<barrucadu>	There's lots of blank lines so you can avoid looking at the definition of a function if you want to think about it first
*	toblorone has quit (Ping timeout: 240 seconds)
*	leah2 (~leah@vuxu.org) has joined
*	toblorone (~toblorone@162.246.216.28) has joined
<StrangeLoop>	So generating a newStdIo and dropping it whenever I want a new random number is an acceptable practice? Seeing your code I realize I was subconsciously avoiding it
*	free_beard (~mircea@unaffiliated/free-beard/x-6152516) has joined
<StrangeLoop>	Because that's definitely the easiest solution
*	tremon has quit (Quit: getting boxed in)
*	codrinb (~codrinb@94.177.40.42) has joined
<jle`>	hm, i think the point is to chain together your (g -> (a, g)'s
<barrucadu>	Unless I were already in an IO context, I'd tend to use the pure shuffle function
<jle`>	so that you only need to newStdIO once
<jle`>	like you do already
*	inkbottle (~inkbottle@AAubervilliers-655-1-85-62.w86-218.abo.wanadoo.fr) has joined
<monochrom>	Do you all mean newStdGen?
<StrangeLoop>	OK
*	cjwelborn (cjwelborn@gateway/shell/firrre/x-shwyipotyfllwfub) has joined
<monochrom>	Also yeah newStdGen is a better habit than getStdGen.
<jle`>	StrangeLoop: note that your whole program is building up to your shuffle function, which is one complicated g -> (a, g), built up from simpler ones
*	ski blinks slowly
<mauke>	% :t randomIO
<yahb>	mauke: randomIO :: Random a => IO a
*	tobloron_ has quit (Ping timeout: 260 seconds)
<monochrom>	Not to say that getStdGen is always wrong, but you need to know what it does and doesn't.
<mauke>	fuck the police
*	eliasr has quit (Quit: Connection closed for inactivity)
*	lkolstad has quit (Ping timeout: 240 seconds)
<StrangeLoop>	getStdGen gets a seed and creates a pseudorandom generator, newStdGen chooses an external seed for me via an IO action, right?
*	tnecniv has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
<monochrom>	No. Did you read that from the doc?
*	cdg has quit (Ping timeout: 240 seconds)
*	haskellwelp has quit (Ping timeout: 260 seconds)
<StrangeLoop>	no, I extrapolated from :t'ing them in GHCi :(
*	hsk has quit (Quit: Page closed)
<ski>	`getStdGen' grabs the current contents of a mutable location, but doesn't change it
*	lkolstad (~ljk@c-24-16-12-195.hsd1.wa.comcast.net) has joined
*	revprez_apollo (~revprez_a@pool-108-20-156-103.bstnma.fios.verizon.net) has joined
<ski>	`newStdGen' also changes it
<monochrom>	With IO and a secret mutable variable behind it, you can't deduce much from types. You learned that from stupid imperative languages.
*	codrinb has quit (Ping timeout: 248 seconds)
<monochrom>	getStdGen doesn't mutate the seed, so every time it gives you the same damn thing again. Until you quit the program and run it anew.
<monochrom>	newStdGen does mutate the seed.
*	takle (~takle@host109-153-109-219.range109-153.btcentralplus.com) has joined
<ski>	`newStdGen' does both a `getStdGen' and a `setStdGen'
*	sqrt2_ is now known as sqrt2
<StrangeLoop>	OK
<monochrom>	If you getStdGen but you promise "I'll setStdGen promptly" that's also OK. But with the convenience of newStdGen why bother.
<ski>	(`newStdGen' uses `split :: RandomGen g => g -> (g,g)' inbetween those two operations)
*	ystael (~ystael@209.6.50.55) has joined
<jle`>	StrangeLoop: i rewrote your original code using state to demonstrate how your logic would be managed using the State abstraction
<jle`>	http://lpaste.net/358354
<mauke>	horizontal split or vertical split?
*	parsnip (~parsnip@unaffiliated/parsnip) has left ("WeeChat 1.9-dev")
<StrangeLoop>	jle`: That was seriously awesome of you
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Mon Sep 11 13:50:38 2017

**** BEGIN LOGGING AT Thu Sep 14 10:13:48 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	sellout- has quit (Ping timeout: 240 seconds)
<monochrom>	But "pointer" is astonishingly tautological. A typical compiler like GHC uses pointers for everything.
*	newhoggy (~newhoggy@37.205.56.245) has joined
<mniip>	Limeth_, no
<erisco>	Limeth_, however, if you go through and figure out the answer, you'll probably find the result is unusable, because it is partial
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
<glguy>	(\_ -> []) :: IO [t] -> [t]
*	eacamero_ (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
*	zapbranig_ (~zapbranig@cpc92882-cmbg20-2-0-cust147.5-4.cable.virginm.net) has joined
<erisco>	well you can be much more interesting than that
*	codrinb has quit (Ping timeout: 252 seconds)
*	charsch has quit (Read error: Connection reset by peer)
<monochrom>	Well, \_ -> [] doesn't count as conversion.
<dolio>	Says who?
<mbrock>	Limeth_: that's a common desire when you start with IO in Haskell, but probably you need to re-think a bit
*	_Mzungu_ (~digitalmk@rrcs-67-78-218-162.se.biz.rr.com) has joined
<glguy>	monochrom: 
<monochrom>	ME
*	quobo (uid178934@gateway/web/irccloud.com/x-lsdrqdmmvsrhxrpt) has joined
*	Gurkenglas has quit (Ping timeout: 240 seconds)
*	telekid (~telekid@136.24.48.241) has joined
<mniip>	:t \xs -> [(!! i) <$> xs | i < [0..]]
*	eacameron has quit (Ping timeout: 240 seconds)
<lambdabot>	error:
<lambdabot>	    • Couldn't match expected type ‘Int’ with actual type ‘Expr’
<lambdabot>	    • In the second argument of ‘(!!)’, namely ‘i’
<mniip>	:t \xs -> [(!! i) <$> xs | i <- [0..]]
<lambdabot>	Functor f => f [b] -> [f b]
*	charsch (~charsch@108.178.247.138) has joined
<nshepperd_>	erisco: "Monad m => m (t1 -> t -> m b) -> t1 -> t -> m b" combines together the effects from outer and inner m. You can make a new outer m with return but it won't have its fair share of effects
<erisco>	yeah I should have said it was IO [a] to [IO a]
<Limeth_>	mbrock: Yes, I am learning haskell with the cis194 course, but didn't get to the chapter addressing IO yet.
*	charsch has quit (Client Quit)
*	sellout- (~Adium@c-67-188-42-8.hsd1.ca.comcast.net) has joined
*	zapbranig has quit (Ping timeout: 240 seconds)
<mbrock>	Limeth_: in a way the very meaning of Haskell being a pure language is that you can't go from `IO a` to `a`
<erisco>	so, the fun thing is that you can take out the list, spine, but only infinite ones!
*	Guest61165 has quit (Ping timeout: 240 seconds)
<monochrom>	OK so none of the exercises require IO[T]->[T], in fact most exercises don't even require IO.
<erisco>	if you were able to do otherwise you would uncover the length, and that would leak information
*	newhoggy has quit (Ping timeout: 240 seconds)
<mniip>	erisco, well,
<erisco>	IO (Stream a) -> Stream (IO a)  can be implemented total
<mniip>	if it has a fixed spine
<mniip>	then it is representable
<mniip>	and hence distributive
<mbrock>	Limeth_: however, you can get access to the value inside the IO value, but only in order to construct a new IO value... it's kind of like safety gloves
*	emilypi (~emilypi@65.246.174.100) has joined
*	mniip (mniip@freenode/staff/mniip) has left ("This page is intentionally left blank")
*	mniip (mniip@freenode/staff/mniip) has joined
<erisco>	mniip, what do you mean? what I am saying is we can choose how many cells we take out of IO, but not dependent on any information within
<mniip>	oops
*	telekid has quit (Quit: WeeChat 1.9)
<Limeth_>	Hmm, okay
<erisco>	so taking infinite cells is one option, taking zero is another (that is glguy's example)
<erisco>	taking 10 is a third option
*	codrinb (~codrinb@94.177.40.42) has joined
*	halogenandtoast (~matthew-m@132.69.30.125.dy.iij4u.or.jp) has joined
<mniip>	erisco, no I mean if you have a datatype whose tree is always fixed
<mniip>	such as type-indexed vectors, or Stream
<mniip>	such data are distributive
*	aloiscochard has quit (Quit: Connection closed for inactivity)
<erisco>	Stream is coinductive … what do you mean by fixed?
<mbrock>	Limeth_: inside of `do` blocks is where you get access to values like that, but the final result value of the `do` block will also be tagged as `IO`
<erisco>	tuples work too
<nshepperd_>	Fixed, not variable
<dolio>	It means pick any N, not just infinity.
<Limeth_>	I guess I'll wait until I get to the chapter about IO
<dolio>	If you assume your list has exactly that size (I.E. you're not actually dealing with lists), then you can do it.
*	caumeslasal (~Thunderbi@mar92-10-82-239-65-141.fbx.proxad.net) has joined
<mbrock>	Limeth_: yeah, it's one of the biggest things to get your head around when learning Haskell
<monochrom>	@type (\m -> liftA3 (\xs ys zs -> xs ++ ys ++ zs) m m m)
<lambdabot>	Applicative f => f [a] -> f [a]
<monochrom>	Oh nevermind.
*	adeohluwa (uid223641@gateway/web/irccloud.com/x-mxkcnbigdslpnbtf) has joined
<mniip>	erisco, if the type is...
<mniip>	logarithmiable
<mniip>	which is apparently just another word for representable
<erisco>	you'll have to explain that one to me
<mniip>	F representable <=> exists X. Fa \iso a^X, natural in a
<mbrock>	Limeth_: but basically because of this "purity", if you have some function that doesn't return some `IO` value, like say `sqrt :: Float -> Float`, then you can know that using this `sqrt` will not cause any I/O or side effects (like, it's definitely not going to try to open a log file or something)
<nshepperd_>	T a = (U -> a) for some U
<erisco>	okay I give up
<mniip>	iow
*	afarmer has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
<nshepperd_>	Streams satisfy this, with U = Natural
<mniip>	X = ln_a Fa
<Limeth_>	mbrock: Ah, that's pretty handy, good to know.
*	halogenandtoast has quit (Ping timeout: 248 seconds)
*	a3Dman has quit (Ping timeout: 248 seconds)
<mbrock>	Limeth_: and Haskell programmers usually try to do as much as possible without using `IO`, because such code is really nice and clean and predictable
*	codrinb has quit (Ping timeout: 252 seconds)
*	oish has quit (Quit: Lost terminal)
*	telekid (~telekid@136.24.48.241) has joined
<crucify_me>	hi is the recursion in the where clause, here in the split function?   https://ptpb.pw/2wG7
<nshepperd_>	erisco: what's so difficult about "fixed size"?
*	telekid has quit (Client Quit)
*	telekid (~telekid@136.24.48.241) has joined
<lightstep>	crucify_me, yes
<nshepperd_>	Lists have a variable size because they can be [] or [a,b] or ...
<lightstep>	crucify_me, why?
<erisco>	because it was said Stream has a fixed size, and I have a difficult time accepting that
<crucify_me>	lightstep, thanks, I'm rather naive
<nshepperd_>	Streams have a fixed size because they always contain infinite elements
<mbrock>	Limeth_: ...which makes it so that Haskell encourages some pretty interesting program designs; one pattern is to have a "pure core" that does all your calculations and decisions, and then a relatively simple I/O layer "around" it, and this has some very nice benefits...
<erisco>	stretching the meaning of "size"…
<crucify_me>	lightstep, why ...
*	Zyxoas (~zyxoas@41.113.79.92) has joined
<Limeth_>	I see
*	toby1851 (~toby@88-110-104-87.dynamic.dsl.as9105.com) has joined
*	ystael has quit (Ping timeout: 264 seconds)
<mbrock>	Limeth_: ...but yeah, it's probably best to hold out until the course gets to I/O. If you google around there's quite a lot of explanations of Haskell I/O that aren't actually all that helpful, so it's unfortunately easy to get confused
<crucify_me>	why is it set up with the tuple like that? I'm not sure I see how that works
*	newhoggy (~newhoggy@37.205.56.245) has joined
<nshepperd_>	Steam is isomorphic to a function from the natural numbers
<lightstep>	on the last line?
*	mthek (~mthek@12.145.98.253) has joined
<nshepperd_>	Fixed sized vectors are isomorphic to functions from finite sets (Z_n)
*	codrinb (~codrinb@94.177.40.42) has joined
*	augur has quit (Remote host closed the connection)
<crucify_me>	lightstep, so does that mean for as long as the tuple is incomplete, it will recurse?
<Zyxoas>	Hello y'all.
*	Deide (~Deide@2.220.50.147) has joined
*	dan_f has quit (Quit: dan_f)
*	Paker (Pantura@36.76.110.147) has joined
<crucify_me>	yeah the last line
<lightstep>	the recursion is triggered by the "otherwise" condition, that is y >= x
<Zyxoas>	Inspired by this GHC proposal: https://github.com/treeowl/ghc-proposals/blob/magic-reflection/proposals/0000-magic-reflection.rst I tried to implement a reflection thingie, but based on TypeApplications and concrete instances.
<nshepperd_>	Vec n a = (Fin n -> a)
<lightstep>	the tuple syntax in the last line is to break down the result of "split", which is a tuple
*	OnkelTem has quit (Ping timeout: 240 seconds)
<erisco>	monochrom, yes that works, thanks
<erisco>	works for some, not-so-interesting monads, and not generally
*	BartAdv has quit (Quit: Connection closed for inactivity)
*	newhoggy has quit (Ping timeout: 248 seconds)
<crucify_me>	so the last y is consed to the greater list, then the tuple has nothing to cons, so it triggers the recursion with (less, greater)  ?  is that how to think of it?
*	xcmw has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<crucify_me>	lightstep, 
*	pja has quit (Quit: pja)
*	pja (~pja@2a02:8010:6098:0:6af:be1f:1474:6f2a) has joined
*	afarmer (~afarmer@199.201.64.139) has joined
*	mthek has quit (Ping timeout: 240 seconds)
<erisco>	so, in conclusion, if you have  f :: A -> B -> m C  then  return f  is reversible
*	pja has quit (Remote host closed the connection)
<lightstep>	no, the stuff under "where" runs first
*	codrinb has quit (Ping timeout: 260 seconds)
<erisco>	but if you have  mf :: m (A -> B -> m C)  a conversion to  A -> B -> m C  is not
<lightstep>	if y >= x, it calls "split x ys", and separates the result into (less, greater), then combining it to (less, y:greater)
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	hackagebot has quit (Read error: error:1408F119:SSL routines:SSL3_GET_RECORD:decryption failed or bad record mac)
*	hackagebot (~hackagebo@2a00:dcc0:eda:88:245:71:269a:892d) has joined
*	xcmw (~textual@host-129-137-24-3.vpn.uc.edu) has joined
*	cpennington (~cpenningt@pool-108-7-186-67.bstnma.fios.verizon.net) has joined
*	codesoup (~codesoup@2607:fea8:e2e0:240:5df0:2f95:5e96:59a4) has joined
*	iAmerikan has quit (Ping timeout: 248 seconds)
*	codrinb (~codrinb@94.177.40.42) has joined
<crucify_me>	right, lightstep thank you. one thing..
*	a3Dman has quit (Ping timeout: 240 seconds)
<crucify_me>	(less, greater) on the last line, does that express a state (ie, incomplete tuple of 2 lists) ?
<lightstep>	yes, exactly
<Zyxoas>	As I was saying, I tried doing my own variation of reflection: http://lpaste.net/358450
*	a3Dman (~3Dman@156.222.91.177) has joined
*	a3Dman has quit (Changing host)
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	xcmw has quit (Client Quit)
<Zyxoas>	But I seem to have screwed it up. Can someone please help me understand why I can't seem to fit all the pieces together? :-)
*	Vq (~vq@90-227-195-41-no77.tbcn.telia.com) has joined
<crucify_me>	excellent.. my coffee worked ! thanks kindly lightstep 
<lightstep>	np :)
*	xcmw (~textual@216.48.140.139) has joined
*	johnk (~john@78-67-125-96-no247.tbcn.telia.com) has joined
*	replay (~replay@pdpc/supporter/student/replay) has joined
<erisco>	crucify_me, I got 5 hours of sleep last night… will coffee fix that?
*	wrengr (~wrengr@104.132.1.65) has joined
*	zariuq has quit (Ping timeout: 248 seconds)
*	wrengr has quit (Client Quit)
*	pfurla (~textual@38.86.167.91) has joined
*	xcmw has quit (Client Quit)
*	wrengr (~wrengr@104.132.1.65) has joined
*	danthemyth has quit (Remote host closed the connection)
*	ritre (~ritre@bband-dyn92.178-40-248.t-com.sk) has joined
*	davr0s has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
*	danthemyth (~danthemyt@50-246-66-201-static.hfc.comcastbusiness.net) has joined
*	xcmw (~textual@216.48.140.139) has joined
*	pja (~pja@2a02:8010:6098:0:55c0:ec2a:80f2:33d9) has joined
*	nickoh has quit (Remote host closed the connection)
*	pyon (~pyon@unaffiliated/pyon) has joined
*	cpennington has quit (Remote host closed the connection)
*	Cogitabundus (~NOBODY@122.15.77.139) has joined
*	a3Dman has quit (Ping timeout: 240 seconds)
*	ystael (~ystael@50-199-243-61-static.hfc.comcastbusiness.net) has joined
*	ianandrich (~ianandric@c-73-223-61-224.hsd1.ca.comcast.net) has joined
*	hc (~ircd@unaffiliated/hc) has joined
<Zyxoas>	Ambiguous type variables? I'm in way over my head...
*	newhoggy (~newhoggy@37.205.56.245) has joined
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
*	xcmw has quit (Client Quit)
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	FreeBirdLjj has quit (Remote host closed the connection)
*	hc_ has quit (Ping timeout: 246 seconds)
<Limeth_>	How can I create anonymous functions (lambdas)? Doing `filter (== 2) [1, 2]` works, but something like `filter (x = x == 2) [1, 2]` doesn't.
<lightstep>	Limeth_, it's (\x -> x == 2)
*	icedev (~icedev@0x62.de) has left
<glguy>	Zyxoas: You're missing a bunch of extensions at the top of your file
<glguy>	Zyxoas: If that's because you're using other-extensions in a .cabal file, this is a good example of why you shouldn't be doing that
<Zyxoas>	Yep. I am. Sorry. glguy
*	amarp (~amarpotgh@p57967FE9.dip0.t-ipconnect.de) has joined
<Zyxoas>	Might they be pertinent?
<Limeth_>	lightstep: Ah, thanks
*	newhoggy has quit (Ping timeout: 248 seconds)
<Zyxoas>	let me edit the lpaste quickly...
<glguy>	Zyxoas: What you pasted doesn't load in GHC, so yeah it matters
*	hc_ (~ircd@unaffiliated/hc) has joined
*	hc has quit (Ping timeout: 240 seconds)
*	chlong (chlong|gon@nat/redhat/x-oajszzcubfgjxert) has joined
*	Gurkenglas (~Gurkengla@dslb-094-223-136-111.094.223.pools.vodafone-ip.de) has joined
*	ccomb has quit (Ping timeout: 240 seconds)
<glguy>	Zyxoas: Also your instances don't make sense. 'Widget and 'Doodah don't have kinds Type, so you can't make those instances
*	oish (~charlie@159.22.169.217.in-addr.arpa) has joined
*	amarp has quit (Ping timeout: 240 seconds)
*	mohsen_ (~Mohsen@2.182.173.122) has joined
<dsal>	Is there a more convenient way to write / builtin variant of this:
<dsal>	succ' :: (Bounded a, Enum a, Eq a) => a -> a
<dsal>	succ' x
<dsal>	  | x == maxBound = minBound
<dsal>	  | otherwise = succ x
*	lbown (~logan@131.194.164.131) has joined
<Zyxoas>	glguy those must be typos from trying my luck with writing code sans a compiler!
*	amarp (~amarpotgh@p57967FE9.dip0.t-ipconnect.de) has joined
*	refold has quit (Ping timeout: 240 seconds)
*	jdt has quit (Ping timeout: 260 seconds)
*	ccomb (~ccomb@151.135.212.67) has joined
*	schwuk has quit ()
*	jdt (~jdt@208.85.233.130) has joined
*	lightstep has quit (Ping timeout: 240 seconds)
*	jadrian_ (~jadrian@2001:8a0:f039:a101:eab0:47e4:8e5d:b8c6) has joined
*	kotangent has quit (Quit: WeeChat 1.4)
*	hc (~ircd@unaffiliated/hc) has joined
*	OnkelTem has quit (Ping timeout: 240 seconds)
*	cyphase has quit (Ping timeout: 240 seconds)
<barrucadu>	dsal: You can drop the Eq constraint by using fromEnum, but it's still not great
<dsal>	Without eq, it can't match the minbound/maxbound
<Zyxoas>	Apologies once again, glguy. The code has been cleaned up now, and only the real problem remains: http://lpaste.net/358450
<barrucadu>	succ' :: forall a. (Bounded a, Enuma) => a -> a; succ' x = if fromEnum x == fromEnum (maxBound :: a) then minBound else succ a
*	hc_ has quit (Ping timeout: 252 seconds)
<dsal>	Oh, I see.
<barrucadu>	This avoids the forall: succ' x = if ((==) `on` fromEnum) x maxBound then minBound else succ a
<barrucadu>	Whoops, "succ x"
*	Cogitabundus has quit (Quit: Leaving)
<Zyxoas>	In the real code I'm trying to fix, the Doodah on line 39 is actually a variable that iterates over a list of data constructors. I wanna see if I can somehow reflect only a single one -- tell GHC to ignore all other instances of Reifies x Thing except for the one I give it...
*	Snircle has quit (Quit: Textual IRC Client: www.textualapp.com)
*	hc_ (~ircd@unaffiliated/hc) has joined
*	lightstep (~amir@141.226.217.226) has joined
*	pyon has quit (Ping timeout: 240 seconds)
*	mohsen_ has quit (Ping timeout: 252 seconds)
*	hc has quit (Ping timeout: 240 seconds)
*	codrinb has quit (Ping timeout: 240 seconds)
*	mmn80 (uid194575@gateway/web/irccloud.com/x-nooynmvvyywfpydn) has joined
*	_Mzungu_ has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	alx741 (~alx741@190.152.170.76) has joined
*	mthek (~mthek@12.145.98.253) has joined
*	alx741 has quit (Client Quit)
*	alx741 (~alx741@190.152.170.76) has joined
*	hc_ has quit (Ping timeout: 248 seconds)
*	replay has quit (Ping timeout: 248 seconds)
*	albertus1 (~seb@ip-109-84-3-150.web.vodafone.de) has joined
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
*	hc (~ircd@unaffiliated/hc) has joined
*	ziocroc2 has quit (Ping timeout: 248 seconds)
*	codrinb (~codrinb@94.177.40.42) has joined
*	caumeslasal has quit (Quit: caumeslasal)
*	jathan has quit (Ping timeout: 260 seconds)
*	mohsen_ (~Mohsen@2.182.173.122) has joined
*	ccomb has quit (Ping timeout: 240 seconds)
*	cyphase (~cyphase@unaffiliated/cyphase) has joined
<dsal>	OK, I can't figure out how forall works.
*	pfoetchen has quit (Ping timeout: 255 seconds)
<dsal>	I was trying this:
<dsal>	> succ' :: forall a. (Bounded a, Enum a) => a -> a; succ' x = toEnum $ (succ $ fromEnum x) `mod` fromEnum (maxBound :: a)
<lambdabot>	 <hint>:1:49: error: parse error on input ‘;’
*	pfoetchen (~pfoetchen@beiboot1.petschge.de) has joined
<monochrom>	You used "mod" there.
<barrucadu>	forall requires ScopedTypeVariables.  I'd probably just use the '(==) `on` fromEnum' one though
*	Snircle (~textual@2600:8801:c404:7900:8050:940f:7ebf:330c) has joined
*	hc_ (~ircd@unaffiliated/hc) has joined
<barrucadu>	In fact I think I have used that one, when I wanted to solve this exact problem and found there was no standard function :(
*	hc has quit (Ping timeout: 240 seconds)
*	louispan (~textual@14-203-219-236.static.tpgi.com.au) has joined
<dsal>	I was using mod so I could run off the edge and then wrap around easily.  It *almost* works, except I don't know the type name..
*	codrinb has quit (Ping timeout: 240 seconds)
<monochrom>	@type mod
<lambdabot>	Integral a => a -> a -> a
<dsal>	Yeah, I've fromEnum'd my enum.
*	cdg (~cdg@157.166.173.4) has joined
<dsal>	Though it's acting... not like what I want.
<dsal>	I clearly don't understand forall.
<monochrom>	@type \x -> toEnum $ (succ $ fromEnum x) `mod` fromEnum (maxBound `asTypeOf` x)
<lambdabot>	(Bounded a1, Enum a1, Enum a) => a1 -> a
*	replay (~replay@pdpc/supporter/student/replay) has joined
<monochrom>	Oh I see.
*	reactormonk has quit (Ping timeout: 246 seconds)
<monochrom>	@type \x -> toEnum (succ $ fromEnum x) `mod` fromEnum (maxBound `asTypeOf` x)
<dsal>	I'm missing it -- it seems to be getting the wrong maxBound
<lambdabot>	(Bounded a, Enum a) => a -> Int
*	codrinb (~codrinb@94.177.40.42) has joined
*	cdg_ has quit (Ping timeout: 255 seconds)
<lyxia>	Zyxoas: http://lpaste.net/358450#a358456 your reify was too ambiguous
*	cyphase has quit (Ping timeout: 240 seconds)
<monochrom>	> let {s :: forall a. (Bounded a, Enum a) => a -> a; s x = toEnum $ (succ $ fromEnum x) `mod` fromEnum (maxBound :: a)} in s True
<lambdabot>	 False
<monochrom>	Works for me.
*	jellowj has quit (Ping timeout: 260 seconds)
<dsal>	Yes, it seems to return like, 1 for maxBound
<dsal>	My type has four values, and it goes   v1, v2, v1 ...
*	cyphase (~cyphase@unaffiliated/cyphase) has joined
*	codrinb has quit (Ping timeout: 240 seconds)
<monochrom>	I have a meta-comment on methods of learning and testing.
<monochrom>	Do you use solely this example to determine whether or not you understand forall.
<dsal>	No.  I'm trying to make a succ' that wraps.
*	simendsjo has quit (Remote host closed the connection)
<monochrom>	Or do you have a million examples and you can get forall to work in all other examples except this one.
<dsal>	My initial implementation worked, but required Bounded, Enum, and Eq
<dsal>	I have one example and it doesn't work.
<monochrom>	Because if the former, that's a confirmation bias.
<dsal>	data Bearing = North | East | South | West deriving (Bounded, Ord, Enum, Eq, Show)
<monochrom>	And if the latter, it seems it's pretty clear what's the real culprit.
*	simendsjo (~user@125.37-191-135.fiber.lynet.no) has joined
<dsal>	λ> map succ' [minBound..maxBound] :: [Bearing]
<dsal>	[East,South,North,East]
*	hc (~ircd@unaffiliated/hc) has joined
<Zyxoas>	Thanks so much, lyxia! :-D
<monochrom>	> let {s :: forall a. (Bounded a, Enum a) => a -> a; s x = toEnum $ (succ $ fromEnum x) `mod` fromEnum (maxBound :: a)} in s South
<lambdabot>	 error: Data constructor not in scope: South
<erisco>	that's what happens when you're standing on the West pole
<dminuoso>	How do you folks type things like λ usually? Do you have custom input method? Do you just google for them and copy/paste?
<dminuoso>	I have a feeling nobody is going to remember their unicode codepoints
<Zyxoas>	Damn. I was hoping I could avoid proxies, though. Otherwise I would have no need for TypeApplication...
<monochrom>	OK I'm going to add Bearing to lambdabot
*	newhoggy (~newhoggy@37.205.56.245) has joined
<monochrom>	@let data Bearing = North | East | South | West deriving (Bounded, Ord, Enum, Eq, Show)
<lambdabot>	 Defined.
<monochrom>	> let {s :: forall a. (Bounded a, Enum a) => a -> a; s x = toEnum $ (succ $ fromEnum x) `mod` fromEnum (maxBound :: a)} in s South
<lambdabot>	 North
*	codrinb (~codrinb@94.177.40.42) has joined
*	peacememories has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<monochrom>	> maxBound :: Bearing
*	mkali has quit (Quit: mkali)
<lambdabot>	 West
<erisco>	dminuoso, I type <ctrl> <*> <l> and I can do this thanks to WinCompose, which is based on XCompose
<monochrom>	> fromEnum (maxBound :: Bearing)
<lambdabot>	 3
*	cyborg-one (~cyborg-on@212-178-2-183.broadband.tenet.odessa.ua) has joined
*	Gurkenglas has quit (Ping timeout: 240 seconds)
<Zyxoas>	In particular, the Given class in Kmett's reflection library does not use proxies...
<monochrom>	> fromEnum (minBound :: Bearing)
<lambdabot>	 0
<monochrom>	> length [minBound .. maxBound :: Bearing]
*	implementation_ is now known as enum_
<lambdabot>	 4
*	twanvl (~twanvl@92.110.121.28) has joined
*	jathan (~jathan@fixed-187-190-159-133.totalplay.net) has joined
<erisco>	> map succ [minBound..maxBound] :: [Bearing]
<lambdabot>	 [East,South,West,*Exception: succ{Bearing}: tried to take `succ' of last tag...
*	mohsen_ has quit (Read error: No route to host)
<monochrom>	I think this is enough clues.
<erisco>	no modulo cardinals? oh well
*	mohsen_ (~Mohsen@2.182.173.122) has joined
<monochrom>	Ah I should have also checked "s False".
*	hc_ has quit (Ping timeout: 264 seconds)
*	_Mzungu_ (~digitalmk@rrcs-67-78-218-162.se.biz.rr.com) has joined
*	Neron (~Jeron@ip-88-220-45-224.kampinostelco.pl) has joined
*	peacememories (~textual@84-114-121-230.cable.dynamic.surfer.at) has joined
<monochrom>	P.S. You will run into a similar problem in Python.
*	cdg_ (~cdg@157.166.173.4) has joined
*	eklavya has quit (Remote host closed the connection)
*	hc_ (~ircd@unaffiliated/hc) has joined
*	codrinb has quit (Ping timeout: 260 seconds)
*	Costar (~Costar@2804:14d:7e85:305:e41d:5cff:5eff:6f9c) has joined
*	cdg__ (~cdg@157.166.173.4) has joined
*	simendsjo has quit (Remote host closed the connection)
*	peacememories has quit (Client Quit)
*	cdg has quit (Ping timeout: 248 seconds)
*	hannofcart (6a336d5c@gateway/web/freenode/ip.106.51.109.92) has joined
*	peacememories (~textual@84-114-121-230.cable.dynamic.surfer.at) has joined
*	hc has quit (Ping timeout: 248 seconds)
*	cdg_ has quit (Ping timeout: 246 seconds)
*	hc_ has quit (Ping timeout: 246 seconds)
*	codrinb (~codrinb@94.177.40.42) has joined
<jle`>	Zyxoas: given can avoid proxies because there is only one value associated with every type
*	cdg__ has quit (Ping timeout: 248 seconds)
*	hc (~ircd@unaffiliated/hc) has joined
<jle`>	Zyxoas: but with Reifies, there is potentially more than one thing you can reflect from a given type
<jle`>	er acutally,, sorry, everything i just wrote as wrong
<jle`>	ignore me :)
*	HoloIRCUser1 (~holoirc@197.156.95.205) has joined
*	eklavya (~eklavya@2405:205:1285:9022:916f:cc9e:3df5:8039) has joined
<dsal>	dminuoso: M-x insert-char RET lambda   or C-/ and then it's just \lambda
*	eminhi has quit (Quit: leaving)
*	acowley_away is now known as acowley
*	codrinb has quit (Ping timeout: 252 seconds)
*	shwouchk (uid154201@gateway/web/irccloud.com/x-nrmccrhdcuaumhax) has joined
*	hc has quit (Ping timeout: 248 seconds)
*	FreeBirdLjj (~freebirdl@180.159.175.114) has joined
*	hc (~ircd@unaffiliated/hc) has joined
*	eklavya has quit (Remote host closed the connection)
*	tromp (~tromp@ip-217-103-3-94.ip.prioritytelecom.net) has joined
*	peacememories has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	peacememories (~textual@84-114-121-230.cable.dynamic.surfer.at) has joined
<lyxia>	Zyxoas: reify :: a -> (forall s. Reifies s a => r) -> r   would be the true type, but AFAICT there is no way to call that function due to how type checking works.
*	biglama (~Day_dream@ip-188.net-82-216-175.joinville2.rev.numericable.fr) has joined
*	Zyxoas has quit (Ping timeout: 248 seconds)
*	Gurkenglas (~Gurkengla@dslb-094-223-136-111.094.223.pools.vodafone-ip.de) has joined
*	petrus (~petrus@unaffiliated/petrus) has joined
*	Yuras has quit (Ping timeout: 260 seconds)
*	codrinb (~codrinb@94.177.40.42) has joined
*	hc has quit (Ping timeout: 252 seconds)
*	conal has quit (Quit: Computer has gone to sleep.)
*	tromp has quit (Ping timeout: 246 seconds)
*	HarveyPwca (~HarveyPwc@ip-64-134-197-81.public.wayport.net) has joined
*	hc (~ircd@unaffiliated/hc) has joined
*	sellout- has quit (Quit: Leaving.)
*	FreeBirdLjj has quit (Remote host closed the connection)
*	sellout- (~Adium@c-67-188-42-8.hsd1.ca.comcast.net) has joined
*	sellout- has quit (Client Quit)
*	sellout- (~Adium@c-67-188-42-8.hsd1.ca.comcast.net) has joined
*	jellowj (~yellow-ja@ewx205.neoplus.adsl.tpnet.pl) has joined
*	sellout- has quit (Client Quit)
*	sellout- (~Adium@c-67-188-42-8.hsd1.ca.comcast.net) has joined
*	handyc (~handyc@c-76-25-33-43.hsd1.co.comcast.net) has joined
*	sellout- has quit (Client Quit)
*	codrinb has quit (Ping timeout: 240 seconds)
*	sellout- (~Adium@c-67-188-42-8.hsd1.ca.comcast.net) has joined
*	Zyxoas (~zyxoas@41.113.79.92) has joined
*	sellout- has quit (Client Quit)
*	Zyxoas has quit (Read error: Connection reset by peer)
*	crownose (~weechat@2a02:8010:6173:0:2ab2:bdff:fe2b:c456) has joined
*	HoloIRCUser1 is now known as birbirtu
*	sellout- (~Adium@c-67-188-42-8.hsd1.ca.comcast.net) has joined
*	Swizec_ has quit (Quit: Computer has gone to sleep.)
<dsal>	monochrom: so, off by one error?  This implementation isn't much more satisfying, though. :(
*	hc_ (~ircd@unaffiliated/hc) has joined
*	lonokhov (~lonokhov@93.185.17.141) has joined
<monochrom>	I don't know what counts as satisfying.
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Thu Sep 14 12:01:11 2017

**** BEGIN LOGGING AT Fri Sep 15 10:34:28 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	nakal_ has quit (Ping timeout: 260 seconds)
*	connrs (~connrs@conners.plus.com) has joined
*	codrinb (~codrinb@94.177.40.42) has joined
*	tsaka__ (~torstein@84-52-234.108.3p.ntebredband.no) has joined
*	begriffs has quit (Quit: Leaving...)
<Welkin>	__monty__: it's not declared in your .cabal file
<Welkin>	the package name*
*	codrinb has quit (Ping timeout: 240 seconds)
*	LysergicDreams has quit (Ping timeout: 248 seconds)
<__monty__>	Welkin: Containers is declared in my .cabal
<glguy>	__monty__: If you have a question about a specific error message it'll be easier if you paste the error message and then any imports or file contents that seem relevant
<glguy>	than to ask generically about errors
<tomasino>	I'm struggling with the difference of when to use (.) vs ($). I understand that $ has lower order precidence than pretty much everything. Is that the only difference? Is there something I'm missing?
*	codrinb (~codrinb@94.177.40.42) has joined
*	im0nde has quit (Ping timeout: 255 seconds)
<lyxia>	tomasino: ($) applies a function to its argument. (.) composes two functions to make a new function.
<Welkin>	tomasino: they are not actually alternatives; they are completely different
<Welkin>	`$` is oftne used to reduce parentheses
<tomasino>	I guess I was reading it like the (.) was applying a function to the result of another one
<tomasino>	but composition is more than that
<__monty__>	Error: http://ix.io/zXq Cabalfile: http://ix.io/zXm Head of .hs: http://ix.io/zXp
<Welkin>	(.) f g x = f (g x)
<Welkin>	= f $ g x
*	codrinb has quit (Ping timeout: 240 seconds)
*	abrcdbr has quit (Max SendQ exceeded)
<tomasino>	I must be missing something then because it still seems like with that logic: f . g x  would be the same as f $ g x
*	raynold (uid201163@gateway/web/irccloud.com/x-guyydegyjcjbedzp) has joined
<Welkin>	(f . g) x = f .g $ x
<Welkin>	(f . g) x = f . g $ x
<__monty__>	f . g x = f . (g x)
<Welkin>	actually, above, when I wrote `f $ g x`, that is wrong and will be a type error
<tomasino>	oooh, okay
*	Limeth_ has quit (Ping timeout: 252 seconds)
*	reactormonk has quit (Ping timeout: 246 seconds)
*	wvansteen has quit (Ping timeout: 240 seconds)
<glguy>	(f $ g x) === f (g x)     --while--   (f . g x) === (\y -> f ((g x) y))
<tomasino>	glguy: I think that finally gets in into the grey matter. Thank you
*	ziocroc2 has quit (Ping timeout: 248 seconds)
<tomasino>	I'm going to go ahead and read that 10,000 times more
<bjs>	tomasino: it's easier to put brackets around to understand
<byorgey>	Welkin: eh?  f $ g x  is not wrong
**** ENDING LOGGING AT Fri Sep 15 10:53:54 2017

**** BEGIN LOGGING AT Fri Sep 15 10:53:54 2017

<bjs>	Things like (f . g x) are visually ambiguous
<tabaqui>	err
<tabaqui>	(.) f g x /= f (g x)
*	codrinb (~codrinb@94.177.40.42) has joined
<Psybur>	> (f . g x)
<tabaqui>	right: (.) f g x = (f . g) x
<lambdabot>	 error:
<lambdabot>	     • Could not deduce (Show b0) arising from a use of ‘f’
<lambdabot>	       from the context: (FromExpr c, Show a)
*	machinedgod (~machinedg@198-84-249-5.cpe.teksavvy.com) has joined
<Psybur>	> f x
<lambdabot>	 error:
<lambdabot>	     • Ambiguous type variable ‘a0’ arising from a use of ‘show_M172069796709...
<lambdabot>	       prevents the constraint ‘(Show a0)’ from being solved.
<Psybur>	Hmm I thought we could show functions, must have missed something
<ski>	> f x :: Expr
<lambdabot>	 f x
<Psybur>	ah
<Psybur>	> (f . g x) :: Expr
<lambdabot>	 error:
<lambdabot>	     • Couldn't match expected type ‘Expr’ with actual type ‘() -> c0’
<lambdabot>	     • Probable cause: ‘(.)’ is applied to too few arguments
<ski>	> (f . g x) :: Expr -> Expr
<lambdabot>	 error:
<lambdabot>	     • Ambiguous type variable ‘b0’ arising from a use of ‘f’
<lambdabot>	       prevents the constraint ‘(Show b0)’ from being solved.
<ski>	> not  -- showing functions
<lambdabot>	 <Bool -> Bool>
*	dddddd has quit (Remote host closed the connection)
<tabaqui>	usually that is said to me, but
<tabaqui>	you can /query lambdabot
<tomasino>	one last question on the subject. I'm saying "f before g" based on the category theory videos I've been watching when referring to (f . g). How do you "say" (f $ g)?
*	sssilver (~sssilver@38.122.48.218) has joined
<ski>	"apply `f' to `g'" ?
<tomasino>	thanks
<cocreature>	“f applied to g”
<tabaqui>	f deistvuet na g, I would say
*	codrinb has quit (Ping timeout: 240 seconds)
*	djce has quit ()
<tabaqui>	we have discussed earlier about "monoid over addition" and "monoid under addition"
*	im0nde (~im0nde@2001-4dd1-6877-0-c8bc-1fca-c5de-f2d2.ipv6dyn.netcologne.de) has joined
*	mjevans- (~mjevans-@89.238.178.75) has joined
<bjs>	tomasino: f applied to g?
*	tomus_ is now known as tomus
*	eschnett (~eschnett@38.104.158.162) has joined
<bjs>	tomasino: it's funny because I've always heard "f after g" for that notation
*	tromp has quit (Remote host closed the connection)
<tomasino>	bjs: i don't really know for sure. "Before" was what Bartosz Milewski used in the videos about Category Theory. Maybe it's different in Haskell world, maybe not?
*	jeltsch (~wolfgang@82.131.87.29.cable.starman.ee) has joined
*	cyborg-one has quit (Ping timeout: 260 seconds)
*	sssilver has quit (Ping timeout: 248 seconds)
<tomasino>	bjs: regarding (.) i mean
*	saurabhnanda (~saurabhna@42.106.19.25) has joined
<dmwit>	> (f :: Expr -> Expr) . g (x :: Expr)
<lambdabot>	 <() -> Expr>
<dmwit>	> ((f :: Expr -> Expr) . (g :: Expr -> Expr)) x
<lambdabot>	 f (g x)
*	mercato (~mercato@c-50-135-215-23.hsd1.wa.comcast.net) has joined
*	replay (~replay@pdpc/supporter/student/replay) has joined
*	__monty__ (~toonn@unaffiliated/toonn) has left
*	codrinb (~codrinb@94.177.40.42) has joined
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Fri Sep 15 11:04:13 2017

**** BEGIN LOGGING AT Fri Sep 15 11:05:50 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	mou has quit (Quit: WeeChat 1.4)
*	tabaqui has quit (Quit: WeeChat 1.9)
*	codrinb has quit (Ping timeout: 248 seconds)
*	jellowj (~yellow-ja@dat187.neoplus.adsl.tpnet.pl) has joined
*	tabaqui (~Tabaqui@31.44.93.25) has joined
*	sssilver has quit (Ping timeout: 248 seconds)
*	mthek (~mthek@47.59.105.208) has joined
*	tabaqui has quit (Client Quit)
*	_Mzungu_ (~digitalmk@rrcs-67-78-218-162.se.biz.rr.com) has joined
*	tabaqui (~Tabaqui@31.44.93.25) has joined
*	jeltsch (~wolfgang@82.131.87.29.cable.starman.ee) has left
*	govg has quit (Ping timeout: 240 seconds)
*	kuribas (~user@ptr-25vy0i9sxw6dqwiqm8c.18120a2.ip6.access.telenet.be) has joined
*	tabaqui has quit (Client Quit)
*	danthemyth has quit (Remote host closed the connection)
*	cschneid has quit (Remote host closed the connection)
*	shangxiao has quit (Ping timeout: 248 seconds)
*	cschneid (~cschneid@2603:300b:901:300:318a:1d2e:cc0b:5563) has joined
*	revtintin has quit (Ping timeout: 248 seconds)
*	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has joined
<infandum>	cocreature: In case you were wondering, that was the issue, the getDirectory wildcard stuff in shake.
<infandum>	 
<infandum>	It works now.
*	codrinb (~codrinb@94.177.40.42) has joined
*	telekid (~telekid@136.24.48.241) has joined
*	Jesin has quit (Quit: Leaving)
*	eminhi (~eminhi@157.48.14.26) has joined
*	sssilver_ (~sssilver@38.122.48.218) has joined
*	cschneid has quit (Ping timeout: 246 seconds)
*	tabaqui (~Tabaqui@31.44.93.25) has joined
*	jellowj has quit (Ping timeout: 248 seconds)
*	codrinb has quit (Ping timeout: 240 seconds)
*	Limeth_ (~Limeth@94.142.238.158) has joined
*	xcmw (~textual@host-129-137-24-3.vpn.uc.edu) has joined
*	mizu_no_oto_work has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	jellowj (~yellow-ja@dat187.neoplus.adsl.tpnet.pl) has joined
*	mizu_no_oto_work (~textual@c-24-60-15-130.hsd1.ma.comcast.net) has joined
<cocreature>	infandum: nice!
*	jmelesky has quit (Read error: Connection reset by peer)
*	codrinb (~codrinb@94.177.40.42) has joined
*	telekid has quit (Quit: WeeChat 1.9)
*	nickoh (~nhamilton@93-138-224-52.adsl.net.t-com.hr) has joined
*	xcmw has quit (Ping timeout: 240 seconds)
<saurabhnanda>	intero: 7 GB+ ... why is this taking up so much memory?!
*	jmelesky (~jmelesky@162.213.77.59) has joined
<d6e_>	saurabhnanda: what is?
<saurabhnanda>	d6e_: intero
<jared-w>	saurabhnanda: it depends on a lot of things. How many modules do you have in your project, how many files do you have open, etc
<saurabhnanda>	jared-w: 1,000+ modules and files. Mostly small.
<jared-w>	The general LOC amount for the project can also affect that. The more you load into GHCi the more memory intero sucks up
<saurabhnanda>	But 7 gigs! and it keeps growing with time. In the afternoon it was 5 gigs. Is there a space leak in intero?
*	teggi has quit (Quit: Leaving...)
<jared-w>	saurabhnanda: In that case you're trying to load up 1,000+ modules and files into Intero simultaneously so it'll take quite a bit of ram in general :p
*	HarveyPwca has quit (Ping timeout: 240 seconds)
<jared-w>	saurabhnanda: I'm not sure if it's a space leak or just a consequence of tracking changes and re-running checkers. Most of intero is really just GHCi wrapped around stack compatibility
*	machinedgod has quit (Quit: leaving)
*	zcourts has quit ()
<saurabhnanda>	but why?! we have a similar sized project in Rails (in fact, accessing the same underlying DB schame), and irb (or rails console) doesn't take up anywhere close to this much RAM!
*	machinedgod (~machinedg@198-84-249-5.cpe.teksavvy.com) has joined
<glguy>	Oh, maybe open the project in irb then
*	alex`` has quit (Ping timeout: 248 seconds)
<saurabhnanda>	what is going on internally for it to continuously keep increasing the RAM usage. Two problems: (a) too much RAM, and (b) RAM usage keeps growigng!
*	nickoh has quit (Ping timeout: 240 seconds)
*	ianandrich (~ianandric@c-73-223-61-224.hsd1.ca.comcast.net) has joined
*	tsaka__ has quit (Ping timeout: 240 seconds)
*	twanvl (~twanvl@92.110.121.28) has joined
*	mson has quit (Quit: Connection closed for inactivity)
*	kuribas has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
*	tromp (~tromp@ip-217-103-3-94.ip.prioritytelecom.net) has joined
<mnoonan>	i wonder if some intero action ends up binding a unqiue name in ghci or something.. then the gc would never let go of it
<mnoonan>	can you get a heap profile on intero?
<saurabhnanda>	mnoonan: how do I do that?
*	kaftoot (~textual@104.193.14.42) has joined
*	mkali has quit (Quit: mkali)
<mnoonan>	¯\_(ツ)_/¯
*	Achylles (~Achylles@191.193.215.70) has joined
<mnoonan>	maybe like this.. i've never tried: https://stackoverflow.com/questions/44698036/using-rts-profiling-within-interos-ghci
*	Durbley (~Durbley@c-73-148-179-151.hsd1.fl.comcast.net) has joined
*	whoisxy (~whoisxy@83.137.254.176) has joined
<mnoonan>	actually, that probably isn't profiling intero itself
*	HarveyPwca (~HarveyPwc@ip-64-134-197-81.public.wayport.net) has joined
<saurabhnanda>	has anyone tried keeping a GhCi open and constantly loading/reloading stuff in it?
<saurabhnanda>	does the memory usage of GHCi also keep growing?
*	des_ has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
*	tromp has quit (Ping timeout: 240 seconds)
<mnoonan>	actually, did you see this issue report? https://github.com/commercialhaskell/intero/issues/84
*	pfurla has quit (Ping timeout: 240 seconds)
<mnoonan>	and a possibly-related ghci report: https://ghc.haskell.org/trac/ghc/ticket/12848
*	chakri (40801608@gateway/web/freenode/ip.64.128.22.8) has joined
<chakri>	HELP
<saurabhnanda>	checking
<chakri>	are there any good exercises to understand types and typeclasses?
*	grizwako (~grizwako_@93-143-147-108.adsl.net.t-com.hr) has joined
*	vuto has quit (Ping timeout: 240 seconds)
*	zoey (~zoey@2601:448:8400:2a30:4de0:f61:ea4c:a30) has joined
<monochrom>	Most textbooks have some.
<saurabhnanda>	mnoonan: thasnks for the links. Exactly what I'm facing!
*	mthek has quit (Ping timeout: 246 seconds)
*	banc has quit (Ping timeout: 240 seconds)
<mnoonan>	saurabhnanda: at least you aren't alone :)  good luck!
*	nakal has quit (Disconnected by services)
*	nakal_ (~nakal@port-92-201-103-243.dynamic.qsc.de) has joined
*	tsaka__ (~torstein@84-52-234.108.3p.ntebredband.no) has joined
*	aarvar (~foewfoiew@50.34.105.170) has joined
<saurabhnanda>	restarted intero and it came down to 800MB (from 7 GB)
*	acarrico (~acarrico@pppoe-68-142-58-22.gmavt.net) has joined
*	kaftoot has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
<jared-w>	Sounds like a weird sort of leak then...
*	Guest26 (~textual@104.193.14.42) has joined
*	banc (~master@217.151.98.168) has joined
*	tromp (~tromp@ip-217-103-3-94.ip.prioritytelecom.net) has joined
*	zero_byte (~zer0@ip-89-103-110-138.net.upcbroadband.cz) has joined
*	_Mzungu_ has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	dhil has quit (Ping timeout: 240 seconds)
*	alx741 (~alx741@190.152.170.201) has joined
*	mizu_no_oto_work has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	codrinb has quit (Ping timeout: 240 seconds)
*	alx741 has quit (Client Quit)
*	cschnei__ (~cschneid@2603:300b:901:300:3408:3d26:b808:da6a) has joined
*	alx741 (~alx741@190.152.170.201) has joined
*	obihann has quit (Quit: Lost terminal)
*	robotroll (~robotroll@unaffiliated/robotroll) has joined
*	ziocroc2 (~ziocroc@151.74.6.150) has joined
*	_Mzungu_ (~digitalmk@rrcs-67-78-218-162.se.biz.rr.com) has joined
*	taktoa has quit (Remote host closed the connection)
*	codrinb (~codrinb@94.177.40.42) has joined
*	pikhq (~pikhq@c-73-181-126-9.hsd1.co.comcast.net) has joined
*	Wizek_ has quit (Ping timeout: 246 seconds)
*	ertes has quit (Ping timeout: 240 seconds)
*	sssilver (~sssilver@38.122.48.218) has joined
*	sssilver_ has quit (Ping timeout: 246 seconds)
*	cpennington has quit (Remote host closed the connection)
*	codrinb has quit (Ping timeout: 248 seconds)
*	samrat_ has quit (Ping timeout: 240 seconds)
*	Qommand0r has quit (Quit: WeeChat 1.9)
*	m0rphism (~m0rphism@HSI-KBW-085-216-002-127.hsi.kabelbw.de) has joined
*	twandy has quit (Quit: twandy)
*	zachk (~Zach@unaffiliated/zachk) has joined
*	codrinb (~codrinb@94.177.40.42) has joined
*	Guest26 has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	zachk has quit (Max SendQ exceeded)
<chakri>	?
*	shangxiao (~shangxiao@106-68-92-108.dyn.iinet.net.au) has joined
<geekosaur>	??
*	zachk (~Zach@unaffiliated/zachk) has joined
*	zero_byte has quit (Ping timeout: 240 seconds)
<ski>	???
<chakri>	are there any good exercises to understand types and typeclasses?
<ski>	<monochrom> Most textbooks have some.
*	sssilver has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	codrinb has quit (Ping timeout: 240 seconds)
<Welkin>	@where typeclassopedia
<lambdabot>	http://www.haskell.org/haskellwiki/Typeclassopedia
<Welkin>	chakri: use that
*	biglama has quit (Ping timeout: 248 seconds)
<ski>	chakri : do you understand basics, like type signatures, lists, `Maybe', `Either', trees ?
<chakri>	yes, I understand basics
<ski>	ok, good
*	Destol has quit (Quit: Lost terminal)
<ski>	(that wasn't clear to me, from what you said)
*	biglama (~Day_dream@ip-188.net-82-216-175.joinville2.rev.numericable.fr) has joined
<monochrom>	Then again, don't trust it when people say they understand.
*	sw1nn has quit (Quit: WeeChat 1.9)
<mnoonan>	"trust, but verify"
<Psybur>	"trust, but don't trust"
<monochrom>	Yeah, but Occam's Razor cuts it down to "just verify".
*	preyalone (uid21561@gateway/web/irccloud.com/x-jfsfaskfiblhdedv) has joined
<ski>	yea, but they thinking they understand has at least somewhat higher chance of being able to tackle that, than they knowing they don't understand
<mnoonan>	"don't really trust, but act like a decent human being and put on a facade of trustiness"
<Welkin>	admitting that you don't understand is the first step to recovery
<Psybur>	"the grey matter in my head makes me do things!"
<nshepperd>	thinking that you understand, but being wrong, is the most common form of non-understanding
*	codrinb (~codrinb@94.177.40.42) has joined
<Welkin>	what is they believe that they overstand?
<Welkin>	if*
*	sw1nn (~neale@2001:8b0:caed:24b4:c4a0:db91:8b06:92e6) has joined
*	nnplv has quit (Ping timeout: 248 seconds)
<ski>	nshepperd : it's a step on the way ..
<Welkin>	the more you know, the less you realize you know
<monochrom>	I disagree that it is decent.
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
<Welkin>	if you think you know everything, you know nothing. If you think you know nothing, you probably know a lot
<trevortknguyen[m>	Does anyone know how to compare using frp-arduino to using Copilot from Galois for programming Arduinos?
*	sssilver_ (~sssilver@38.122.48.218) has joined
<Welkin>	the more you know, the less you realize you don't know*
*	Sampuka (~Sampuka@x1-6-24-7f-20-00-22-92.cpe.webspeed.dk) has joined
<Welkin>	the more you know, the more you realize you don't know*
<Welkin>	o.o
<Welkin>	that one
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Fri Sep 15 12:22:28 2017

**** BEGIN LOGGING AT Fri Sep 15 18:38:36 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<cr1t1cal>	ah. and why 2? i use 8
<cr1t1cal>	hehe
<idolator>	`expandtab` is the one
*	codrinb has quit (Ping timeout: 240 seconds)
*	kav (~kari@dsl-hkibng42-5673d7-15.dhcp.inet.fi) has joined
<cr1t1cal>	ye i got that. thanks
*	jellowj has quit (Ping timeout: 255 seconds)
<idolator>	because my monitor isn't quadruple wide
<cr1t1cal>	lol
<cr1t1cal>	have fun ppl
*	cr1t1cal has quit (Quit: WeeChat 1.6)
*	zoey has quit (Quit: Leaving)
*	uwap (~uwap@genja.uwap.name) has joined
*	asthasr has quit (Quit: Leaving)
*	dfeuer has quit (Ping timeout: 240 seconds)
*	cranej (~crane@180.164.160.183) has joined
*	mayhew has quit (Quit: WeeChat 1.6)
*	olligobber (~olligobbe@unaffiliated/olligobber) has joined
*	codrinb (~codrinb@94.177.40.42) has joined
*	jedws (~jedws@2001:8003:359f:a700:bcf2:f9de:aac:1a98) has joined
<Welkin>	what is a "vim-like"?
<juri_>	bad.
<Welkin>	vim came out in 1991. emacs came out in 1976
*	codrinb has quit (Ping timeout: 246 seconds)
*	Costar has quit (Remote host closed the connection)
<idolator>	emacs is quite not vim-like
*	Guest26 (~textual@2605:e000:60d7:7d00:a97b:c9e6:b1c9:7766) has joined
*	ystael has quit (Ping timeout: 260 seconds)
*	cranej has quit (Quit: WeeChat 1.9)
*	jmcarthur (~jmcarthur@2601:86:100:1620:11f3:5a14:fc98:ceb1) has joined
*	Ojd has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
*	fizbin (~Adium@pool-96-235-150-81.cmdnnj.east.verizon.net) has joined
*	hackagebot (~hackagebo@2a00:dcc0:eda:88:245:71:269a:892d) has joined
*	kuttifunk1 (~Thunderbi@188.174.193.197) has joined
*	codrinb (~codrinb@94.177.40.42) has joined
*	xuanrui (~xuanrui@209.6.192.227) has joined
*	kuttifunk has quit (Ping timeout: 248 seconds)
*	kuttifunk1 is now known as kuttifunk
*	Guest26 has quit (Ping timeout: 255 seconds)
*	quobo has quit (Quit: Connection closed for inactivity)
*	Costar (~Costar@179.215.124.226) has joined
*	vuto (~vuto@42.119.112.149) has joined
*	Flechette (~Sundancer@unaffiliated/sundancertp) has joined
<crucify_me>	hi is the commented type signature here an error of an online solution set?   https://ptpb.pw/8CTc
*	codrinb has quit (Ping timeout: 248 seconds)
<crucify_me>	*ie is it in error?
*	marcux has quit (Quit: leaving)
*	marcux (~marco@209.160.121.241) has joined
<crucify_me>	I don't understand that signature
<mniip>	no that looks like a more generic type
<mniip>	that is still valid for this function
<crucify_me>	mniip thanks, really? I couldn't get it to run... one moment pls
*	pera has quit (Ping timeout: 240 seconds)
*	banc has quit (Quit: ZNC - http://znc.in)
*	Contessa has quit (Ping timeout: 264 seconds)
<mniip>	@let signum_ x | x < 0 = -1; | x == 0 = 0; | x > 0 = 1
<lambdabot>	 Parse failed: Parse error: |
<mniip>	@let signum_ x | x < 0 = -1 | x == 0 = 0 | x > 0 = 1
<lambdabot>	 Defined.
*	hucksy_ (~hucksy@p4FD1FAFD.dip0.t-ipconnect.de) has joined
<mniip>	:t signum_
<lambdabot>	(Ord a, Num a, Num t) => a -> t
*	marcux has quit (Client Quit)
*	marcux (~marco@209.160.121.241) has joined
*	Mon_Ouie has quit (Ping timeout: 240 seconds)
*	codrinb (~codrinb@94.177.40.42) has joined
<crucify_me>	mniip, odd it does work thank you. could you explain why there are two Num constraints there?
<mniip>	because there are two constrained types?
*	Swizec has quit (Quit: Computer has gone to sleep.)
<crucify_me>	mniip, er..
*	unK_ has quit (Quit: KVIrc 4.9.2 Aria http://www.kvirc.net/)
*	hucksy has quit (Ping timeout: 240 seconds)
<crucify_me>	sorry I don't know how that signature works
*	groscoe has quit (Ping timeout: 260 seconds)
<idolator>	a is both a Num and an Ord (Ord because you're applying order comparisons on it)
<mniip>	well
<idolator>	t need only be a Num
<mniip>	signum_ is a function from any a to any t
<mniip>	as long as a is Ord and Num
<mniip>	and t is Num
*	systemfault (~rcyr@unaffiliated/rcyr) has joined
<crucify_me>	if idolator wanted to see the paste https://ptpb.pw/8CTc
*	codrinb has quit (Ping timeout: 240 seconds)
<crucify_me>	the first signature there I guessed and it works fine I thought
*	marcux has quit (Quit: leaving)
*	lefinch (~Adium@2401:7400:e800:359c:6042:ca1e:41dc:3d60) has joined
*	marcux (~marco@209.160.121.241) has joined
<crucify_me>	the commented one is causing me trouble
<idolator>	you're requiring that the output type also be of typeclass Ord
*	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has joined
*	marcux has quit (Client Quit)
<idolator>	which is fine
<crucify_me>	but isn't the output type just a?
<idolator>	but it doesn't need to be
*	`^_^v (~nycs@pool-173-61-30-116.cmdnnj.fios.verizon.net) has joined
<crucify_me>	> signum 3.0
<lambdabot>	 1.0
*	didpul (~quassel@201.141.37.80) has joined
*	mac10688 (~mac10688@c-24-21-116-24.hsd1.or.comcast.net) has joined
<idolator>	it need not be. after all, you're losing all of the `a` value but the sign
<crucify_me>	interesting please hold on
*	codrinb (~codrinb@94.177.40.42) has joined
*	`^_^v has quit (Client Quit)
<idolator>	any set of three elements with an equivalence relation should do
*	lispy has quit (Remote host closed the connection)
*	didpul has quit (Remote host closed the connection)
*	banc (~master@217.151.98.168) has joined
*	hackagebot positron 0.1.0.0 – Experiment – https://hackage.haskell.org/package/positron
<idolator>	Ord represents that the output set should have an ordering relation over it, which is a step further
*	`^_^v (~nycs@pool-173-61-30-116.cmdnnj.fios.verizon.net) has joined
<crucify_me>	right, the last point you made, that program requires Ord because of the way the case statements are written
<crucify_me>	idolator, 
<crucify_me>	correct?
*	twandy has quit (Ping timeout: 240 seconds)
<olligobber>	:t signum
<lambdabot>	Num a => a -> a
<olligobber>	:t signum_
<lambdabot>	(Ord a, Num a, Num t) => a -> t
*	lefinch (~Adium@2401:7400:e800:359c:6042:ca1e:41dc:3d60) has left
*	lefinch (~Adium@2401:7400:e800:359c:6042:ca1e:41dc:3d60) has joined
*	cranej (~crane@180.164.160.183) has joined
*	afarmer has quit (Ping timeout: 260 seconds)
*	marcux (~marco@209.160.121.241) has joined
*	eschnett (~eschnett@ktnron0916w-lp130-1-65-94-201-103.dsl.bell.ca) has joined
*	iqubic (~iqubic@2601:602:9901:2c9f::da25) has joined
*	jmcarthur has quit (Ping timeout: 252 seconds)
*	Welkin has quit (Quit: leaving)
<crucify_me>	sorry no capiche. signum doesn't require Ord at all?
<zoid1>	Why did lambdabot spit out two different type signatures?
*	chlong has quit (Ping timeout: 252 seconds)
<crucify_me>	one of the signums is signum_ which was written for helping me out
<crucify_me>	I'm a bit confused as usual
<crucify_me>	https://ptpb.pw/8CTc zoid1 see comments
<olligobber>	zoid1, I asked about two functions, hence two types
*	devjason has quit (Ping timeout: 260 seconds)
<crucify_me>	olligobber, et al , so because of the way the case statements are written sequentially, is that why it needs that longer signature?
*	Jesin (~Jesin@pool-72-83-138-15.washdc.fios.verizon.net) has joined
<olligobber>	I don't know enough about signum_ to answer that
<olligobber>	oh, it was defined up there
*	afarmer (~afarmer@199.201.64.3) has joined
<olligobber>	it's because you used < on x, which can only happen if x is Ord
<olligobber>	you compared x to a number, which can only happen if x is Num
*	ystael (~ystael@209.6.50.55) has joined
*	sigmundv (~sigmundv@178.167.153.106.threembb.ie) has joined
*	Noldorin has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
<crucify_me>	ok yes, so there are 2 versions of Num : Num a and Num a1. why is that?
<olligobber>	and you returned numbers, so the return value of signum_ must be Num
*	sigmundv has quit (Remote host closed the connection)
<olligobber>	crucify_me, because what it's given doesn't have to be the same as what it returns
<olligobber>	that function is fine if I give it a Float and expect it to return an Integer
*	lefinch has quit (Quit: Leaving.)
<olligobber>	those two types can be the same too, it will work either way
<crucify_me>	oh because ie if you enter 1.2   ..? excellent I see, yes you need to make it more flexible
<crucify_me>	thanks!
*	justan0theruser has quit (Ping timeout: 240 seconds)
<olligobber>	in general if you don't tell Haskell what type something will be, it will make it as general as possible
<olligobber>	if you want it to be less general, declare its type
<crucify_me>	right, however with the Num a  alone, it does take a Float I believe olligobber 
<olligobber>	yeah, it will take a Float as it is
<crucify_me>	what would be a case where the Num a1 is essential?
<olligobber>	if I give it 'a', it can
<olligobber>	can't do 'a' < 0
*	ystael has quit (Ping timeout: 240 seconds)
<olligobber>	cos 'a' isn't a number but 0 is
<olligobber>	:t (<)
<lambdabot>	Ord a => a -> a -> Bool
*	xcmw has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	cdg (~cdg@2600:1700:3120:40e0:c57:34b8:c7a6:6985) has joined
*	ianandrich (~ianandric@c-73-223-61-224.hsd1.ca.comcast.net) has joined
*	augur has quit (Remote host closed the connection)
*	augur (~augur@noisebridge130.static.monkeybrains.net) has joined
<crucify_me>	yes, but what would be an input that illustrates how the Num a1 is utilized olligobber ?
*	mercato (~mercato@c-50-135-215-23.hsd1.wa.comcast.net) has joined
<crucify_me>	since a Float doesn't require the additional value in the signature
*	cdg has quit (Ping timeout: 246 seconds)
<idolator>	signum -1.0
<idolator>	signum (-1.0)
*	vuto has quit (Ping timeout: 260 seconds)
<idolator>	lambdabot, help
<zoid1>	> signum (-1.0)
<idolator>	:help
<lambdabot>	 -1.0
<idolator>	ty
<idolator>	> signum (-1.0)
<crucify_me>	ok it goes unevaluated
<lambdabot>	 -1.0
<idolator>	that's your version
<crucify_me>	> signum_ (-1.0)
<lambdabot>	 -1
*	eacamero_ is now known as eacameron
<olligobber>	I'm not sure if we're talking about signum or signum_ right now...
<idolator>	that's the version you're asking about
*	augur has quit (Ping timeout: 240 seconds)
<olligobber>	the reason signum_ needs the input to be Num is so it can compare the input to something that is a Num
<olligobber>	so signum_ 'a' won't work, since signum_ tries to do 'a' < 0 which doesn't make sense
<olligobber>	signum_ 0.1 will work, since signum_ can do 0.1 < 0
*	koz_ has quit (Ping timeout: 240 seconds)
*	mercato has quit (Quit: mercato)
<olligobber>	but signum_ (2::Integer) will also work, even though (2::Integer) isn't a Float, it can be compared to 0
*	codrinb has quit (Ping timeout: 246 seconds)
*	devjason (~devjason@173.216.228.58) has joined
<crucify_me>	ok so the extra value, Num a1, is to distinguish between potential numerical types, and the numerical type, Integer, which is used in the case statements
<olligobber>	no type is used in the case statements
<olligobber>	in the case statements, the input is compared to 0
<olligobber>	:t 0
<lambdabot>	Num t => t
<olligobber>	0 can be any numerical type
<pikajude>	because that secretly becomes "fromInteger 0"
<pikajude>	i think
<pikajude>	yeah it does
<pikajude>	if you turn on RebindableSyntax and try to use an integer literal, you'll get an error about fromInteger missing
*	xcmw (~textual@cpe-98-28-136-79.cinci.res.rr.com) has joined
*	alviprofluvium (~diarrea@pc-77-133-44-190.cm.vtr.net) has joined
*	codrinb (~codrinb@94.177.40.42) has joined
*	sssilver (~sssilver@2605:6000:ead6:6700:194b:7e5c:3637:d7f5) has joined
<JazzyEagle>	Odd question...  Trying to figure out a web framework and a corresponding template language...  The only templating langauge I see that seems to support the three big web languages (HTML/CSS/JS) is Shakespeare, which has a more complex backend...
<crucify_me>	thanks pikajude olligobber I need a tutor. still don't get why Num a and Num a1 are required, when signum seems to do everything that signum_ does . very sorry
<JazzyEagle>	Most of the other templating languages I'm seeing appear to focus purely on HTML....
<JazzyEagle>	blaze-html looks nice, but I'm not seeing a blaze-css nor blaze-js
<JazzyEagle>	Does anyone have any other recommendations?
*	codrinb has quit (Ping timeout: 248 seconds)
*	didpul (~quassel@201.141.37.80) has joined
<boj>	JazzyEagle: if you want to step into crazy SPA world look at Reflex/Reflex-Dom
<JazzyEagle>	SPA?
<boj>	single page application
<zoid1>	What do you mean with 'backend'? I don't think you have to use Yesod for Shakespear templates
Python interface unloaded
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Fri Sep 15 19:56:02 2017

**** BEGIN LOGGING AT Sat Sep 16 10:49:07 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	codrinb (~codrinb@94.177.40.42) has joined
*	Scip (~scip@76.121.6.102) has joined
*	lukaramu (~lukaramu@port-17697.pppoe.wtnet.de) has joined
*	afarmer (~afarmer@199.201.64.3) has joined
*	begriffs has quit (Quit: Leaving...)
*	luiz_ (~luiz@2804:214:81c1:cc75:78ec:e68d:90ad:5f1e) has joined
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	luiz_ is now known as Guest51179
*	vuto has quit (Ping timeout: 248 seconds)
*	fizbin (~Adium@pool-96-235-150-81.cmdnnj.east.verizon.net) has joined
*	systemfault (~rcyr@unaffiliated/rcyr) has joined
*	mek42 (~quassel@cpe-184-153-249-203.twcny.res.rr.com) has joined
*	kille has quit (Ping timeout: 246 seconds)
*	ltielen has quit (Ping timeout: 246 seconds)
*	inhortte has quit (Quit: Leaving.)
*	Scip has quit (Ping timeout: 240 seconds)
*	conal has quit (Quit: Computer has gone to sleep.)
<vimalloc>	I just discovered MonadClasses (MonadReader for example) compared to monad stacks with transformers (ReaderT for example). I'm migrating my stuff to the former, and am trying to understand the point of this `MonadBaseControl IO m`.
*	argent0 has quit (Ping timeout: 264 seconds)
<geekosaur>	MonadBaseControl is about exception handling
<vimalloc>	I'm using Data.Pool, which has the `MonadBaseControl IO m` for the `withResource` function, so I include that in my function and everything works. But I'm trying to figure out why that is different then MonadIO and why it is needed compared to MonadIO
*	conal (~conal@104.255.240.10) has joined
*	zachk (~Zach@unaffiliated/zachk) has joined
<geekosaur>	basically, it's really difficult to correctly thread an exception through multiple monads which control external resources, without leaking the resource
<geekosaur>	for example an exception thrown at the wrong time could cause a connection to a database to be lost; the process is still holding it but it can't be accessed from Haskell any more
*	forgottenone (~forgotten@176.40.57.101) has joined
<geekosaur>	MonadBaseControl provides fine grained exception control and routing, so you can always clean up after an exception without losing track of any resources.
*	codesoup (~codesoup@2607:fea8:e2e0:240:5df0:2f95:5e96:59a4) has joined
*	aavogt has quit (Ping timeout: 252 seconds)
<vimalloc>	Ah, makes sense why it would be in the Data.Pool then. Thanks for the info.
<vimalloc>	used in*
<zachk>	would handling the resources using cloud haskell processes be cleaner then regular threads, as far as exceptions are concerned?
*	aavogt (~aavogt@24-52-245-124.cable.teksavvy.com) has joined
*	pera (~pera@unaffiliated/pera) has joined
*	eklavya_ (~eklavya@2405:205:1489:d668:906:d590:a778:e6f3) has joined
*	Drinfeld has quit (Quit: ChatZilla 0.9.93 [Firefox 55.0.3/20170824053622])
*	davr0s has quit (Read error: Connection reset by peer)
*	eklavya has quit (Ping timeout: 246 seconds)
*	hous (~hous@cpe-70-121-86-187.austin.res.rr.com) has joined
*	conal has quit (Quit: Computer has gone to sleep.)
*	didpul (~quassel@201.141.37.80) has joined
*	ptsd has quit (Ping timeout: 246 seconds)
*	teggi has quit (Quit: Leaving...)
*	ptsd (~u0_a233@31.218.37.190) has joined
*	Saukk has quit (Quit: Leaving)
*	emilypi has quit (Ping timeout: 264 seconds)
*	Guest51179 has quit (Ping timeout: 264 seconds)
*	johnk has quit (Ping timeout: 264 seconds)
*	FreeBirdLjj has quit (Remote host closed the connection)
*	Ojd (4c4276db@gateway/web/cgi-irc/kiwiirc.com/ip.76.66.118.219) has joined
*	sdothum (~znc@dsl-173-206-154-102.tor.primus.ca) has joined
*	hackagebot haskell-names 0.9.0 – Name resolution library for Haskell – https://hackage.haskell.org/package/haskell-names
<cloudhead>	is there an Async package which works with MonadIO?
<cloudhead>	hmm I guess MonadConc is the equivalent, is this used in the wild?
<barrucadu>	cloudhead: I know of very few users
<barrucadu>	So, not really :(
*	oish (~charlie@159.22.169.217.in-addr.arpa) has joined
*	afarmer has quit (Ping timeout: 248 seconds)
*	sleffy has quit (Ping timeout: 260 seconds)
*	sedeki has quit (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
<hous>	how do I edit the cabal file for a stack package
<hous>	I can't find it anywhere
<barrucadu>	hous: Is there a package.yaml?  The package might be using hpack (which stack supports)
<cloudhead>	barrucadu: do people just not mind using IO directly? or is the async package not used that much?
*	conal (~conal@104.255.240.10) has joined
<glguy>	cloudhead: Using IO directly is the most common
<barrucadu>	cloudhead: The async package is pretty widely used, but people just use IO.
<cloudhead>	I see
<glguy>	and using IO directly isn't in conflict with using the async package
<glguy>	that's also quite common
<cloudhead>	yeah it seems difficult to do otherwise
*	codrinb has quit (Ping timeout: 240 seconds)
<hous>	barrucadu: it's definitely a cabal file. I guess I just don't know where it's downloading the package, and then where it unzips it, and then where it's building it, and then after it fails build is stack deleting that folder?
<barrucadu>	Yes, stack cleans up after it builds things
<hous>	can I tell it to just download and unzip the package and then not build it so I can do that manually?
*	a3Dman has quit (Ping timeout: 240 seconds)
<barrucadu>	If you want to modify the package, you'll probably have to fork it (or download a local copy), make your changes, and point to your copy in your stack.yaml.  I'm not sure if there's a way to just tell stack to use a different cabal file manually.
*	eklavya_ has quit (Remote host closed the connection)
<hous>	what's the easiest way to do that, and after I install it, will stack recognize the package as installed so it can use it as a dependency?
*	conal has quit (Client Quit)
<zzq>	cloudhead: The lifted-async package is like the async package with the functions lifted to MonadBase/MonadBaseControl instead of IO.
*	joncfoo has quit (Ping timeout: 264 seconds)
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	pyon has quit (Ping timeout: 252 seconds)
*	conal (~conal@104.255.240.10) has joined
<barrucadu>	Here's an example: https://github.com/barrucadu/dejafu/blob/master/stack.yaml  I needed to use a different version of test-framework, so I did that in my stack.yaml.
<cloudhead>	zzq: ah thanks, will have a look
<hous>	ok I'll fork it
<hous>	thanks
*	codrinb (~codrinb@94.177.40.42) has joined
*	ystael (~ystael@209.6.50.55) has joined
<Ojd>	hello  i am wondering if there is any way to library to solve equations in haskell... for example P=P*y1 + P*y2. If I have y1 I can find y2 easily (and vicerversa) by re-arranging elemnts
<Ojd>	but more complex equations are difficult to solve like that
<EvanR>	is that a recursive definition
<zachk>	ojd, if it's a linear equation you can use a linear algebra package to solve the system of linear equations
<EvanR>	> fix (\p -> p * 3 + p * 4)
<lambdabot>	 mueval-core: Time limit exceeded
<EvanR>	oh well
<cloudhead>	barrucadu: didn't realize you wrote dejafu - I think I'll give it a try since I'm having a hard time with concurrency testing
<barrucadu>	Cool, let me know if you have any problems
<cloudhead>	cheers :)
*	Darwin226 (5d88f9f4@gateway/web/freenode/ip.93.136.249.244) has joined
<Darwin226>	monochrom: Sorry, I had to go. The line that errors is the last one (http://lpaste.net/6335466087500480512)
<Darwin226>	More precisely, the second parameter
*	codrinb has quit (Ping timeout: 240 seconds)
*	conal has quit (Quit: Computer has gone to sleep.)
<Ojd>	EvanR, you would likely have y1 and P, or y2 and P... so it would be more like \y1 P -> P = y1 *P + y2*P and I would like to find y2
*	mrkgnao has quit (Quit: WeeChat 1.7.1)
*	ltielen (~ltielen@ptr-3z2lko2bunnpt1ahjk9.18120a2.ip6.access.telenet.be) has joined
<Ojd>	zachk, I would look for the linear algebra package as recommended
*	emilypi (~emilypi@pool-100-33-104-88.nycmny.fios.verizon.net) has joined
<zachk>	you can solve single variable equations of degrees greater then 1 using the quadratic or like ilk up to the 4th degree, sadly, it is proven no general formula for solving 5th degree or higher equations exists
<geekosaur>	Darwin226, 'class C k (a :: k)' tells ghc that k is a kind. You cannot simultaneously use it as a type, which you are trying to do there
<Darwin226>	geekosaur: Oh but you can with TypeInType
<Darwin226>	the class definition works fine
<Darwin226>	the instance errors out
<geekosaur>	not exactly. you have T identifying both a kind and a type. but technically you are using 'T there not T
<Darwin226>	and even the instance works if I remove the Num constraint from the constructor
<Darwin226>	Sure, and ('T :: T x)
*	fizbin has quit (Quit: Leaving.)
*	codrinb (~codrinb@94.177.40.42) has joined
<monochrom>	"no general formula for 5th degree" is an urban legend.
*	sleffy (~sleffy@c-24-7-67-0.hsd1.ca.comcast.net) has joined
*	bennofs has quit (Read error: Connection reset by peer)
<monochrom>	The precise sentence is "no general formula if you only allow + * - / nth-root"
<c_wraith>	that is, algebraic numbers
<c_wraith>	err, not quite.
<monochrom>	But there are formulas like http://mathworld.wolfram.com/QuinticEquation.html
<epta>	in cabal file one can wrap test-related library dependency (like quickcheck) with a flag. Instead of a custom flag, can '--enable-tests' flag be used somehow?
<c_wraith>	It means there are algebraic numbers without a representation with just radicals
*	rdes (~ryan@c-73-16-127-221.hsd1.me.comcast.net) has joined
*	`Guest00000 has quit (Ping timeout: 260 seconds)
*	`Guest00000 (~user@37.113.156.118) has joined
*	robotroll has quit (Read error: Connection reset by peer)
*	codrinb has quit (Ping timeout: 264 seconds)
*	eacameron has quit (Remote host closed the connection)
*	fizbin (~Adium@pool-96-235-150-81.cmdnnj.east.verizon.net) has joined
*	conal (~conal@104.255.240.10) has joined
*	monoidal (1f04d42f@gateway/web/freenode/ip.31.4.212.47) has joined
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
*	chaosmasttter (~chaosmast@p54B46F7A.dip0.t-ipconnect.de) has joined
<monoidal>	Well well well, what's going on in the Haskell community?
<ongy>	everything!
<monoidal>	That's what makes us Haskellers I suppose
*	DTZUZU has quit (Quit: WeeChat 1.9)
<monoidal>	Always everything is going on
<monochrom>	Nothing.
*	minos_ has quit (Quit: This computer has gone to sleep)
*	OscarZ has quit (Read error: Connection reset by peer)
*	j2j (~Thunderbi@ool-457f1aab.dyn.optonline.net) has joined
*	codrinb (~codrinb@94.177.40.42) has joined
<monoidal>	I have a little question, how's Haskell 2020 going? I haven't heard much about it recently. It's still under development? 
<monoidal>	do you know something about its current state?
*	hous has quit (Quit: Textual IRC Client: www.textualapp.com)
*	DTZUZU (~DTZUZU@S0106bcd16584b0aa.vs.shawcable.net) has joined
*	codrinb has quit (Ping timeout: 260 seconds)
*	minos_ (~simonbosm@58-135-145-85.ftth.glasoperator.nl) has joined
*	eacameron has quit (Ping timeout: 240 seconds)
*	shangxiao (~shangxiao@106-68-92-108.dyn.iinet.net.au) has joined
*	clay1 has quit (Ping timeout: 246 seconds)
*	OnkelTem has quit (Ping timeout: 252 seconds)
<monoidal>	anyone out there?
*	codrinb (~codrinb@94.177.40.42) has joined
<AndreasK>	As far as I know it's still worked on. But I don't really know much more about it
<Ojd>	yup
<Ojd>	question, what would be a good package for plotting?
<monoidal>	Look at its Hackage section, and find out which is more appropiate to you from there
*	Scip (~scip@76.121.6.102) has joined
<nshepperd>	you can write a general formula for anything, by just defining a new function as "the solution to X"
<nshepperd>	so any talk of there being "no general formula" for something needs to circumscribe what formula would 'count'
*	codrinb has quit (Ping timeout: 255 seconds)
<cloudhead>	barrucadu: any reason your MonadSTM can't be an Alternative? I see you have a note there.
<monochrom>	I grew out of "formulas" a long time ago. The issue that matters is never "formulas", but rather algorithms and computability.
<nshepperd>	having an effective procedure to approximate the value would be a minimal requirement
<monochrom>	Not to mention that a lot of nice-looking formulas are computationally dumb.
*	codrinb (~codrinb@94.177.40.42) has joined
<monochrom>	There is even a sum-and-cosine formula for spitting out the prime numbers (all prime numbers and only prime numbers).
<AndreasK>	Quiz question, given {f 1 True = 1; f 2 False = 2; f 1 False = 3} . How can (f x True == f x False) give true
<monochrom>	It is also grossly impractical.
*	Scip has quit (Ping timeout: 264 seconds)
*	StoneToad has quit (Ping timeout: 260 seconds)
<erisco>	AndreasK, do you have some work to show?
*	LysergicDreams (~Lysergia@client-104-245-228-34.cvalink.com) has joined
<AndreasK>	erisco: As in hints? I already have a solution if that is what you meant
<erisco>	so you are quizzing us? okay
*	StoneToad (~StoneToad@ppp-199-167-119-216.storm.ca) has joined
*	Ojd has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
<monochrom>	I don't understand the question. Is it "for all x" or is it "for some x" or is it "find x such that" or what?
*	codrinb has quit (Ping timeout: 240 seconds)
<nshepperd>	is it a trick question. f undefined True = f undefined False = undefined
<monoidal>	AndreasK : that sounds like doesn't have any solution, the pattern matching wouldn't behave un any way that returns True afaik
*	AegonTarg (~AegonTarg@node-1w7jr9qocwjeplh4cwxl1q6li.ipv6.telus.net) has joined
<monoidal>	Oh, undefined
*	diegoksp (~diegoksp@190.153.194.178) has joined
<AndreasK>	nshepperd: It actually gives the result true in ghci, undefined would give an exception
*	bennofs (~benno@217-68-187-120.dynamic.primacom.net) has joined
<erisco>	do you mean True?
<AndreasK>	yes
<monoidal>	AndreasK : doesn't make sense to me
<nshepperd>	then the output :: Z2 instead of Integer
<nshepperd>	such that 1 == 3
<monoidal>	For any x, either the pattern matching fails or It returns False
<AndreasK>	Thats the beaty of it. It didn't make sense for me at first either. Has to do with how literals are desugared
*	MindlessDrone (~MindlessD@unaffiliated/mindlessdrone) has joined
<erisco>	well I thought about making a num instance
*	minos_ has quit (Quit: This computer has gone to sleep)
<erisco>	but I am not sure if there is one available
<monoidal>	First, have you bound that x to a value?
<AndreasK>	Yes x is just a regular value
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
<monoidal>	It's either 1 2 or 3 otherwise the pattern matching fails
*	AegonTarg (~AegonTarg@node-1w7jr9qocwjeplh4cwxl1q6li.ipv6.telus.net) has left
<AndreasK>	monoidal: But what does it mean if the expression is "1"
<erisco>	we can just pick any Num instance such that 1 == 3
<erisco>	but I don't know what sensible Num instance has this… and partly because I don't know what is expected of good Num instances
*	codrinb (~codrinb@94.177.40.42) has joined
<monochrom>	I think "valuation ring" is good enough.
<AndreasK>	Not sure about sensible. But the only law I know for Num is the abs one
<erisco>	my first though is whether () works
<monochrom>	Mostly you just need "ring" but the abs adds the "valuation" part.
*	raichoo (~raichoo@dslb-084-062-115-036.084.062.pools.vodafone-ip.de) has joined
<monochrom>	() should be pretty OK.
<monoidal>	erisco: overriding the Integer instance if that's possible?
<monochrom>	() is the {0} ring.
<erisco>	if that is the case, then why is () not already an instance of Num, but okay, I'll trust your summary judgement monochrom
*	minos_ (~simonbosm@58-135-145-85.ftth.glasoperator.nl) has joined
*	marr has quit (Read error: Connection reset by peer)
*	ltielen has quit (Quit: WeeChat 1.9)
<monochrom>	Although there is 50% chance a mathematician disagree because they insist 0/=1 for rings.
*	conal has quit (Quit: Computer has gone to sleep.)
<erisco>	heh
*	biglama has quit (Ping timeout: 240 seconds)
<erisco>	though we're going to run into a type defaulting problem for  f x True == f x False
<monochrom>	But bear in mind there is also 50% chance a mathematician insists "ring means commutative ring".
<erisco>	f was defined without a type declaration, so we get the general inferred type, whereby the output type is independent of the input type
<monoidal>	Don't understand how It could actually work with (), shouldn't that be a type error or something?
<erisco>	now we get default Integer for the equality test, and (1 :: Integer) == (3 :: Integer) is False
<barrucadu>	cloudhead: It can be an Alternative, but isn't required to be.  Having said that, I don't think the testing implementation I have is an Alternative or MonadPlus, and that definitely should be.
*	cyborg-one (~cyborg-on@212-178-2-183.broadband.tenet.odessa.ua) has joined
*	conal (~conal@104.255.240.10) has joined
<erisco>	monoidal, (1 :: ()) == (3 :: ()) is True
<barrucadu>	Maybe I should put a MonadPlus constraint on MonadSTM anyway
*	j2j has quit (Quit: j2j)
<monoidal>	erisco: isn't () the only possible value of type ()?
<monochrom>	monoidal: Prelude doesn't make () a Num instance but you can.
*	codrinb has quit (Ping timeout: 264 seconds)
*	biglama (~Day_dream@ip-188.net-82-216-175.joinville2.rev.numericable.fr) has joined
<erisco>	monoidal, precisely (and technically no)
<cloudhead>	barrucadu: ok I see, just find it convenient to use <|> etc.
<monochrom>	And yes () + () = (), () * () = (), etc
<AndreasK>	I forgot one type signature in the initial claim. But http://lpaste.net/3646718291352748032 is one way
<monoidal>	So that quiz question has no answer?
<monoidal>	For me at least, i might have missed something
*	marr (~ccc@213-238-125-175.adsl.inetia.pl) has joined
<erisco>	AndreasK, it looks to me that FNum is iso to ()
<MarcelineVQ>	data FNum = F = ()
<AndreasK>	monoidal: FNum might not be a valid ring, but its a valid Num instance according to all laws I know for Num
*	neoncontrails has quit (Remote host closed the connection)
*	neoncontrails (~neoncontr@wsip-70-183-99-212.sd.sd.cox.net) has joined
*	hackagebot graphite 0.2.0.0 – Graphs and networks library – https://hackage.haskell.org/package/graphite
*	hackagebot errors 2.2.2 – Simplified error-handling – https://hackage.haskell.org/package/errors
<AndreasK>	But yes sorry for the missing last type sig. Even weireder is if you give f the type FNum -> Bool -> Num
<monoidal>	Yeah, but the type inference for the number would be Integer afaik, not Num a => a ?
<AndreasK>	Depends on the Monomorphic restriction
<AndreasK>	I used ghc so it's off by default
<monoidal>	Okay
<AndreasK>	ghci
*	codrinb (~codrinb@94.177.40.42) has joined
<monoidal>	So you have to modify its type signature?
<monoidal>	To make the expression return True
<AndreasK>	For the initial one yes sadly. That was a mistake of mine
<erisco>	I don't have any new quizzes lately… so I'll have to repeat my quiz of finding a correct type for \x -> x x
*	Fekinox has quit (Quit: See ya!)
<monoidal>	erisco: It would be infinitely recursive
<monoidal>	I thought about it recently
<AndreasK>	But my own takeaway from that was that one can't trust numbers unless they are typed to something concrete
*	Fekinox (~Fekinox@cpe-74-72-183-234.nyc.res.rr.com) has joined
<erisco>	monoidal, there is an answer, and it is not an infinitely recursive type
<monoidal>	Well, that goes beyond my knowledge then
*	neoncontrails has quit (Ping timeout: 264 seconds)
<pierrot>	Good afternoon. If I have a function g such that g x xs = xs ++ [x], then the evaluation of (foldr g []) [1..n] goes like this: http://sprunge.us/MYKF ? Is it correct?
*	karetsu (~karetsu@2a02:c7f:8a4f:ba00:9eb6:d0ff:fe19:6741) has joined
<monochrom>	Actually I wonder if you can really write that as "\x -> x x" in Haskell. I mean "f x = x x" plus type sig would be accepted but lambda has an extra restriction that function binding doesn't have.
*	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has joined
<erisco>	does it? I don't know what it is actually, but yes  \x -> x x  can work
<monoidal>	I tried it once and gave me an error "couldn't resolve type signature" or something like that
<AndreasK>	Someone ping me when someone posts an answer. I'm interest but need to get back to other things. 
*	ptsd has quit (Quit: leaving)
<monoidal>	I thought It would be recursive because It takes a function which operates in functions which operate in functions, etc
<monochrom>	Oh, I guess lambda's restriction is lifted under that context. I see an example in the GHC users guide.
*	nilg has quit (Remote host closed the connection)
<monoidal>	Ghci tells me it's a infinite type
*	desperek (~draco@unaffiliated/desperek) has joined
*	d6e_ has quit (Quit: WeeChat 1.7.1)
<erisco>	it wouldn't be a quiz if you could just put  :t \x -> x x  into GHCi, now would it? :)
*	dfeuer has quit (Ping timeout: 240 seconds)
<monochrom>	There is also a reason I said "under that context". So, what context?
<c_wraith>	Am I allowed to use extensions?
<monochrom>	Or perhaps computer environment
<c_wraith>	Because I can do it with extensions.
<Ferdirand>	i'd like to see the solution as well
<erisco>	c_wraith, yes
<monochrom>	Yes.
<monochrom>	Indeed my "context" means turning on an extension.
<monoidal>	I didn't type that, i just went: f x = x x; and then used f which gave that error
<c_wraith>	So yeah.  With the correct extension enabled and a type signature provided, I can make "f = \x -> x x " work
<monoidal>	A forall maybe
*	fizbin has quit (Quit: Leaving.)
*	fizbin (~Adium@pool-96-235-150-81.cmdnnj.east.verizon.net) has joined
<Ferdirand>	when you write f = \x -> x x, both x must refer to the same monomorphic value, yes ?
<monoidal>	Yes
<c_wraith>	Ferdirand: that depends on the extensions...
<erisco>	it is actually a good demonstration of the difference between  let x = y in m  and  (\x -> m) y
*	shangxiao has quit (Ping timeout: 252 seconds)
*	zivoni_ has quit (Quit: WeeChat 1.9)
<monochrom>	erisco: So the extra restriction I'm referring to is when standard Haskell (or ML for that matter) "let f x = x in (f 5, f 'x')" cannot be rewritten as "(\f -> (f 5, f 'x')) id"
*	cloudhead has quit (Ping timeout: 248 seconds)
<erisco>	monochrom, right :)
*	d6e (~paritybit@165.227.24.197) has joined
<erisco>	you can choose other things too, like const
<monochrom>	So lambda monomorphizes your bound variable. Or maybe let is giving you a bonus feature of polymorphizing your bound variable.
*	alviprofluvium (~diarrea@pc-77-133-44-190.cm.vtr.net) has joined
*	minos_ has quit (Quit: This computer has gone to sleep)
<pierrot>	I first thought that (foldr g []) [1..n] would go like this http://sprunge.us/eEba, but that is wrong, right? I mean.. in each step, the outer function g should be applied first like in this reduction http://sprunge.us/MYKF... Is that correct?
<monoidal>	Why does lambda give such restriction, and what exactly is It?
<erisco>	SPJ mentioned briefly in a talk on Core that he kept let/in (rather than rewriting to a lambda) but it wasn't clear whether this was the reason
*	`^_^v (~nycs@pool-173-61-30-116.cmdnnj.fios.verizon.net) has joined
*	minos_ (~simonbosm@58-135-145-85.ftth.glasoperator.nl) has joined
<c_wraith>	monochrom: are you talking about the explicit let-generalization step in HM?
<monochrom>	YES!
<c_wraith>	pierrot: it's most accurate to say foldr g [] [1..n] = g 1 (foldr g [] [2..n]) where you can't say anything further without knowing what g is
*	minos_ has quit (Client Quit)
<monochrom>	monoidal, I was hinting that it depends on your point of view, you could call it "lambda is being restrictive" or you could call it "no, let is being generous".
<pierrot>	In my first message:
<pierrot>	pierrot: ―Good afternoon. If I have a function g such that g x xs = xs ++ [x], then the evaluation of (foldr g []) [1..n] goes like this: http://sprunge.us/MYKF ? Is it correct?
<pierrot>	I gave a definition for g
<c_wraith>	pierrot: ah, missed that one.
<monochrom>	If you look into Hindley-Milner type inference, or the very definition of "rank-1 types", when you try to infer the type of "\x -> whatever" you are pretty much forced to monomorphize x.
<c_wraith>	pierrot: foldr's strictness is entirely dependent on how the function argument treats *its* second argument.  You've picked a case that's incredibly complicated. :)
*	sepp2k (~Sepp2k@x4e3359b0.dyn.telefonica.de) has joined
<monochrom>	And you could hold the opinion that "let x = ... in whatever" should get the same treatment. Except then in practice it will be a let-down because people like to write "let f x = x in (f 5, f 'x')" all the time.
<c_wraith>	pierrot: with that definition, the first thing g does is pattern-match on xs.
*	danthemyth has quit (Ping timeout: 264 seconds)
<c_wraith>	pierrot: that forces evaluation of the next level of foldr, which means another evaluation of g, which means another pattern-match on xs, recursively all through the list.
<monochrom>	So H & M decided to relax let to make everyone happy, and it didn't really cost the theory anything.
<erisco>	how generous of them!
*	bbear (~david@81-67-234-46.rev.numericable.fr) has joined
*	t7 has quit (Ping timeout: 240 seconds)
<bbear>	are you using array in Haskell ?
<bbear>	(I mean are you using them a lot ?)
*	remexre has quit (Ping timeout: 246 seconds)
<monochrom>	Yes. I use Data.Vector a lot of times.
*	Fekinox has quit (Quit: See ya!)
<c_wraith>	pierrot: But there's more to it than that.  Once it's evaluated the entire input, it calculates enough to determine that the result of g has a form (_:_), at which point it constructs the two thunks, passes them as arguments to (:), and returns.
*	jellowj has quit (Ping timeout: 246 seconds)
<c_wraith>	pierrot: it's really a pain to trace the exact evaluation process through all the suspensions caused by laziness and (:) constructors.
*	remexre (~remexre@c-107-4-203-126.hsd1.mn.comcast.net) has joined
*	Fekinox (~Zen@cpe-74-72-183-234.nyc.res.rr.com) has joined
<c_wraith>	pierrot: also, it will depend on how the result is consumed.
<monoidal>	monochrom, but in your example f is just id, what "permissive" part of the typesystem does that show?
*	jellowj (~yellow-ja@afy253.neoplus.adsl.tpnet.pl) has joined
<monoidal>	As in let
*	minos_ (~simonbosm@58-135-145-85.ftth.glasoperator.nl) has joined
<pierrot>	c_wraith: I ask this question because I have to explain the graphic of a heap profile of a program that prints the list generated by that foldr
*	eitanChatav (499e7526@gateway/web/freenode/ip.73.158.117.38) has joined
<c_wraith>	pierrot: that's a rather different question, though.  It cares mostly about sharing of the results, not the process of lazy evaluation
<monochrom>	I don't understand the question. But how about "let {n [] = True; n _ = False} in n [1,2,3] && n ['1','2','3']"
*	Fekinox has quit (Client Quit)
*	Fekinox (~Zen@cpe-74-72-183-234.nyc.res.rr.com) has joined
<c_wraith>	pierrot: you can pretend it's entirely strict and still get the same sharing graph
*	pluplog has quit (Quit: Leaving.)
*	Bleem_ has quit (Ping timeout: 246 seconds)
<maerwald>	https://mars-lang.appspot.com nice, wonder if that will ever takt off. They have IO type too
<monoidal>	Okay, so n is polymorphic, and that doesn't happen in lambdas?
<bbear>	I am wondering something. Lets say you are using Data.Map.Lazy and you are filtering against the keys in a certain integer range.
<monochrom>	erisco: In your "SPJ kept let/in", were you referring to Core?
*	kanshazan (~kanshazan@84-245-13-88.dsl.cambrium.nl) has joined
<bbear>	Do you still need to compute all the keys ?
<erisco>	monochrom, yes
*	takle (~takle@host109-153-109-219.range109-153.btcentralplus.com) has joined
*	luiz (~luiz@179.222.48.144) has joined
*	luiz is now known as Guest96124
<c_wraith>	maerwald: is that an IO type, or just a flag on definitions?  The difference matters.  Being a real type in haskell means things like IO (IO Foo) make sense.
<maerwald>	I have no idea, but it's a pure language
*	inhortte (~polaris@31.4.242.42) has joined
<c_wraith>	pierrot: arg.  Sorry, I misread that as "heap graph", not heap profile.  Nevermind, laziness does matter, and I clearly should have had more sleep.
*	fizbin has quit (Quit: Leaving.)
<monochrom>	OK so I think the main concern is this. You are about to generate asm code. And you want to distinguish "this is a function" from "this is a thunk". So use lambda for function, use let for thunk.
*	ianandrich (~ianandric@c-73-223-61-224.hsd1.ca.comcast.net) has joined
<eitanChatav>	does anyone here use hledger?
*	ritre has quit (Quit: WeeChat 1.9)
*	Scip (~scip@76.121.6.102) has joined
<pierrot>	c_wraith: this is the program http://sprunge.us/SJMa
<JuanDaugherty>	eitanChatav, i do but you want #ledger
<maerwald>	eitanChatav: sm certainly does :>
<pierrot>	and this is the graph I've generated https://i.imgur.com/WNDOWhU.png
*	takle has quit (Read error: Connection reset by peer)
*	minos_ has quit (Quit: This computer has gone to sleep)
<monoidal>	Okay monochrom, i was a little bit Lost..
<pierrot>	I have to explain in words that behaviour...
<c_wraith>	pierrot: as I always forget these things, which profile is -hc ?
<erisco>	"my bank account"
<eitanChatav>	@JuanDaugherty, ledger as opposed to hledger or #hledger as opposed to #haskell
<lambdabot>	Unknown command, try @list
<maerwald>	and sm is a friendly guy, so I don't mind pinging him :P
<MarcelineVQ>	sm?
*	chaosmasttter has quit (Ping timeout: 240 seconds)
<eitanChatav>	simon michael presumably
<maerwald>	yeah, it's simon
<eitanChatav>	I just have stupid beginner questions
<MarcelineVQ>	so many simons.
<JuanDaugherty>	eitanChatav, it's a common ecosys and more people hang in #ledger
<pierrot>	c_wraith cost center
*	codrinb has quit (Ping timeout: 248 seconds)
*	Hknwb77 (~Hknwb77@195.154.204.27) has joined
<maerwald>	MarcelineVQ: not the cat
<eitanChatav>	JuanDaugherty, thanks I guess I'll try there but I'll post my first q here too in case someone can just bat it out
<eitanChatav>	I'm just trying to get started with hledger; As step 0 I downloaded the CSV from a single checking account and wrote a rules file; Now I'm a little confused how to use hledger to run using the rules file on the CSV.
<MarcelineVQ>	maerwald: they come in pairs you know
<eitanChatav>	they're all closed under the simonoid operation
*	jellowj has quit (Ping timeout: 246 seconds)
<maerwald>	MarcelineVQ: cats or simons?
<c_wraith>	pierrot: have you done any analysis to see what curve those are?  I'd guess they're both roughly sqrt(total runtime - current time) curves.
*	lyxia has quit (Ping timeout: 246 seconds)
<c_wraith>	pierrot: as in, the current runtime memory use is proportional to the square of the number of elements left to output.
*	codrinb (~codrinb@94.177.40.42) has joined
<monochrom>	bbear: Yes it still computes all the keys.
*	conal has quit (Quit: Computer has gone to sleep.)
<monochrom>	Or rather, compute each key enough to determine where it should sit in a binary search tree.
*	inhortte has quit (Ping timeout: 248 seconds)
<pierrot>	c_wraith: Yeah, I see.
*	seto[m] (setomatrix@gateway/shell/matrix.org/x-bfmsvmtyeqfwibhp) has joined
<pierrot>	But why the curve is jagged?
*	conal (~conal@104.255.240.10) has joined
<c_wraith>	pierrot: that's normal. the GC doesn't run constantly, only when the nursery generations are filled
*	minos_ (~simonbosm@58-135-145-85.ftth.glasoperator.nl) has joined
<lpsmith>	Hmm, did travis remove support for GHC <= 7.8
<lpsmith>	?
<c_wraith>	pierrot: so any memory profile is going to have a little spikiness.  It can be ignored.
<pierrot>	Hmm.. I'm not sure. I thought that the peaks were there for a reason...
*	codrinb has quit (Ping timeout: 248 seconds)
*	takle (~takle@host109-153-109-219.range109-153.btcentralplus.com) has joined
*	midiparse (~david@catv-89-132-217-22.catv.broadband.hu) has joined
<pierrot>	For example, I also have to explain the graph for this program http://sprunge.us/bUbd. It's this: https://i.imgur.com/hcUh6QK.png
<pierrot>	It also reverses the list but using a foldl
*	chaosmasttter (~chaosmast@p54B46F7A.dip0.t-ipconnect.de) has joined
<pierrot>	the graph is quite simpler
<pierrot>	and isn't jagged
*	conal has quit (Client Quit)
<c_wraith>	pierrot: yes, it allocates a lot less.  the GC doesn't constantly run. :)
<hexagoxel>	pierrot: it ran for a total of 0.0 seconds. have you compared the number of data points for both graphs?
<c_wraith>	pierrot: also, consider that heap profiling is done by sampling.  the number of...  hexagoxel beat me to it. :)
<pierrot>	yeah, the number of points isn't the same
*	justanotheruser (~justanoth@unaffiliated/justanotheruser) has joined
*	eitanChatav (499e7526@gateway/web/freenode/ip.73.158.117.38) has left
*	justanotheruser has quit (Client Quit)
*	robotroll (~robotroll@unaffiliated/robotroll) has joined
<c_wraith>	it looks like you have maybe 30 samples in the foldl' version.  there's no way it can be that spiky with so few samples
*	codrinb (~codrinb@94.177.40.42) has joined
*	justan0theruser has quit (Ping timeout: 264 seconds)
*	robotroll has quit (Read error: Connection reset by peer)
*	safe (~safe@unaffiliated/safe) has joined
<hexagoxel>	what happens when you decrease GC amount on purpose (passing +RTS -H..)? if c_wraith is correct, this should make things smoother, right?
*	monoidal has quit (Ping timeout: 260 seconds)
<pierrot>	hexagoxel: hehe. yeah. I did that with -i2 (sample each two seconds) and the graph is smoother..
*	minos_ has quit (Quit: This computer has gone to sleep)
*	codrinb has quit (Ping timeout: 246 seconds)
<hexagoxel>	that's different though. i don't completely trust that GC affects heap profiles yet.
*	OnkelTem has quit (Ping timeout: 240 seconds)
*	hackagebot concurrency 1.2.0.0, data-fix 0.2.0, dejafu 0.7.2.0, graphite 0.2.1.0
*	hackagebot  → https://hackage.haskell.org/packages/recent
<pierrot>	back to my original question... the evaluation of (foldr g []) [1..n] goes like this http://sprunge.us/eEba or like this http://sprunge.us/MYKF ?
*	eliasr has quit (Quit: Connection closed for inactivity)
*	AndreasK has quit (Remote host closed the connection)
*	jellowj (~yellow-ja@afy253.neoplus.adsl.tpnet.pl) has joined
*	codrinb (~codrinb@94.177.40.42) has joined
<pierrot>	c_wraith: ―pierrot: with that definition, the first thing g does is pattern-match on xs.
<pierrot>	why it does pattern matching in xs?
<c_wraith>	@src (++)
<lambdabot>	[]     ++ ys = ys
<lambdabot>	(x:xs) ++ ys = x : (xs ++ ys)
<lambdabot>	-- OR
<lambdabot>	xs ++ ys = foldr (:) ys xs
*	karetsu has quit (Quit: WeeChat 1.9)
<c_wraith>	pierrot: that's just what (++) does.  and it's the top-level expression in the function
*	Qommand0r (~HENKiE@unaffiliated/schaap137) has joined
*	marcux (~marco@209.160.118.215) has joined
<pierrot>	c_wraith: hmm I see. so the foldr should be reduced first
<pierrot>	Then this is more accurate: http://sprunge.us/eEba
*	codrinb has quit (Ping timeout: 240 seconds)
*	djapo (~archie@unaffiliated/djapo) has joined
*	`^_^v has quit (Quit: This computer has gone to sleep)
<c_wraith>	pierrot: with that g, yes
*	johnk (~john@78-67-125-96-no247.tbcn.telia.com) has joined
<pierrot>	and with the lambda function of the code I shared before?
<pierrot>	instead of g, (\x r -> r++[x])
<pierrot>	it should be the same because of ++
<c_wraith>	it's the same function
<c_wraith>	writing it differently doesn't change anything. :)
<pierrot>	it makes sense :)
<`Guest00000>	is there a library which interprets (Num a => [a])'s as numbers? in this way: toInteger = sum
<c_wraith>	`Guest00000: that seems unlikely.  what would [1,2,3] * [4,5] be?
*	Achylles has quit (Ping timeout: 240 seconds)
<`Guest00000>	c_wraith: concat ((`replicate` [1,2,3]) <$> [4,5])
*	codrinb (~codrinb@94.177.40.42) has joined
<c_wraith>	`Guest00000: hm.  I guess that makes some sense if (+) is just (++), then
<`Guest00000>	yeah
<`Guest00000>	the idea is
<`Guest00000>	partial list is partial number
*	wvansteen has quit (Ping timeout: 240 seconds)
<jle`>	is there any advantage of over just usming the sum of the list the entire time?
<jle`>	*using
<c_wraith>	`Guest00000: I haven't seen that anywhere, though
<`Guest00000>	a number which you know for sure is greater or equal than N
<jle`>	N ?
<`Guest00000>	where N is the sum of the already known part
<jle`>	sounds like the same thing as if you just used numbers
<jle`>	and also your guaruntee isn't true if any of the lists contain negative numbers
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
<jle`>	like, if n and m are both positive, then 'n + m' is a number that is greater than or equal to n
<`Guest00000>	so that if there is a big computation which returns a long such list and you need to compare it to another number, you can abort the computation after you're sure
*	alviprofluvium has quit (Ping timeout: 264 seconds)
<`Guest00000>	jle`: i don't use negative numbers in the list.
*	inhortte (~polaris@31.4.242.107) has joined
<jle`>	oh so the advantage is basically faster > and <
<jle`>	potentially lazy >/<
<`Guest00000>	usual integers are strict
<`Guest00000>	this is more lazy
*	Shatnerz has quit (Ping timeout: 246 seconds)
*	XorSwap has quit (Quit: Leaving)
*	codrinb has quit (Ping timeout: 255 seconds)
<jle`>	yeah, this only works if all of the items are positive, but Num a => [a] makes no guaruntees
*	Newdell (~newdell@95.38.158.70) has joined
*	mkali (~sigu@41.90.199.150) has joined
<Newdell>	how can i get list of packages with more filter?
<jle`>	so such a Numeric type would be useless even for this
<jle`>	if you're only using Integer, and not *all* Num's, you can use [Natural]
*	Newdell (~newdell@95.38.158.70) has left
*	neoncontrails (~neoncontr@wsip-98-186-230-186.sd.sd.cox.net) has joined
<koala_man>	how would you check whether one simple wildcard pattern (e.g. *.txt) is a superset of another (e.g. f??.txt)? I don't intend to support any fancy regex grouping or alternation
<jle`>	is ? a special character there or do you mean the literal '?' character
<ski>	@check \m n -> (min m n >= (0 :: Integer)) ==> (m + n >= max m n)
<lambdabot>	 +++ OK, passed 100 tests.
<koala_man>	any one character, as per DOS rules
<c_wraith>	jle`: I'm assuming glob rules
<geekosaur>	also do you mean shell globbing or regex or ?
*	alviprofluvium (~diarrea@pc-77-133-44-190.cm.vtr.net) has joined
<geekosaur>	(and, er, which variant of regex, if so?)
<c_wraith>	a leading * really says 'glob' to me
<`Guest00000>	jle`: Natural is exotic, GHC-specific
<jle`>	are you planning on compiling with things other than GHC ...?
<koala_man>	just *, ? and literals. no glob ranges or regex features
<`Guest00000>	i may
<koala_man>	I mean, full regex would be pretty sweet, but significantly harder
*	codrinb (~codrinb@94.177.40.42) has joined
<jle`>	if you use a compiler other than GHC then you can just write a Natural there, too
*	t7 (~chatzilla@host86-138-8-152.range86-138.btcentralplus.com) has joined
<jle`>	it doesn't exactly use compiler hacks...it's just a normal Haskell type
*	castlelore has quit (Ping timeout: 240 seconds)
<jle`>	but unless you are doing something extremely specialized, it's pretty safe to assume GHC
<jle`>	like planning for non-GHC usage only makes sense in very esoteric cases
<c_wraith>	or if you're doing something for Utrecht
*	minos_ (~simonbosm@58-135-145-85.ftth.glasoperator.nl) has joined
<koala_man>	if one pattern matches another as a string, though with * only matching at least another *, then it should be a superset, right? 
<erisco>	@check \n -> let collatz :: Integer -> (); collatz 1 = (); collatz n | (n `mod` 2) == 0 = collatz (n `div` 2) | otherwise = collatz (3*n + 1) in collatz n
<lambdabot>	 error:
<lambdabot>	 • No instance for (STestable ()) arising from a use of ‘myquickcheck’ • In t...
<c_wraith>	I could swear that when I did automata theory, I proved there was an efficient algorithm to determine if one regular language was a subset of another.  But I can't remember it now at all.
<erisco>	oh, needs to be True or False I suppose
<erisco>	@check \n -> let collatz :: Integer -> (); collatz 1 = (); collatz n | (n `mod` 2) == 0 = collatz (n `div` 2) | otherwise = collatz (3*n + 1) in collatz n == ()
<lambdabot>	 mueval-core: Time limit exceeded
<erisco>	must have tried 0 or a negative :)
*	codrinb has quit (Ping timeout: 260 seconds)
*	sepp2k1 (~Sepp2k@x4e3359b0.dyn.telefonica.de) has joined
*	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has joined
*	kuribas has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
*	justanotheruser (~justanoth@unaffiliated/justanotheruser) has joined
<erisco>	@check \n -> let collatz :: Natural -> (); collatz 0 = (); collatz 1 = (); collatz n | (n `mod` 2) == 0 = collatz (n `div` 2) | otherwise = collatz (3*n + 1) in collatz n == ()
<lambdabot>	 error:
<lambdabot>	 • No instance for (Arbitrary Natural) arising from a use of ‘myquickcheck’ T...
<erisco>	gee this quickcheck program… well, the idea was, maybe if we add that to a test suite somewhere it will get run enough that it finds a counter example
*	djapo has quit (Quit: leaving)
*	sepp2k has quit (Ping timeout: 264 seconds)
<Tuplanolla>	Is the inclusion problem for regular languages decidable, koala_man?
<koala_man>	c_wraith: ah. given two languages L and M, you can check whether L intersect (not M) is empty
<c_wraith>	koala_man: that would do it
*	Shatnerz (~Shatnerz@2601:151:c302:ed90:adcd:3b49:5d29:5a90) has joined
<koala_man>	I wrote a regex complement tool at some point, and it was... not straight forward
*	minos_ has quit (Quit: This computer has gone to sleep)
<monochrom>	Yeah, expect an exponential blowup when complementing.
*	codrinb (~codrinb@94.177.40.42) has joined
*	danthemyth has quit (Ping timeout: 240 seconds)
<c_wraith>	well that algorithm isn't efficient then.
*	ystael has quit (Ping timeout: 240 seconds)
<erisco>	I was working on a reg lang lib as a means for defining lexers more sensibly
*	minos_ (~simonbosm@58-135-145-85.ftth.glasoperator.nl) has joined
*	codrinb has quit (Ping timeout: 240 seconds)
<erisco>	you can say something like  identifer = word \ keyword \ number
<hexagoxel>	could you not also just intersect both, and check that all final states are paired with final states?
<hexagoxel>	(re regex stuff)
<hexagoxel>	or is that trivially the same thing?
*	vuto (~vuto@42.119.233.193) has joined
<koala_man>	wouldn't that get me equivalence and not inclusion?
<hexagoxel>	ah, indeed. i mean implication, not equality, to compare the is-final-state
*	Hknwb77 has quit (Quit: Hknwb77)
*	codrinb (~codrinb@94.177.40.42) has joined
*	minos_ has quit (Quit: This computer has gone to sleep)
*	vuto has quit (Ping timeout: 252 seconds)
*	cpape` has quit (Remote host closed the connection)
*	inhortte has quit (Ping timeout: 264 seconds)
*	Jesin has quit (Quit: Leaving)
*	cpape` (~user@cpape.eu) has joined
*	refold (~refold@88.98.220.30) has joined
*	xdelv has quit (Read error: Connection reset by peer)
<hexagoxel>	any state reachable that is a final state in the first but not in the second means the first language is not a subset of the second.
<hexagoxel>	(in the intersection of the two DFAs)
*	xdelv (~xdelv@184.75.212.78) has joined
*	inhortte (~polaris@31.4.242.97) has joined
*	emilypi has quit (Ping timeout: 260 seconds)
*	alviprofluvium has quit (Ping timeout: 248 seconds)
**** ENDING LOGGING AT Sat Sep 16 14:03:42 2017

**** BEGIN LOGGING AT Sat Sep 16 17:09:00 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	fizruk (~anonymous@89-178-211-68.broadband.corbina.ru) has joined
*	Psybur has quit (Ping timeout: 264 seconds)
*	louispan (~textual@1.144.97.130) has joined
*	Psybur (~broseph@pool-108-44-203-65.clppva.fios.verizon.net) has joined
*	louispan has quit (Client Quit)
*	augur has quit (Quit: Leaving...)
**** ENDING LOGGING AT Sat Sep 16 17:15:18 2017

**** BEGIN LOGGING AT Sat Sep 16 17:15:18 2017

*	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has joined
**** ENDING LOGGING AT Sat Sep 16 17:15:38 2017

**** BEGIN LOGGING AT Sat Sep 16 17:15:50 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	djapo (~archie@unaffiliated/djapo) has joined
*	Guest96124 has quit (Quit: Leaving)
*	augur (~augur@noisebridge130.static.monkeybrains.net) has joined
*	mizu_no_oto_work has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	kille (~kille@unaffiliated/kille) has joined
*	XorSwap has quit (Quit: Leaving)
*	safe has quit (Read error: Connection reset by peer)
*	`Guest00000 has quit (Ping timeout: 240 seconds)
*	`Guest00000 (~user@37.113.156.118) has joined
*	jmorris has quit (Ping timeout: 264 seconds)
*	whitephoenix (~whitephoe@2600:100f:b026:2506:c952:3754:4640:4879) has joined
*	sleffy has quit (Ping timeout: 264 seconds)
*	hackagebot has quit (Ping timeout: 252 seconds)
*	PatrickRobotham (uid18270@gateway/web/irccloud.com/x-ofivkjhnoqngvgqt) has joined
*	sleffy (~sleffy@c-24-7-67-0.hsd1.ca.comcast.net) has joined
*	rdes has quit (Quit: Konversation terminated!)
*	marr has quit (Ping timeout: 246 seconds)
*	plugin (~plugin@2604:2000:8101:3500:dcfe:e35c:bab3:828d) has joined
*	asthasr has quit (Quit: Leaving)
*	whitephoenix has quit (Read error: Connection reset by peer)
*	whitephoenix (~whitephoe@2600:100f:b026:2506:c952:3754:4640:4879) has joined
**** ENDING LOGGING AT Sat Sep 16 17:36:43 2017

**** BEGIN LOGGING AT Sun Sep 17 12:17:05 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	biglama has quit (Ping timeout: 264 seconds)
*	monoidal has quit (Ping timeout: 260 seconds)
*	sepp2k1 has quit (Ping timeout: 246 seconds)
*	Boarders (568443cc@gateway/web/freenode/ip.86.132.67.204) has joined
*	biglama (~Day_dream@ip-188.net-82-216-175.joinville2.rev.numericable.fr) has joined
*	Henning__ (~admin@c-66-41-224-186.hsd1.mn.comcast.net) has joined
*	cyborg-one has quit (Ping timeout: 255 seconds)
*	jellowj (~yellow-ja@dbg149.neoplus.adsl.tpnet.pl) has joined
*	Henning__ is now known as LadyMacDeath
*	systemfault (~rcyr@unaffiliated/rcyr) has joined
*	osa1 (~omer@91.93.255.36) has joined
*	osa1 has quit (Changing host)
*	osa1 (~omer@haskell/developer/osa1) has joined
*	aarvar (~foewfoiew@50.34.105.170) has left
*	OnkelTem has quit (Ping timeout: 248 seconds)
*	ianandrich has quit (Ping timeout: 260 seconds)
*	codrinb has quit (Ping timeout: 264 seconds)
*	taktoa has quit (Remote host closed the connection)
*	free_beard (~mircea@unaffiliated/free-beard/x-6152516) has joined
*	toad (~torstein@84-52-234.108.3p.ntebredband.no) has joined
*	t7 has quit (Remote host closed the connection)
*	cloudhead has quit (Ping timeout: 240 seconds)
*	wvansteen (~wvansteen@c-24-9-122-60.hsd1.co.comcast.net) has joined
*	LadyMacDeath has quit (Quit: LadyMacDeath)
*	coot___________ (~coot@188.146.168.136.nat.umts.dynamic.t-mobile.pl) has joined
*	aarvar (~foewfoiew@50.34.105.170) has joined
<dminuoso>	Been following some lectures on CT, and the lecturer implies that the monad is actually the kleisli arrow related to the type m. Is there any truth to that?
<hpc>	https://hackage.haskell.org/package/base-4.10.0.0/docs/Control-Arrow.html#t:Kleisli - i don't know about saying it "is" that
<hpc>	but the relationship exists
*	codrinb (~codrinb@94.177.40.42) has joined
*	mek42 has quit (Ping timeout: 248 seconds)
<dminuoso>	hpc, I mean it does sound tons more elegant when describing the associativity laws with >=> over >>=
*	smt_ (~smt@unaffiliated/smt) has joined
<hpc>	it is
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	codrinb has quit (Ping timeout: 260 seconds)
<dminuoso>	hpc, https://wiki.haskell.org/Arrow_tutorial seems to imply that an the arrow a -> m b is exactly then a kleisli arrow, if m is a Monad
*	Youmu has quit (Quit: Connection closed for inactivity)
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
<hpc>	yeah
*	dkov has quit (Quit: dkov)
<dminuoso>	So it seems a slip of the tongue to call the kleisli arrow the monad itself
*	hexfive (~beknowly@50.35.82.88) has joined
*	crownose (~weechat@2a02:8010:6173:0:2ab2:bdff:fe2b:c456) has joined
*	smt` has quit (Ping timeout: 246 seconds)
<hpc>	you're right on the rest of it though
*	plutoniix has quit (Read error: Connection reset by peer)
*	marr (~ccc@213-238-125-175.adsl.inetia.pl) has joined
*	tsaka__ has quit (Ping timeout: 264 seconds)
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
<c_wraith>	dminuoso: by the way, (Kleisli mº only needs to be a Category for m to be a monad.  It doesn't need the rest of the Arrow stuff.
*	plutoniix has quit (Read error: Connection reset by peer)
<c_wraith>	err, (Kleisli m)
*	revtintin has quit (Ping timeout: 260 seconds)
*	ConTeXnician (~ConTeXnic@host-091-097-200-101.ewe-ip-backbone.de) has joined
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	Boarders has quit (Quit: Page closed)
*	codrinb (~codrinb@94.177.40.42) has joined
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	crownose has quit (Quit: WeeChat 1.7.1)
*	ConTeXnician has quit (Client Quit)
*	the_2nd has quit (Quit: Leaving)
*	codrinb has quit (Ping timeout: 240 seconds)
*	Infinisil has quit (Quit: Lost terminal)
*	stef204 (~stef204@unaffiliated/stef-204/x-384198) has joined
*	pfurla has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
*	codrinb (~codrinb@94.177.40.42) has joined
*	t7 (~chatzilla@host86-138-8-152.range86-138.btcentralplus.com) has joined
*	osa1 has quit (Ping timeout: 240 seconds)
*	cloudhead (~cloudhead@ip5f5bd3e7.dynamic.kabel-deutschland.de) has joined
*	codrinb has quit (Ping timeout: 260 seconds)
*	Antoxyde has quit (Quit: Leaving)
*	asakeron (~asakeron@191.19.76.125) has joined
*	connrs has quit (Ping timeout: 240 seconds)
*	biglama has quit (Quit: Lost terminal)
*	kuribas has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
*	codrinb (~codrinb@94.177.40.42) has joined
*	connrs (~connrs@conners.plus.com) has joined
*	Scip (~scip@76.121.6.102) has joined
*	bennofs (~benno@217-68-187-120.dynamic.primacom.net) has joined
*	codrinb has quit (Ping timeout: 240 seconds)
*	samrat has quit (Ping timeout: 255 seconds)
*	mson (uid110608@gateway/web/irccloud.com/x-iitrqpreovklubku) has joined
*	chrissl (~chris@mail.meicloud.at) has joined
*	texasmynsted_ (~texasmyns@c-76-122-222-203.hsd1.tn.comcast.net) has joined
*	Scip has quit (Ping timeout: 240 seconds)
*	hc has quit (Read error: Connection reset by peer)
*	hc (~ircd@unaffiliated/hc) has joined
*	codrinb (~codrinb@94.177.40.42) has joined
*	texasmynsted has quit (Ping timeout: 240 seconds)
*	inhortte has quit (Ping timeout: 255 seconds)
*	ljc (~who@unaffiliated/ljc) has joined
*	newhoggy (~newhoggy@1.144.97.35) has joined
*	Scip (~scip@76.121.6.102) has joined
*	zero_byte (~zer0@ip-89-103-110-138.net.upcbroadband.cz) has joined
*	codrinb has quit (Ping timeout: 248 seconds)
*	newhoggy has quit (Ping timeout: 248 seconds)
*	codrinb (~codrinb@94.177.40.42) has joined
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
*	alex`` has quit (Ping timeout: 264 seconds)
*	codrinb has quit (Ping timeout: 240 seconds)
*	OnkelTem has quit (Ping timeout: 255 seconds)
*	jao (~jao@pdpc/supporter/professional/jao) has joined
*	gugah has quit (Quit: Leaving)
*	codrinb (~codrinb@94.177.40.42) has joined
*	inhortte (~polaris@31.4.242.119) has joined
*	zzq has quit (Quit: Lost terminal)
*	zzq (~zzq@46.120.114.167) has joined
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
*	quobo (uid178934@gateway/web/irccloud.com/x-xslvjcgasmnmpaqh) has joined
*	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has joined
*	raynold has quit (Quit: Connection closed for inactivity)
*	afarmer_ has quit (Ping timeout: 240 seconds)
*	vuto (~vuto@42.119.233.193) has joined
*	Cale (~cale@209.226.201.222) has joined
*	tsaka__ (~torstein@84-52-234.108.3p.ntebredband.no) has joined
*	zapbranig has quit (Quit: zapbranig)
*	cyborg-one (~cyborg-on@188-115-172-176.broadband.tenet.odessa.ua) has joined
*	dminuoso (~dminuoso@unaffiliated/dminuoso) has left ("Leaving")
<maerwald>	where does stack host packages?
*	dminuoso (~dminuoso@unaffiliated/dminuoso) has joined
*	OnkelTem has quit (Ping timeout: 240 seconds)
*	eacameron has quit (Ping timeout: 255 seconds)
*	SkyPatrol_ (~SkyPatrol@193.30.164.133) has joined
<dminuoso>	c_wraith, ah so that's just another way of describing the associativity and identity laws
<c_wraith>	dminuoso: yes.
*	jb55 has quit (Ping timeout: 240 seconds)
*	vuto has quit (Ping timeout: 264 seconds)
*	proofskiddie (~user@pal-210-106-65.itap.purdue.edu) has joined
*	SkyPatrol has quit (Ping timeout: 240 seconds)
*	Mon_Ouie has quit (Ping timeout: 264 seconds)
<sm>	maerwald: IIRC it has a cache of hackage on amazon
<maerwald>	I want to download https://www.stackage.org/nightly-2017-09-17/package/integer-gmp-1.0.1.0 but I don't know how
<sm>	maybe stack issue tracker more
*	PerseusPlease has quit (Quit: Leaving)
<sm>	um.. I accidentally the.. never mind
*	inhortte has quit (Ping timeout: 260 seconds)
*	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined
<sm>	doesn't stack install integer-gmp-1.0.1.0 do it ?
<maerwald>	I don't have or use stack
<maerwald>	I need the url
*	sepp2k has quit (Read error: Connection reset by peer)
*	Big_G has quit (Ping timeout: 248 seconds)
*	oish has quit (Ping timeout: 264 seconds)
<sm>	I humbly beg your pardon for suggesting that you did :)
<maerwald>	I pardon you!
*	Big_G (~Big_G@71-212-94-13.tukw.qwest.net) has joined
*	emmanuel_erc has quit (Remote host closed the connection)
*	armyriad has quit (Quit: Leaving)
<sm>	I think stack gets that by unpacking the ghc 8.2 tarball or whatever
<maerwald>	annoying
*	BartAdv has quit (Quit: Connection closed for inactivity)
*	proofskiddie has quit (Ping timeout: 252 seconds)
*	mmn80 has quit (Quit: Connection closed for inactivity)
<sm>	are you trying to use that newer integer-gmp with older ghc ?
*	ystael (~ystael@209.6.50.55) has joined
<maerwald>	no, I am packaging ghc and the libraries need to be explicit to the package manager
*	crobbins (~crobbins@2600:1700:6391:1c20::48) has joined
<sm>	ok.. maybe #ghc will help
<maerwald>	already tried
<sm>	bah. stupid haskell
<Liskni_si>	maerwald: http://hackage.fpcomplete.com/package/integer-gmp-1.0.0.1.tar.gz
<maerwald>	that's the old version
<maerwald>	ghc-8.2.1 uses integer-gmp-1.0.1.0
<Liskni_si>	oh, sorry, I just did stack -v unpack integer-gmp and pasted the url
<sm>	look for discussion of this from past packaging events ? Otherwise you could ping one of the wizards like bgamari
*	paolino has quit (Remote host closed the connection)
*	ljc has quit (Ping timeout: 255 seconds)
*	gugah (~gugah@181.28.219.193) has joined
<maerwald>	in the past I waited 4 weeks until someone fixed it
<Liskni_si>	then I guess stack unpack with nightly will fail as well :-)
*	OnkelTem has quit (Ping timeout: 248 seconds)
*	cyborg-one has quit (Quit: cyborg-one)
*	nior (~nior@129.10.9.51) has joined
*	knupfer (4fc26c14@gateway/web/cgi-irc/kiwiirc.com/ip.79.194.108.20) has joined
<Liskni_si>	yeah
<Liskni_si>	$ stack --resolver nightly-2017-09-17 unpack integer-gmp
<Liskni_si>	Updating package index Hackage (mirrored at https://s3.amazonaws.com/hackage.fpcomplete.com/) ...The following package identifiers were not found in your indices: integer-gmp-1.0.1.0
*	armyriad (~armyriad@gateway/vpn/privateinternetaccess/armyriad) has joined
*	beanbagula has quit (Ping timeout: 255 seconds)
*	inhortte (~polaris@31.4.242.246) has joined
*	Cale has quit (Ping timeout: 252 seconds)
*	codrinb has quit (Ping timeout: 260 seconds)
*	foundling (~Mutter@2607:fb90:835b:ba77:c54d:f5f:c2d4:a184) has joined
*	Cale (~cale@209.226.201.222) has joined
*	tremon has quit (Quit: getting boxed in)
*	herr_jth has quit ()
*	SpinTensor has quit (Quit: WeeChat 1.9)
*	crobbins has quit (Ping timeout: 252 seconds)
*	Psybur (~broseph@pool-108-44-203-65.clppva.fios.verizon.net) has joined
*	codrinb (~codrinb@94.177.40.42) has joined
*	kirillow (~kirillow@port-92-195-60-94.dynamic.qsc.de) has joined
*	SkyPatrol (~SkyPatrol@193.30.164.133) has joined
*	ons (~olof@helios.knark.io) has joined
*	mizu_no_oto (~textual@c-24-60-15-130.hsd1.ma.comcast.net) has joined
*	desperek has quit (Quit: died)
*	simukis has quit (Ping timeout: 246 seconds)
*	codrinb has quit (Ping timeout: 240 seconds)
*	Psybur has quit (Ping timeout: 240 seconds)
*	piyush-k` has quit (Remote host closed the connection)
*	piyush-k` (~user@14.139.174.50) has joined
*	SkyPatrol_ has quit (Ping timeout: 240 seconds)
*	foundling has quit (Remote host closed the connection)
*	Cale has quit (Read error: Connection reset by peer)
*	SkyPatrol_ (~SkyPatrol@netacc-gpn-7-140-39.pool.telenor.hu) has joined
*	toby1851 has quit (Ping timeout: 240 seconds)
*	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has joined
*	LiaoTao has quit (Ping timeout: 248 seconds)
*	Cale (~cale@209.226.201.222) has joined
*	SkyPatrol has quit (Ping timeout: 240 seconds)
*	codrinb (~codrinb@94.177.40.42) has joined
*	marcux (~marcux@2804:14c:67:8454:8c47:3796:8661:660) has joined
*	jellowj has quit (Ping timeout: 255 seconds)
*	ystael has quit (Ping timeout: 252 seconds)
*	ystael (~ystael@209.6.50.55) has joined
*	danthemyth has quit (Ping timeout: 248 seconds)
*	yaun has quit (Ping timeout: 240 seconds)
*	stef204 has quit (Quit: WeeChat 1.9)
*	foundling (~Mutter@2607:fb90:835b:ba77:c54d:f5f:c2d4:a184) has joined
*	codrinb has quit (Ping timeout: 240 seconds)
*	`Guest00000 has quit (Ping timeout: 260 seconds)
<maerwald>	nice, people update .cabal files of packages in-place without bumping too
*	kadoban (~mud@unaffiliated/kadoban) has joined
<maerwald>	https://hackage.haskell.org/package/echo
<maerwald>	says process <1.7, but the tarball still does <1.5
*	LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) has joined
*	marcux has quit (Remote host closed the connection)
*	mcbears (~user@c-67-180-86-120.hsd1.ca.comcast.net) has joined
*	cloudhead has quit (Ping timeout: 260 seconds)
*	mibaz_1 (~m@160-3-177-68.cpe.cableone.net) has joined
*	Swizec has quit (Quit: Computer has gone to sleep.)
<maerwald>	how can people even build cabal-install? the dep-chain is broken
*	Swizec (~swizec@c-76-126-10-27.hsd1.ca.comcast.net) has joined
*	hexfive has quit (Ping timeout: 240 seconds)
*	codrinb (~codrinb@94.177.40.42) has joined
*	`Guest00000 (~user@37.113.156.118) has joined
*	jellowj (~yellow-ja@dbg149.neoplus.adsl.tpnet.pl) has joined
*	Swizec has quit (Quit: Leaving...)
*	gugah has quit (Remote host closed the connection)
*	codrinb has quit (Ping timeout: 240 seconds)
*	gugah (~gugah@181.28.219.193) has joined
*	gugah has quit (Max SendQ exceeded)
*	toby1851 (~toby@88-110-104-87.dynamic.dsl.as9105.com) has joined
*	chaosmasttter has quit (Ping timeout: 240 seconds)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	jbergok has quit (Ping timeout: 248 seconds)
<mniip>	maerwald, last time I had to do it I had to patch the dependencies on the bootstrap script
*	hackebeilchen has quit (Read error: Connection reset by peer)
*	codrinb (~codrinb@94.177.40.42) has joined
<maerwald>	Every ghc release is basically a nightmare, because not even the most important packages build. And that after how many months?
*	twandy has quit (Ping timeout: 260 seconds)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	Noldorin has quit (Ping timeout: 240 seconds)
<knupfer>	maerwald: ghc 8.2 with nix works like a charm
<maerwald>	good for you :>
*	carld (~carldougl@203.97.150.222) has joined
<knupfer>	and potentially good for you :>
<maerwald>	no
*	codrinb has quit (Ping timeout: 240 seconds)
<knupfer>	n8
<benzrf>	just succumb already
<benzrf>	give in to the nix collective
<benzrf>	hope this helps
<maerwald>	I prefer correctly working distros
<hydraz>	great thing nix is a package manager
*	knupfer has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
<maerwald>	gl using it without nixpkgs
<hydraz>	great thing nixpkgs is a package collection..?
<maerwald>	*yawn*
*	KongWubba (~yaaic@a89-182-66-200.net-htp.de) has joined
*	inhortte has quit (Ping timeout: 264 seconds)
*	wvansteen has quit (Ping timeout: 240 seconds)
*	codrinb (~codrinb@94.177.40.42) has joined
*	twandy has quit (Ping timeout: 264 seconds)
*	fizruk_ has quit (Quit: fizruk_)
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	tjbp has quit (Ping timeout: 246 seconds)
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	Ch3ck (~Ch3ck@162.222.117.226) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	codrinb has quit (Ping timeout: 246 seconds)
*	minos_ has quit (Quit: Leaving)
*	Durbley has quit (Read error: Connection reset by peer)
*	stef204 (~stef204@unaffiliated/stef-204/x-384198) has joined
<maerwald>	next package monkey-patching dependency constraints without a bump
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	foundling has quit (Quit: Mutter: www.mutterirc.com)
*	proofskiddie (~user@104-254-217-150.lfytina2.metronetinc.net) has joined
*	oisdk (~textual@83.136.43.202) has joined
*	tjbp (~tom@tjbp.net) has joined
*	nior has quit (Quit: /thread)
*	phyrex1an has quit (Ping timeout: 264 seconds)
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	codrinb (~codrinb@94.177.40.42) has joined
*	hiratara has quit (Ping timeout: 246 seconds)
*	bigos (~jacek@cpc103102-ward12-2-0-cust346.10-2.cable.virginm.net) has joined
*	fizruk_ (~anonymous@89-178-211-68.broadband.corbina.ru) has joined
*	takuan has quit (Remote host closed the connection)
*	beanbagula (~bean_bag@2a00:23c5:4b04:9200:88b8:8a41:fdda:7048) has joined
*	hiratara (~hiratara@240f:7:4708:1:b82d:f882:2c7:4ebc) has joined
*	codrinb has quit (Ping timeout: 248 seconds)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	beanbagula has quit (Ping timeout: 264 seconds)
*	codrinb (~codrinb@94.177.40.42) has joined
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	black0range has quit (Ping timeout: 240 seconds)
*	KongWubba has quit (Quit: Yaaic - Yet another Android IRC client - http://www.yaaic.org)
*	twandy has quit (Ping timeout: 240 seconds)
*	plutoniix has quit (Read error: Connection reset by peer)
*	jb55 (~jb55@70-36-49-138.dyn.novuscom.net) has joined
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	jbergok (~johan@212.33.145.222) has joined
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	Jeanne-Kamikaze has quit (Quit: Leaving)
*	groscoe has quit (Ping timeout: 260 seconds)
*	aarvar has quit (Remote host closed the connection)
*	Arul (62ead957@gateway/web/freenode/ip.98.234.217.87) has joined
*	mson has quit (Quit: Connection closed for inactivity)
*	pera has quit (Ping timeout: 255 seconds)
*	ystael has quit (Ping timeout: 248 seconds)
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	newhoggy (~newhoggy@1.144.97.35) has joined
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	Vq has quit (Ping timeout: 240 seconds)
*	aavogt (~aavogt@24-52-245-124.cable.teksavvy.com) has joined
*	Fubar^ has quit (Ping timeout: 240 seconds)
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	argent0 (~aner@186.133.151.169) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	vuto (~vuto@42.119.233.193) has joined
*	carld has quit (Ping timeout: 260 seconds)
*	groscoe (~nb@187.20.159.147) has joined
*	mizu_no_oto has quit (Ping timeout: 240 seconds)
*	vuto has quit (Ping timeout: 240 seconds)
*	Vq (~vq@90-227-195-41-no77.tbcn.telia.com) has joined
*	Fubar^ (~fubar@90-227-195-41-no77.tbcn.telia.com) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	hiratara has quit (Remote host closed the connection)
*	telser has quit (Ping timeout: 240 seconds)
*	mizu_no_oto (~textual@c-24-60-15-130.hsd1.ma.comcast.net) has joined
*	jmorris (~jmorris@165-158-181-180.cpe.skymesh.net.au) has joined
*	eacameron (~eacameron@cpe-74-137-151-17.kya.res.rr.com) has joined
*	telser (~telser@209.195.6.92) has joined
*	codrinb has quit (Ping timeout: 240 seconds)
*	hiratara (~hiratara@240f:7:4708:1:e4c8:5ce8:1f83:1e8e) has joined
*	qwertydvorak has quit (Ping timeout: 252 seconds)
<orzo>	Anybody have any advise on laying out module names for a project?
*	plutoniix has quit (Read error: Connection reset by peer)
*	mizu_no_oto has quit (Ping timeout: 260 seconds)
<orzo>	i've been following the haskell library convention of Data/Control/Crypto/ top levels
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
<orzo>	but i wonder if it wouldn't make more sense to name modules based on where they occur in the dependency graph
*	eacameron has quit (Ping timeout: 240 seconds)
<orzo>	so that you could import the bottom layer with a single import statement
*	stef204 has quit (Quit: WeeChat 1.9)
<orzo>	or the next layer
<orzo>	So I would classify top-levels by layer rather than semantic scope
*	codrinb (~codrinb@94.177.40.42) has joined
*	Sampuka has quit (Ping timeout: 255 seconds)
*	kriztw (~kris@128.199.43.215) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	nous1024 (~kanai@i242032.dynamic.ppp.asahi-net.or.jp) has joined
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	codrinb has quit (Ping timeout: 240 seconds)
*	jb55 has quit (Ping timeout: 260 seconds)
*	Cale has quit (Ping timeout: 240 seconds)
*	plutoniix has quit (Read error: Connection reset by peer)
*	afarmer (~afarmer@199.201.64.4) has joined
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	kriztw has quit (Remote host closed the connection)
*	CoderPuppy (~cpup@32.218.113.80) has joined
*	mach (~user@c-24-23-203-109.hsd1.ca.comcast.net) has joined
*	kirillow has quit (Quit: WeeChat 1.7)
*	mach is now known as Guest29766
*	cpup has quit (Ping timeout: 255 seconds)
*	cpup- has quit (Ping timeout: 260 seconds)
*	xaviergmail has quit (Quit: WeeChat 1.9)
*	newhoggy has quit (Remote host closed the connection)
*	codrinb (~codrinb@94.177.40.42) has joined
*	nullifidian_ (~nullifidi@unaffiliated/nullifidian) has joined
*	mizu_no_oto (~textual@c-24-60-15-130.hsd1.ma.comcast.net) has joined
*	cpup (~cpup@32.218.113.80) has joined
*	argent0 has quit (Ping timeout: 255 seconds)
*	oisdk has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	plutoniix has quit (Read error: Connection reset by peer)
*	myrl1 has quit (Ping timeout: 246 seconds)
*	Myrl-saki has quit (Ping timeout: 240 seconds)
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	sigmundv has quit (Read error: Connection reset by peer)
*	nullifidian has quit (Ping timeout: 240 seconds)
*	derek_c (47ca5444@gateway/web/freenode/ip.71.202.84.68) has joined
<derek_c>	Is there a meaningful difference between a program interpreted in ghci and one compiled via ghc?
<derek_c>	in terms of performance
*	sigmundv (~sigmundv@178.167.153.106.threembb.ie) has joined
<isaac__>	I'm pretty sure there is
*	codrinb has quit (Ping timeout: 264 seconds)
<geekosaur>	define 'meaningful'
<derek_c>	it's a number crunching program of some sort
<geekosaur>	ghci compiles to interpreted bytecode instead of native code. ghci doesn't support optimization at all.
<derek_c>	fairly memory/cpu intensive
<derek_c>	I see
<derek_c>	thanks
<hpc>	geekosaur: if you're a nihilist does haskell perform better? :D
*	Guest29766 has quit (Remote host closed the connection)
*	mach` (~user@c-24-23-203-109.hsd1.ca.comcast.net) has joined
*	mach` has quit (Remote host closed the connection)
*	kanshazan has quit (Ping timeout: 255 seconds)
*	beanbagula (~bean_bag@2a00:23c5:4b04:9200:88b8:8a41:fdda:7048) has joined
<dminuoso>	derek_c, you could have just rent two apartments, set up a bitcoin miner in each - and have the implementation run in ghci in one and ghc in the other. And then look at the electricity bill at the end of the year.
<dminuoso>	Then you would have known.
<dminuoso>	Gives you all information such as speed and efficiency.
*	slomo has quit (Read error: Connection reset by peer)
*	codrinb (~codrinb@94.177.40.42) has joined
*	plutoniix has quit (Read error: Connection reset by peer)
*	twandy (~Thunderbi@cas-fw-sta.inet.casair.net) has joined
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	des_ (~textual@2601:8c2:4280:2a91:ac9b:457f:5c1:f2dc) has joined
*	beanbagula has quit (Ping timeout: 246 seconds)
*	fDev2179 (~fDev2179@c-73-169-245-192.hsd1.wa.comcast.net) has joined
*	cpup- (~cpup@32.218.113.106) has joined
*	codrinb has quit (Ping timeout: 240 seconds)
*	cpup has quit (Ping timeout: 248 seconds)
*	Jesin (~Jesin@pool-72-83-138-15.washdc.fios.verizon.net) has joined
*	CoderPuppy has quit (Ping timeout: 248 seconds)
*	twandy has quit (Ping timeout: 264 seconds)
*	numberten has quit (Ping timeout: 264 seconds)
*	cpup (~cpup@32.218.113.106) has joined
<mibaz_1>	boom easy profiling
*	takle has quit (Remote host closed the connection)
<mibaz_1>	check which one can factor the first 10^23 primes first
*	plutoniix has quit (Read error: Connection reset by peer)
*	codrinb (~codrinb@94.177.40.42) has joined
*	`^_^v (~nycs@cpe-98-14-70-190.nyc.res.rr.com) has joined
*	lukaramu_ has quit (Quit: Leaving)
*	plutoniix (~q@node-hom.pool-1-10.dynamic.totbb.net) has joined
*	rickerbh (~rickerbh@14-203-105-198.static.tpgi.com.au) has joined
<kadoban>	That's a lot of primes
*	theelous3 has quit (Ping timeout: 248 seconds)
*	sz0 has quit (Quit: Connection closed for inactivity)
*	codrinb has quit (Ping timeout: 240 seconds)
*	justan0theruser (~justanoth@unaffiliated/justanotheruser) has joined
*	JScully has quit (Quit: JScully)
*	gienah_ has quit (Ping timeout: 252 seconds)
**** BEGIN LOGGING AT Tue Sep 19 18:49:46 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
*	louispan has quit (Quit: louispan)
<robkennedy>	lyxia: if my program doesn't depend on every field of A, id want it produce results
*	kuttifunk has quit (Ping timeout: 240 seconds)
*	kuttifunk1 is now known as kuttifunk
<geekosaur>	this does not have potential security implications?
<geekosaur>	or correctness implications?
*	a3Dman has quit (Ping timeout: 255 seconds)
<lyxia>	robkennedy: still, what if the fields it does depend on fail to parse?
*	codrinb has quit (Ping timeout: 260 seconds)
*	dargains has quit (Remote host closed the connection)
<robkennedy>	Geekosaur: In the end tbh I don't especially care - which in the history of math v physics tends to side with physics
*	dargains (~dargains@2804:7f7:e282:14c0:cc19:6010:b0ea:b05e) has joined
*	joomy (~joomy@c-73-142-151-191.hsd1.ct.comcast.net) has joined
<robkennedy>	lyxia: yes, those should produce the `Nothing` that I'll handle correctly 
*	Youmu (uid129469@gateway/web/irccloud.com/x-kdmbpwmowryqglie) has joined
<robkennedy>	I'm not asking to give up all safety, just safety on the fields I don't care about/use (which sounds like laziness)
<lyxia>	okay so you have fields that are Maybe, not just any B or C
*	ebsen has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
*	`Guest00000 has quit (Ping timeout: 264 seconds)
*	mj_k (~mj_k@59.10.109.21) has joined
*	ianandrich has quit (Ping timeout: 240 seconds)
*	codrinb (~codrinb@94.177.40.42) has joined
*	`Guest00000 (~user@37.113.188.55) has joined
*	dargains has quit (Ping timeout: 240 seconds)
*	mj_k has quit (Client Quit)
*	mj_k (~mj_k@59.10.109.21) has joined
*	a3Dman (~3Dman@unaffiliated/a3dman) has joined
*	erisco has quit (Quit: Leaving)
*	robkennedy has quit (Ping timeout: 255 seconds)
*	banc has quit (Quit: ZNC - http://znc.in)
*	hucksy_ (~hucksy@p5B3C5449.dip0.t-ipconnect.de) has joined
*	conal has quit (Quit: Computer has gone to sleep.)
*	conal (~conal@104.255.240.10) has joined
*	Fekinox has quit (Ping timeout: 248 seconds)
*	codrinb has quit (Ping timeout: 260 seconds)
*	Fekinox (~Zen@cpe-74-72-183-234.nyc.res.rr.com) has joined
*	hucksy has quit (Ping timeout: 240 seconds)
*	juhp has quit (Quit: juhp)
*	whitephoenix has quit (Ping timeout: 248 seconds)
*	groscoe has quit (Ping timeout: 248 seconds)
*	eklavya (~eklavya@2405:205:1205:40f6:d07b:4809:a884:3573) has joined
*	codrinb (~codrinb@94.177.40.42) has joined
*	poindontcare has quit (Ping timeout: 264 seconds)
*	shangxiao has quit (Ping timeout: 240 seconds)
*	sellout- (~Adium@c-98-245-162-101.hsd1.co.comcast.net) has joined
*	iphy has quit (Quit: Connection closed for inactivity)
*	sullyj3 (67e18ca2@gateway/web/freenode/ip.103.225.140.162) has joined
*	justanotheruser (~justanoth@unaffiliated/justanotheruser) has joined
*	eklavya has quit (Ping timeout: 255 seconds)
*	codrinb has quit (Ping timeout: 240 seconds)
<sullyj3>	Hey, what's going on with the following?:
*	rdavison has quit (Quit: rdavison)
*	twandy has quit (Ping timeout: 240 seconds)
<sullyj3>	:t liftM (+1) $ return 1
<lambdabot>	(Num r, Monad m) => m r
<sullyj3>	liftM (+1) $ return 1
<sullyj3>	> liftM (+1) $ return 1
<lambdabot>	 error:
<lambdabot>	     • Ambiguous type variable ‘m0’ arising from a use of ‘show_M542518867778...
<lambdabot>	       prevents the constraint ‘(Show (m0 Integer))’ from being solved.
*	Akaz (~Akaz@99-42-124-147.lightspeed.frokca.sbcglobal.net) has joined
<sullyj3>	hm on my machine that gives 2
*	shangxiao (~shangxiao@106-68-92-108.dyn.iinet.net.au) has joined
*	banc (~master@217.151.98.168) has joined
*	poindontcare (~user@107.170.205.20) has joined
*	crobbins has quit (Ping timeout: 240 seconds)
*	jmorris has quit (Ping timeout: 240 seconds)
<Welkin>	liftM is fmap
*	hamishmack has quit (Quit: hamishmack)
<Welkin>	also, what are you `return`ing into?
<geekosaur>	ghci speculatively tries m as IO. lambdabot does not do IO
<Welkin>	> fmap (+1) $ return 1 :: [Int]
<lambdabot>	 [2]
*	codrinb (~codrinb@94.177.40.42) has joined
*	Wizek_ has quit (Ping timeout: 240 seconds)
*	shangxiao has quit (Ping timeout: 240 seconds)
*	Rodya_ (~Rodya_@2601:46:4001:e0b4:fd42:e38e:f163:ea29) has joined
*	shangxiao (~shangxiao@106-68-92-108.dyn.iinet.net.au) has joined
*	koserge has quit (Ping timeout: 240 seconds)
*	robkennedy (~rkennedy@2600:1:9618:476:b03e:4095:2bee:6d3b) has joined
*	jchia has quit (Ping timeout: 240 seconds)
*	pandeiro has quit (Ping timeout: 255 seconds)
*	hamishmack (~hamishmac@121-73-30-206.cable.telstraclear.net) has joined
*	joncfoo (~jonathan@c-67-176-93-55.hsd1.co.comcast.net) has joined
*	jchia (~jchia@116.192.18.22) has joined
*	shangxiao has quit (Ping timeout: 240 seconds)
*	eklavya (~eklavya@2405:205:1205:40f6:413d:27aa:ef01:2039) has joined
*	hackagebot checkmate 0.1.3 – Generate checklists relevant to a given patch – https://hackage.haskell.org/package/checkmate
*	samrat (~samrat@202.51.76.69) has joined
*	Big_G has quit (Quit: Leaving)
*	CHCl3 has quit (Quit: Saliendo)
**** BEGIN LOGGING AT Thu Sep 28 12:39:12 2017

*	Now talking on #haskell
*	Topic for #haskell is: https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017
*	Topic for #haskell set by mauke!5lzdiZJQGk@p3m/member/mauke (Mon Jul 31 05:45:11 2017)
*	Channel #haskell url: http://www.haskell.org/
<crucify_me>	> reverseTuple = uncurry (flip (,))
<lambdabot>	 <hint>:1:14: error:
<lambdabot>	     parse error on input ‘=’
<lambdabot>	     Perhaps you need a 'let' in a 'do' block?
*	stoopkid__ has quit (Quit: Connection closed for inactivity)
<crucify_me>	> let reverseTuple = uncurry (flip (,))
<lambdabot>	 <no location info>: error:
<lambdabot>	     not an expression: ‘let reverseTuple = uncurry (flip (,))’
<crucify_me>	hi why does this function need uncurry ^
<maerwald>	@define reverseTuple = uncurry (flip (,))
<lambdabot>	 Defined.
*	Jesin (~Jesin@pool-72-83-138-15.washdc.fios.verizon.net) has joined
<maerwald>	:t reverseTuple
<lambdabot>	(b, a) -> (a, b)
*	jellowj (~yellow-ja@dcn230.neoplus.adsl.tpnet.pl) has joined
<maerwald>	:t flip (,)
<lambdabot>	b -> a -> (a, b)
<maerwald>	because of that
<crucify_me>	oh so its because of how flip is written. 
<cocreature>	:t (,)
<lambdabot>	a -> b -> (a, b)
<cocreature>	:t flip (,)
<maerwald>	it's needlessly tricky pointfree style
<lambdabot>	b -> a -> (a, b)
<maerwald>	write it without flip
<maerwald>	flip is one of those functions I literally never use
<crucify_me>	maerwald, thanks, its a book example against the equivalent reverseTuple' (a, b) = (b, a) 
<maerwald>	ah
*	Wizek_ (~Wizek@catv-89-132-132-110.catv.broadband.hu) has joined
*	tremon (~aschuring@53541C2B.cm-6-5a.dynamic.ziggo.nl) has joined
<crucify_me>	maerwald, you never use it? I'm a beginner. there's a long section on const flip and id that I'm still studying
<maerwald>	:t \(x, y) -> (y, x)
<lambdabot>	(b, a) -> (a, b)
*	iAmerikan has quit (Ping timeout: 260 seconds)
*	path[l] has quit (Quit: path[l])
<maerwald>	I read that function and I understand it within 0.3s
<maerwald>	for the other version I probably need 10 times that time
<crucify_me>	good call
<maerwald>	unless I've seen it in the last 15 minutes
<maerwald>	and it's just as short
<crucify_me>	the point of the lesson is currying so that's why they have flip there I presume
<crucify_me>	assume
<maerwald>	yeah, I guess it's not to come up with real world examples
<crucify_me>	thanks for the quick response
*	zero_byte (~zer0@11.110.broadband5.iol.cz) has joined
*	danieli has quit (Remote host closed the connection)
*	lambda-11235 (~lambda-11@168.150.98.231) has joined
*	hulufei (~hulufei@38.121.61.254) has joined
*	samrat has quit (Ping timeout: 258 seconds)
*	motersen (~user@x4e3460b6.dyn.telefonica.de) has joined
*	rotty has quit (Ping timeout: 255 seconds)
<mizu_no_oto>	crucify_me: flip, const and id are all useful with higher order functions
*	iAmerikan (~dwshrewt@unaffiliated/iamerikan) has joined
*	albertus1 (~seb@x55b4bdf6.dyn.telefonica.de) has joined
*	albertus1 has quit (Max SendQ exceeded)
<mizu_no_oto>	crucify_me: e.g. foldr (flip foo) bar baz
<mizu_no_oto>	if foo's arguments are the reverse of what you need
*	albertus1 (~seb@x55b4bdf6.dyn.telefonica.de) has joined
<maerwald>	mizu_no_oto: why would you need flip there?
<maerwald>	flip just forces you to visualize the type signature and the omitted arguments, which costs extra time
*	hulufei has quit (Ping timeout: 248 seconds)
<mizu_no_oto>	> foldl (flip (:)) [] [1,2,3,4,5]
<lambdabot>	 [5,4,3,2,1]
<mizu_no_oto>	> foldl (\x acc -> x : acc) [] [1,2,3,4,5]
<lambdabot>	 error:
<lambdabot>	     • Occurs check: cannot construct the infinite type: a ~ [a]
<lambdabot>	       Expected type: [a]
*	nakal_ (~nakal@port-92-201-38-160.dynamic.qsc.de) has joined
*	nakal has quit (Disconnected by services)
*	SkyPatrol_ (~SkyPatrol@193.30.164.133) has joined
<mizu_no_oto>	> foldl (\acc x-> x : acc) [] [1,2,3,4,5]
<lambdabot>	 [5,4,3,2,1]
*	rotty (~rotty@yade.chaostreff.at) has joined
<crucify_me>	maerwald, mizu_no_oto hold on please could I get a little lesson re: foldr ?      re: this sum' xs = foldr (+) 0 xs or the pointfree summ = foldr (+) 0      ?
<crucify_me>	when you have a fold, you need the zero as a counter?
*	iqubic (1811e538@gateway/web/freenode/ip.24.17.229.56) has joined
<shloub>	you need a start value
<maerwald>	or end value :P
<crucify_me>	that's what I meant thanks
<iqubic>	Well, I'm taking the plunge head first. I'm installing NixOS cold turkey.
*	SkyPatrol has quit (Ping timeout: 240 seconds)
<maerwald>	can lambdabot visualize foldr?
<mizu_no_oto>	crucify_me: what's foldr (+) 0 [] going to return?
<shloub>	i believe foldr1 takes the first (or last…) for this value
*	osa1 has quit (Ping timeout: 240 seconds)
*	gypsydave5 has quit (Ping timeout: 248 seconds)
*	mr_sm1th has quit (Ping timeout: 248 seconds)
<crucify_me>	zero?
<crucify_me>	or []
<iqubic>	:t foldr
<lambdabot>	Foldable t => (a -> b -> b) -> b -> t a -> b
<shloub>	> foldr (+) 0 []
<crucify_me>	iqubic, yeah frankly I cannot read that signature quite yet
<lambdabot>	 0
*	jellowj has quit (Ping timeout: 240 seconds)
*	danieli (~duniel@85.113.173.53) has joined
<maerwald>	I remember lamdabot being able to expan simple foldr commands, no?
*	XorSwap has quit (Ping timeout: 240 seconds)
<crucify_me>	I never understood folds when I was doing scheme.
<crucify_me>	*learning
*	pja (~pja@2a02:8010:6098:0:55c0:ec2a:80f2:33d9) has joined
<mizu_no_oto>	you can simplify it to "(a -> b -> b) -> b -> [a] -> b"
<int-e>	> foldr f a [b,c,d]
<lambdabot>	 f b (f c (f d a))
<int-e>	maerwald: like this?
<maerwald>	exactly, you see 'a' being at the "end"
<int-e>	:t f -- dirty trick
<lambdabot>	FromExpr a => a
<maerwald>	so it can be confusing to call it a start value
*	danieli has quit (Changing host)
*	danieli (~duniel@unaffiliated/danieli) has joined
<crucify_me>	I think of it as a "zeroed out" counter. is that wrong?
*	oooooooooooooo (5a034963@gateway/web/freenode/ip.90.3.73.99) has joined
<int-e>	> a^7
<lambdabot>	 a * a * (a * a) * (a * a * a)
<maerwald>	I just think of it as the bouncer
<maerwald>	:P
<int-e>	but fun to play with.
<crucify_me>	sorry I'm losing this thread now
*	oooooooooooooo has quit (Client Quit)
*	pja has quit (Client Quit)
<maerwald>	if there is no one getting into the party, the bouncer is the only person in the club, right?
*	mr_sm1th (~quassel@5ED4F634.cm-7-5d.dynamic.ziggo.nl) has joined
<maerwald>	err, forget that xD
*	Volt_ has quit (Quit: Volt_)
<mizu_no_oto>	crucify_me: basically, it takes a function (a -> b -> b), some initial value of type b, then a list of a's,s and applies that (a -> b -> b) in sequence to get back a single b at the end.
<monochrom>	And if someone is getting into the party, the bouncer kicks them out, so the bouncer ends up stil being the only person.
<maerwald>	well, I meant bouncer more in the sense that when it hits 'a' it "bounces back"
<mizu_no_oto>	It doesn't have to be a 'zero' of some sort, but you often want it to be a 'zero'
<maerwald>	but we are in the land of not-so-useful analogies now
*	raingloom (~raingloom@catv-178-48-182-37.catv.broadband.hu) has joined
*	rotty has quit (Ping timeout: 258 seconds)
<tdammers>	useful analogies are like winnable wars
<maerwald>	lol
<crucify_me>	who let robert mcNamara into the party?
<monochrom>	Me.
*	chlong has quit (Ping timeout: 248 seconds)
<mizu_no_oto>	> foldr (:) [5,6,7] [1,2,3,4]
<lambdabot>	 [1,2,3,4,5,6,7]
*	Sampuka has quit (Remote host closed the connection)
<crucify_me>	excellent example I can probably figure it out now mizu_no_oto 
<mizu_no_oto>	^ that basically evaluates to 1 : 2 : 3 : 4 : [5,6,7]
<iqubic>	> foldl (:) [5,6,7] [1,2,3,4]
<lambdabot>	 error:
<lambdabot>	     • Occurs check: cannot construct the infinite type: a ~ [a]
<lambdabot>	       Expected type: [a] -> [a] -> [a]
<mizu_no_oto>	> foldl (flip (:)) [5,6,7] [1,2,3,4]
<lambdabot>	 [4,3,2,1,5,6,7]
<crucify_me>	> foldl (:) [1,2,3,4] [5,6,7]
<lambdabot>	 error:
<lambdabot>	     • Occurs check: cannot construct the infinite type: a ~ [a]
<lambdabot>	       Expected type: [a] -> [a] -> [a]
*	gypsydave5 (~user@host-2-96-74-231.as13285.net) has joined
<crucify_me>	ok thanks I'm going to look at this for a spell. THANKS ALL
*	quazimodo has quit (Ping timeout: 258 seconds)
<maerwald>	is there an editor that can expand basic expressions like foldr and so on? I mean, not just the type signature
*	Volt_ (~Volt_@0587375903.wireless.umich.net) has joined
<fakenullie>	Expand?
*	xcmw (~textual@2605:a000:132b:2b4:e8ae:62e5:7aea:1f0c) has joined
<maerwald>	> foldr f a [b,c,d]
<lambdabot>	 f b (f c (f d a))
*	towerio (~towerio@137.139.132.70) has joined
Python interface unloaded
FiSHLiM plugin unloaded
**** ENDING LOGGING AT Thu Sep 28 13:13:55 2017

